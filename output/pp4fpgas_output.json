{
    "metadata": {
        "input_documents": [
            "/app/input/pp4fpgas.pdf"
        ],
        "persona": "",
        "job_to_be_done": "Prepare a comprehensive literature review focusing on methodologies, datasets, and performance benchmarks.",
        "processing_timestamp": "2025-07-26T17:07:50.861828"
    },
    "extracted_sections": [
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "Pipelining and Parallelism",
            "importance_rank": 1
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 2
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 3
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "Calculating Performance",
            "importance_rank": 4
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "N",
            "importance_rank": 5
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "accelerator cores",
            "importance_rank": 6
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "⃝",
            "importance_rank": 7
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "section_title": "Loop Optimizations and Array Partitioning",
            "importance_rank": 8
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "⃝",
            "importance_rank": 9
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 10
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 11
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "Design Optimization",
            "importance_rank": 12
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 13
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "}",
            "importance_rank": 14
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "⃝",
            "importance_rank": 15
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "×",
            "importance_rank": 16
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "⃝",
            "importance_rank": 17
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "⃝",
            "importance_rank": 18
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 19
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 20
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "±",
            "importance_rank": 21
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "×",
            "importance_rank": 22
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "interval",
            "importance_rank": 23
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "block-diagonal",
            "importance_rank": 24
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "IEEE Computer",
            "importance_rank": 25
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 26
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 27
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 95,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 28
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "n",
            "importance_rank": 29
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 30
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 188,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 31
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "section_title": "N",
            "importance_rank": 32
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "⃝",
            "importance_rank": 33
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 34
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 35
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "∗",
            "importance_rank": 36
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 37
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 38
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "section_title": "⃝",
            "importance_rank": 39
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 40
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "⃝",
            "importance_rank": 41
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "Specifying Loop Properties",
            "importance_rank": 42
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 43
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "∗",
            "importance_rank": 44
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 3,
            "section_title": "Contents",
            "importance_rank": 45
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "section_title": "INTRODUCTION",
            "importance_rank": 46
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "}",
            "importance_rank": 47
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "where do you store the data from your code?",
            "importance_rank": 48
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "⃝",
            "importance_rank": 49
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 50
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 90,
            "section_title": "⃝",
            "importance_rank": 51
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "operation chaining",
            "importance_rank": 52
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "loop initiation interval (II)",
            "importance_rank": 53
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "arXiv preprint arXiv:1408.5870",
            "importance_rank": 54
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "⃝",
            "importance_rank": 55
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 90,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 56
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "section_title": "Base FIR Architecture",
            "importance_rank": 57
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "⃝",
            "importance_rank": 58
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "⃝",
            "importance_rank": 59
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "Increasing Histogram Performance",
            "importance_rank": 60
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 125,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 61
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "Implementation",
            "importance_rank": 62
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "bits",
            "importance_rank": 63
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "+",
            "importance_rank": 64
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 65
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 66
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 67
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "half",
            "importance_rank": 68
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "section_title": "⃝",
            "importance_rank": 69
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "N",
            "importance_rank": 70
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 17,
            "section_title": "INTRODUCTION",
            "importance_rank": 71
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "×",
            "importance_rank": 72
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "Tapped delay line (TDL)",
            "importance_rank": 73
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "}",
            "importance_rank": 74
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "section_title": "⃝",
            "importance_rank": 75
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "⃝",
            "importance_rank": 76
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "⃝",
            "importance_rank": 77
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "}",
            "importance_rank": 78
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "M",
            "importance_rank": 79
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "Conclusion",
            "importance_rank": 80
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 53,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 81
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "section_title": "⃝",
            "importance_rank": 82
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "−",
            "importance_rank": 83
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 84
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "Y",
            "importance_rank": 85
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "Conclusion",
            "importance_rank": 86
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "section_title": "Overview",
            "importance_rank": 87
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 88
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "can",
            "importance_rank": 89
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "DFT optimization",
            "importance_rank": 90
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "⃝",
            "importance_rank": 91
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 92
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "section_title": "⃝",
            "importance_rank": 93
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "}",
            "importance_rank": 94
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "section_title": "⃝",
            "importance_rank": 95
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "section_title": "INTRODUCTION",
            "importance_rank": 96
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "AXI4 interconnect",
            "importance_rank": 97
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 4,
            "section_title": "CONTENTS",
            "importance_rank": 98
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "⃝",
            "importance_rank": 99
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "section_title": "⃝",
            "importance_rank": 100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "section_title": "⃝",
            "importance_rank": 102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "⃝",
            "importance_rank": 103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "section_title": "⃝",
            "importance_rank": 104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "r",
            "importance_rank": 105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "section_title": "Storage Tradeoﬀs and Array Partitioning",
            "importance_rank": 106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 232,
            "section_title": "Glossary",
            "importance_rank": 108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "⃝",
            "importance_rank": 109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "section_title": "⃝",
            "importance_rank": 110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "section_title": "Background",
            "importance_rank": 111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 1,
            "section_title": "Parallel Programming for FPGAs",
            "importance_rank": 112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 4,
            "section_title": "CONTENTS",
            "importance_rank": 113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 5,
            "section_title": "CONTENTS",
            "importance_rank": 114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 5,
            "section_title": "CONTENTS",
            "importance_rank": 115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 6,
            "section_title": "CONTENTS",
            "importance_rank": 116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 6,
            "section_title": "CONTENTS",
            "importance_rank": 117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "section_title": "Preface",
            "importance_rank": 118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "section_title": "⃝",
            "importance_rank": 119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "section_title": "not",
            "importance_rank": 120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "section_title": "not",
            "importance_rank": 121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "section_title": "⃝",
            "importance_rank": 122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "section_title": "CONTENTS",
            "importance_rank": 123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "section_title": "CONTENTS",
            "importance_rank": 124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "section_title": "⃝",
            "importance_rank": 125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "section_title": "⃝",
            "importance_rank": 126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 9,
            "section_title": "Acknowledgements",
            "importance_rank": 127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 9,
            "section_title": "⃝",
            "importance_rank": 128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 10,
            "section_title": "CONTENTS",
            "importance_rank": 129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 10,
            "section_title": "CONTENTS",
            "importance_rank": 130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "section_title": "Chapter 1",
            "importance_rank": 131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "section_title": "Introduction",
            "importance_rank": 132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "section_title": "1.1",
            "importance_rank": 133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "section_title": "High-level Synthesis (HLS)",
            "importance_rank": 134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "INTRODUCTION",
            "importance_rank": 135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "⃝",
            "importance_rank": 142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "⃝",
            "importance_rank": 143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "⃝",
            "importance_rank": 144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "⃝",
            "importance_rank": 150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "section_title": "•",
            "importance_rank": 152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "INTRODUCTION",
            "importance_rank": 153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "⃝",
            "importance_rank": 158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "•",
            "importance_rank": 161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "⃝",
            "importance_rank": 162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "1.2",
            "importance_rank": 163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "section_title": "FPGA Architecture",
            "importance_rank": 164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "INTRODUCTION",
            "importance_rank": 165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "n",
            "importance_rank": 171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "section_title": "⃝",
            "importance_rank": 172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 15,
            "section_title": "INTRODUCTION",
            "importance_rank": 173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 16,
            "section_title": "INTRODUCTION",
            "importance_rank": 174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "section_title": "⃝",
            "importance_rank": 175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "section_title": "1.3",
            "importance_rank": 176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "section_title": "FPGA Design Process",
            "importance_rank": 177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "section_title": "I/O interface core",
            "importance_rank": 178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "section_title": "standard cores",
            "importance_rank": 179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "INTRODUCTION",
            "importance_rank": 180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "core-based design methodology",
            "importance_rank": 182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "platform-based design methodology",
            "importance_rank": 183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "roles",
            "importance_rank": 184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "shell",
            "importance_rank": 185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "1.4",
            "importance_rank": 186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "section_title": "⃝",
            "importance_rank": 191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "section_title": "INTRODUCTION",
            "importance_rank": 192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "section_title": "⃝",
            "importance_rank": 193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "section_title": "⃝",
            "importance_rank": 194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "section_title": "INTRODUCTION",
            "importance_rank": 195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "section_title": "⃝",
            "importance_rank": 196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "INTRODUCTION",
            "importance_rank": 197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "∗",
            "importance_rank": 198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "{",
            "importance_rank": 199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "{}",
            "importance_rank": 200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "−",
            "importance_rank": 201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": ">",
            "importance_rank": 202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "−−",
            "importance_rank": 203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "{",
            "importance_rank": 204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "−",
            "importance_rank": 205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "}",
            "importance_rank": 206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "<",
            "importance_rank": 207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "{",
            "importance_rank": 208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "∗",
            "importance_rank": 209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "}",
            "importance_rank": 210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "∗",
            "importance_rank": 211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "}",
            "importance_rank": 212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "function pipeline",
            "importance_rank": 213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "section_title": "⃝",
            "importance_rank": 214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 24,
            "section_title": "INTRODUCTION",
            "importance_rank": 215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 24,
            "section_title": "−",
            "importance_rank": 216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "section_title": "INTRODUCTION",
            "importance_rank": 217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "section_title": "n",
            "importance_rank": 218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "section_title": "n",
            "importance_rank": 219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "section_title": "n",
            "importance_rank": 220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "section_title": "n",
            "importance_rank": 221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "INTRODUCTION",
            "importance_rank": 222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "⃝",
            "importance_rank": 223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "resource limits",
            "importance_rank": 224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "recurrence",
            "importance_rank": 225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "recurrences fundamentally limit the throughput",
            "importance_rank": 226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "section_title": "of a design",
            "importance_rank": 227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "INTRODUCTION",
            "importance_rank": 228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "{",
            "importance_rank": 229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "<",
            "importance_rank": 230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "{",
            "importance_rank": 231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "−",
            "importance_rank": 232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": ">",
            "importance_rank": 233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "−−",
            "importance_rank": 234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "{",
            "importance_rank": 235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "−",
            "importance_rank": 236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "}",
            "importance_rank": 237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "<",
            "importance_rank": 238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "{",
            "importance_rank": 239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "∗",
            "importance_rank": 240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "}",
            "importance_rank": 241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "section_title": "}",
            "importance_rank": 242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "INTRODUCTION",
            "importance_rank": 243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "1.5",
            "importance_rank": 244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "Restructured Code",
            "importance_rank": 245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "⃝",
            "importance_rank": 246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "Restructured code",
            "importance_rank": 247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "1.6",
            "importance_rank": 248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "section_title": "Book Organization",
            "importance_rank": 249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "section_title": "INTRODUCTION",
            "importance_rank": 250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "section_title": "baseline implementation",
            "importance_rank": 251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "section_title": "⃝",
            "importance_rank": 252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 30,
            "section_title": "INTRODUCTION",
            "importance_rank": 253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "section_title": "Chapter 2",
            "importance_rank": 254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "section_title": "Finite Impulse Response (FIR) Filters",
            "importance_rank": 255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "section_title": "2.1",
            "importance_rank": 256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "section_title": "Overview",
            "importance_rank": 257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "2.2",
            "importance_rank": 259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "Background",
            "importance_rank": 260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "impulse response",
            "importance_rank": 261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "convolution",
            "importance_rank": 262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "coeﬃcients",
            "importance_rank": 263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "taps",
            "importance_rank": 264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "h",
            "importance_rank": 265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "y",
            "importance_rank": 267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "i",
            "importance_rank": 268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "−",
            "importance_rank": 270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "h",
            "importance_rank": 272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "·",
            "importance_rank": 274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "i",
            "importance_rank": 276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "−",
            "importance_rank": 277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "Moving average ﬁlters",
            "importance_rank": 279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "h",
            "importance_rank": 280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": ",",
            "importance_rank": 281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": ",",
            "importance_rank": 282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "box car ﬁlter",
            "importance_rank": 283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "/N",
            "importance_rank": 284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "h",
            "importance_rank": 285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "y",
            "importance_rank": 288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "i",
            "importance_rank": 289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "i",
            "importance_rank": 294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "−",
            "importance_rank": 295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "j",
            "importance_rank": 296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "−",
            "importance_rank": 298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "/N",
            "importance_rank": 299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "N",
            "importance_rank": 300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "y",
            "importance_rank": 301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "y",
            "importance_rank": 302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "·",
            "importance_rank": 303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "causal",
            "importance_rank": 307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "y",
            "importance_rank": 308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "·",
            "importance_rank": 309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "section_title": "x",
            "importance_rank": 312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "section_title": "N",
            "importance_rank": 314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "section_title": "2.3",
            "importance_rank": 315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "∗",
            "importance_rank": 317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "{",
            "importance_rank": 318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "{",
            "importance_rank": 319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "−",
            "importance_rank": 320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "−",
            "importance_rank": 321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "}",
            "importance_rank": 322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "−",
            "importance_rank": 323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": ">",
            "importance_rank": 324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "−−",
            "importance_rank": 325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "{",
            "importance_rank": 326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "{",
            "importance_rank": 327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "∗",
            "importance_rank": 328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "}",
            "importance_rank": 329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "{",
            "importance_rank": 330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "−",
            "importance_rank": 331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "∗",
            "importance_rank": 332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "}",
            "importance_rank": 333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "}",
            "importance_rank": 334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "∗",
            "importance_rank": 335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "section_title": "}",
            "importance_rank": 336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "· · ·",
            "importance_rank": 338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "2.4",
            "importance_rank": 339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "section_title": "X",
            "importance_rank": 340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "−",
            "importance_rank": 344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "−",
            "importance_rank": 345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "⃝",
            "importance_rank": 346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "2.5",
            "importance_rank": 347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "Operation Chaining",
            "importance_rank": 348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "section_title": "Operation chaining",
            "importance_rank": 349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "*",
            "importance_rank": 351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "*",
            "importance_rank": 352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "+",
            "importance_rank": 353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "*",
            "importance_rank": 354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "+",
            "importance_rank": 355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "⃝",
            "importance_rank": 356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "⃝",
            "importance_rank": 357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "⃝",
            "importance_rank": 358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "section_title": "⃝",
            "importance_rank": 359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "−",
            "importance_rank": 361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": ">",
            "importance_rank": 362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "−−",
            "importance_rank": 363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "{",
            "importance_rank": 364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "−",
            "importance_rank": 365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "∗",
            "importance_rank": 366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "}",
            "importance_rank": 367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "2.6",
            "importance_rank": 368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "section_title": "Code Hoisting",
            "importance_rank": 369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "−",
            "importance_rank": 371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": ">",
            "importance_rank": 372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "−−",
            "importance_rank": 373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "{",
            "importance_rank": 374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "−",
            "importance_rank": 375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "}",
            "importance_rank": 376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "−",
            "importance_rank": 377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": ">",
            "importance_rank": 378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "−−",
            "importance_rank": 379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "{",
            "importance_rank": 380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "∗",
            "importance_rank": 381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "}",
            "importance_rank": 382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "2.7",
            "importance_rank": 383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "Loop Fission",
            "importance_rank": 384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "section_title": "Loop ﬁssion",
            "importance_rank": 385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": ">",
            "importance_rank": 388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "{",
            "importance_rank": 390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "}",
            "importance_rank": 394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "{",
            "importance_rank": 395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "}",
            "importance_rank": 396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "2.8",
            "importance_rank": 397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "Loop Unrolling",
            "importance_rank": 398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "⃝",
            "importance_rank": 399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "Loop unrolling",
            "importance_rank": 400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "factor",
            "importance_rank": 401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−−",
            "importance_rank": 403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": ">",
            "importance_rank": 405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": ">",
            "importance_rank": 406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "section_title": "−",
            "importance_rank": 407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "section_title": "⃝",
            "importance_rank": 408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "section_title": "⃝",
            "importance_rank": 409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "section_title": ">",
            "importance_rank": 410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": ">",
            "importance_rank": 413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "{",
            "importance_rank": 415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "∗",
            "importance_rank": 416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "∗",
            "importance_rank": 418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "∗",
            "importance_rank": 421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "∗",
            "importance_rank": 424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−",
            "importance_rank": 425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "}",
            "importance_rank": 426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": ">",
            "importance_rank": 427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "−−",
            "importance_rank": 428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "{",
            "importance_rank": 429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "∗",
            "importance_rank": 430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "}",
            "importance_rank": 431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "section_title": "⃝",
            "importance_rank": 437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "2.9",
            "importance_rank": 438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "Loop Pipelining",
            "importance_rank": 439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "⃝",
            "importance_rank": 440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "loop pipelining",
            "importance_rank": 441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "•",
            "importance_rank": 442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "•",
            "importance_rank": 443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "• ∗",
            "importance_rank": 444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "•",
            "importance_rank": 445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "iteration latency",
            "importance_rank": 446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "loop latency",
            "importance_rank": 447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": ">",
            "importance_rank": 448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "−−",
            "importance_rank": 449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "⃝",
            "importance_rank": 450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "section_title": "⃝",
            "importance_rank": 451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "+",
            "importance_rank": 453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "*",
            "importance_rank": 454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "+",
            "importance_rank": 455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "*",
            "importance_rank": 456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "+",
            "importance_rank": 457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "*",
            "importance_rank": 458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "+",
            "importance_rank": 459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "section_title": "*",
            "importance_rank": 460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "section_title": "⃝",
            "importance_rank": 467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 46,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "2.10",
            "importance_rank": 474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "Bitwidth Optimization",
            "importance_rank": 475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "⃝",
            "importance_rank": 477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "∗",
            "importance_rank": 478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "section_title": "∗",
            "importance_rank": 479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "⃝",
            "importance_rank": 480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "arbitrary precision data types",
            "importance_rank": 481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "•",
            "importance_rank": 482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "•",
            "importance_rank": 485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "{",
            "importance_rank": 496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "−",
            "importance_rank": 497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "−",
            "importance_rank": 498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "}",
            "importance_rank": 499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "⌈",
            "importance_rank": 500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "⌉",
            "importance_rank": 501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "<",
            "importance_rank": 506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": ">",
            "importance_rank": 507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "section_title": "⃝",
            "importance_rank": 508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "a",
            "importance_rank": 514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "z",
            "importance_rank": 523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "x, y",
            "importance_rank": 524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "z",
            "importance_rank": 525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "x",
            "importance_rank": 526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "y",
            "importance_rank": 527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "<",
            "importance_rank": 532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ">",
            "importance_rank": 533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "∗",
            "importance_rank": 534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "z",
            "importance_rank": 535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "x",
            "importance_rank": 536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "y",
            "importance_rank": 537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "2.11",
            "importance_rank": 538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Complex FIR Filter",
            "importance_rank": 539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ", Q",
            "importance_rank": 542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": ", Q",
            "importance_rank": 546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "jQ",
            "importance_rank": 550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "jQ",
            "importance_rank": 554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "−",
            "importance_rank": 560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "j",
            "importance_rank": 565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "I",
            "importance_rank": 576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "−",
            "importance_rank": 578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "in",
            "importance_rank": 580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "Q",
            "importance_rank": 581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "section_title": "fir",
            "importance_rank": 582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "FIR I1",
            "importance_rank": 584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "FIR Q1",
            "importance_rank": 587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "FIR I2",
            "importance_rank": 588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "FIR Q2",
            "importance_rank": 589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "-",
            "importance_rank": 598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "+",
            "importance_rank": 599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "I",
            "importance_rank": 600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Q",
            "importance_rank": 601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "section_title": "Complex FIR Filter",
            "importance_rank": 602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "{",
            "importance_rank": 610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "−",
            "importance_rank": 613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "}",
            "importance_rank": 614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "⃝",
            "importance_rank": 615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "Q",
            "importance_rank": 616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "in",
            "importance_rank": 617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "I",
            "importance_rank": 618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "fir",
            "importance_rank": 619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "I",
            "importance_rank": 620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "in",
            "importance_rank": 621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "Q",
            "importance_rank": 622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "fir",
            "importance_rank": 623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "I",
            "importance_rank": 624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "in",
            "importance_rank": 625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": ", Q",
            "importance_rank": 626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "in",
            "importance_rank": 627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "I",
            "importance_rank": 628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "out",
            "importance_rank": 629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": ", Q",
            "importance_rank": 630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "out",
            "importance_rank": 631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "I",
            "importance_rank": 632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "out",
            "importance_rank": 633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": ", Q",
            "importance_rank": 634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "out",
            "importance_rank": 635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "⃝",
            "importance_rank": 636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "∗",
            "importance_rank": 637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "⃝",
            "importance_rank": 638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "section_title": "⃝",
            "importance_rank": 639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "{",
            "importance_rank": 641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "∗",
            "importance_rank": 642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "}",
            "importance_rank": 643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "{",
            "importance_rank": 644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "}",
            "importance_rank": 645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "{",
            "importance_rank": 646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "∗",
            "importance_rank": 647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "∗",
            "importance_rank": 648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "∗",
            "importance_rank": 649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "∗",
            "importance_rank": 650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "}",
            "importance_rank": 651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "⃝",
            "importance_rank": 652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "⃝",
            "importance_rank": 653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "2.12",
            "importance_rank": 654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "Conclusion",
            "importance_rank": 655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "⃝",
            "importance_rank": 656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "section_title": "⃝",
            "importance_rank": 657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 54,
            "section_title": "FINITE IMPULSE RESPONSE (FIR) FILTERS",
            "importance_rank": 658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "section_title": "Chapter 3",
            "importance_rank": 659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "section_title": "CORDIC",
            "importance_rank": 660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "section_title": "3.1",
            "importance_rank": 661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "CORDIC",
            "importance_rank": 662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "◦",
            "importance_rank": 665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "x",
            "importance_rank": 667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "y",
            "importance_rank": 668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "3.2",
            "importance_rank": 670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "Background",
            "importance_rank": 671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "θ",
            "importance_rank": 672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "θ",
            "importance_rank": 673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "φ",
            "importance_rank": 675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "section_title": "◦",
            "importance_rank": 676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "CORDIC",
            "importance_rank": 677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "φ",
            "importance_rank": 678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "φ",
            "importance_rank": 679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "φ",
            "importance_rank": 680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "φ",
            "importance_rank": 684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "φ",
            "importance_rank": 686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "R",
            "importance_rank": 687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "v",
            "importance_rank": 694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "v",
            "importance_rank": 695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "R",
            "importance_rank": 697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "·",
            "importance_rank": 699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "v",
            "importance_rank": 700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "θ",
            "importance_rank": 738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "R",
            "importance_rank": 740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "·",
            "importance_rank": 762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "·",
            "importance_rank": 767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "◦",
            "importance_rank": 781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "·",
            "importance_rank": 785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "y",
            "importance_rank": 786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "·",
            "importance_rank": 789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "x",
            "importance_rank": 790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "i",
            "importance_rank": 791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "section_title": "−",
            "importance_rank": 792
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "CORDIC",
            "importance_rank": 793
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 794
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 795
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 796
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 797
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 798
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 799
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 800
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 801
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 802
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 803
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 804
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 805
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "R",
            "importance_rank": 806
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 807
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 808
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 809
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 810
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 811
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 812
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 813
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 814
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "R",
            "importance_rank": 815
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 816
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 817
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 818
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 819
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 820
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 821
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 822
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 823
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 824
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 825
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 826
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 827
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 828
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 829
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 830
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 831
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 832
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 833
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 834
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 835
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 836
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 837
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 838
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 839
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 840
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 841
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 842
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 843
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 844
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "·",
            "importance_rank": 845
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 846
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 847
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 848
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 849
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 850
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 851
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "·",
            "importance_rank": 852
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 853
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 854
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 855
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 856
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 857
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 858
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 859
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 860
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 861
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 862
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 863
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 864
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 865
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 866
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 867
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "·",
            "importance_rank": 868
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 869
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 870
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 871
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "i",
            "importance_rank": 872
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 873
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "·",
            "importance_rank": 874
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 875
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 876
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 877
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 878
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 879
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 880
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 881
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 882
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 883
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 884
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 885
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 886
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 887
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 888
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 889
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 890
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 891
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 892
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 893
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 894
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 895
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 896
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "x",
            "importance_rank": 897
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "√",
            "importance_rank": 898
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "/",
            "importance_rank": 899
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "y",
            "importance_rank": 900
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 901
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 902
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 903
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 904
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "−",
            "importance_rank": 905
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 906
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 907
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "±",
            "importance_rank": 908
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "section_title": "◦",
            "importance_rank": 909
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "CORDIC",
            "importance_rank": 910
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "R",
            "importance_rank": 911
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 912
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 913
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 914
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 915
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 916
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 917
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 918
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 919
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 920
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 921
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 922
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 923
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 924
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 925
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 926
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 927
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 928
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 929
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 930
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 931
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 932
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 933
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 934
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 935
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 936
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 937
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "◦",
            "importance_rank": 938
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "◦",
            "importance_rank": 939
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "√",
            "importance_rank": 940
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "·",
            "importance_rank": 941
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 942
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 943
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "·",
            "importance_rank": 944
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "◦",
            "importance_rank": 945
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "√",
            "importance_rank": 946
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "R",
            "importance_rank": 947
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 948
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 949
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 950
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 951
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 952
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 953
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 954
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 955
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 956
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 957
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 958
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 959
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 960
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 961
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 962
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 963
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 964
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 965
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 966
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 967
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 968
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "R",
            "importance_rank": 969
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 970
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 971
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 972
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 973
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 974
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 975
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 976
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 977
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 978
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 979
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "θ",
            "importance_rank": 980
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 981
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 982
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 983
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "v",
            "importance_rank": 984
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 985
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "K",
            "importance_rank": 986
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 987
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 988
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 989
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 990
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 991
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 992
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "x",
            "importance_rank": 993
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 994
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 995
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "y",
            "importance_rank": 996
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "i",
            "importance_rank": 997
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "section_title": "−",
            "importance_rank": 998
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "CORDIC",
            "importance_rank": 999
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1000
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1001
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "√",
            "importance_rank": 1002
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1003
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1004
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1005
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1006
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1007
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1008
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1009
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1010
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1011
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1012
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "±",
            "importance_rank": 1013
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1014
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "σ",
            "importance_rank": 1015
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1016
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "σ",
            "importance_rank": 1017
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1018
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "v",
            "importance_rank": 1019
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1020
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1021
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1022
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1023
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "σ",
            "importance_rank": 1024
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1025
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1026
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1027
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "σ",
            "importance_rank": 1028
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1029
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1030
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1031
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "x",
            "importance_rank": 1032
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1033
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1034
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "y",
            "importance_rank": 1035
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1036
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1037
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1038
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1039
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1040
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1041
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1042
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1043
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1044
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1045
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1046
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1047
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1048
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1049
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1050
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1051
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "√",
            "importance_rank": 1052
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1053
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1054
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1055
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1056
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "→∞",
            "importance_rank": 1057
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1058
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1059
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "≈",
            "importance_rank": 1060
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1061
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "v",
            "importance_rank": 1062
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "A",
            "importance_rank": 1063
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "K",
            "importance_rank": 1064
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1065
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "→∞",
            "importance_rank": 1066
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "n",
            "importance_rank": 1067
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1068
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1069
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1070
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1071
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "≈",
            "importance_rank": 1072
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1073
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1074
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1075
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1076
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1077
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1078
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1079
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1080
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "σ",
            "importance_rank": 1081
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1082
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "φ",
            "importance_rank": 1083
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "φ",
            "importance_rank": 1084
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "φ",
            "importance_rank": 1085
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "φ",
            "importance_rank": 1086
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "φ",
            "importance_rank": 1087
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1088
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "◦",
            "importance_rank": 1089
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1090
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1091
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1092
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "θ",
            "importance_rank": 1093
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "−",
            "importance_rank": 1094
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1095
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "◦",
            "importance_rank": 1096
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1097
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1098
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1099
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "·",
            "importance_rank": 1100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "i",
            "importance_rank": 1102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": "≈",
            "importance_rank": 1103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "section_title": ".",
            "importance_rank": 1104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "CORDIC",
            "importance_rank": 1105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "−",
            "importance_rank": 1109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "3.3",
            "importance_rank": 1125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "Calculating Sine and Cosine",
            "importance_rank": 1126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "x",
            "importance_rank": 1128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "x",
            "importance_rank": 1131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "y",
            "importance_rank": 1132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "φ",
            "importance_rank": 1137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "x",
            "importance_rank": 1141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "×",
            "importance_rank": 1154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "◦",
            "importance_rank": 1160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": ".",
            "importance_rank": 1161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "i",
            "importance_rank": 1162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "x",
            "importance_rank": 1163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "section_title": "y",
            "importance_rank": 1164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "CORDIC",
            "importance_rank": 1165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "◦",
            "importance_rank": 1166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "◦",
            "importance_rank": 1167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "i",
            "importance_rank": 1168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": ".",
            "importance_rank": 1169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "◦",
            "importance_rank": 1170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "x",
            "importance_rank": 1171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "y",
            "importance_rank": 1172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "A",
            "importance_rank": 1173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "R",
            "importance_rank": 1174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "◦",
            "importance_rank": 1175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "A",
            "importance_rank": 1176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "R",
            "importance_rank": 1177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "◦",
            "importance_rank": 1178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "A",
            "importance_rank": 1179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "R",
            "importance_rank": 1180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "A",
            "importance_rank": 1181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "R",
            "importance_rank": 1182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": ".",
            "importance_rank": 1183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "−",
            "importance_rank": 1184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": ".",
            "importance_rank": 1185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": "i",
            "importance_rank": 1186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": ".",
            "importance_rank": 1187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "section_title": ",",
            "importance_rank": 1188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "CORDIC",
            "importance_rank": 1189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// The ﬁle cordic.h holds deﬁnitions for the data types and constant values",
            "importance_rank": 1190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// The cordic phase array holds the angle for the current rotation",
            "importance_rank": 1191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "{",
            "importance_rank": 1192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "}",
            "importance_rank": 1193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "{",
            "importance_rank": 1194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Set the initial vector that we will rotate",
            "importance_rank": 1195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// current cos = I; current sin = Q",
            "importance_rank": 1196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Factor is the 2ˆ(",
            "importance_rank": 1197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "−",
            "importance_rank": 1198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "L) value",
            "importance_rank": 1199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// This loop iteratively rotates the initial vector to ﬁnd the",
            "importance_rank": 1200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// sine and cosine values corresponding to the input theta angle",
            "importance_rank": 1201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "<",
            "importance_rank": 1202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "{",
            "importance_rank": 1203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Determine if we are rotating by a positive or negative angle",
            "importance_rank": 1204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "<",
            "importance_rank": 1205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "−",
            "importance_rank": 1206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Save the current cos, so that it can be used in the sine calculation",
            "importance_rank": 1207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Perform the rotation",
            "importance_rank": 1208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "−",
            "importance_rank": 1209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "∗",
            "importance_rank": 1210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "∗",
            "importance_rank": 1211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "∗",
            "importance_rank": 1212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "∗",
            "importance_rank": 1213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Determine the new theta",
            "importance_rank": 1214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "−",
            "importance_rank": 1215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "∗",
            "importance_rank": 1216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Calculate next 2ˆ(",
            "importance_rank": 1217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "−",
            "importance_rank": 1218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "L) value",
            "importance_rank": 1219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": ">>",
            "importance_rank": 1220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "}",
            "importance_rank": 1221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "// Set the ﬁnal sine and cosine values",
            "importance_rank": 1222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "section_title": "}",
            "importance_rank": 1223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "CORDIC",
            "importance_rank": 1224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "r",
            "importance_rank": 1225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "x, y",
            "importance_rank": 1226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "r, θ",
            "importance_rank": 1227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "3.4",
            "importance_rank": 1228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "Cartesian to Polar Conversion",
            "importance_rank": 1229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "v",
            "importance_rank": 1230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "x, y",
            "importance_rank": 1231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "r, θ",
            "importance_rank": 1232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "r",
            "importance_rank": 1233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "section_title": "θ",
            "importance_rank": 1234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "CORDIC",
            "importance_rank": 1235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "r",
            "importance_rank": 1237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "θ",
            "importance_rank": 1238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "r",
            "importance_rank": 1240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "θ",
            "importance_rank": 1241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "r",
            "importance_rank": 1242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "θ",
            "importance_rank": 1245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y, x",
            "importance_rank": 1246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y, x",
            "importance_rank": 1247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x >",
            "importance_rank": 1250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "π",
            "importance_rank": 1253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x <",
            "importance_rank": 1254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "≥",
            "importance_rank": 1256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "−",
            "importance_rank": 1259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "π",
            "importance_rank": 1260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x <",
            "importance_rank": 1261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y <",
            "importance_rank": 1262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "π",
            "importance_rank": 1263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y >",
            "importance_rank": 1265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "−",
            "importance_rank": 1266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "π",
            "importance_rank": 1267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y <",
            "importance_rank": 1269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x, y",
            "importance_rank": 1272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "i",
            "importance_rank": 1275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": ",",
            "importance_rank": 1276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": ",",
            "importance_rank": 1277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": ",",
            "importance_rank": 1278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": ", . . .",
            "importance_rank": 1279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "i",
            "importance_rank": 1280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "±",
            "importance_rank": 1284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "−",
            "importance_rank": 1288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "±",
            "importance_rank": 1293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "x",
            "importance_rank": 1295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "y",
            "importance_rank": 1296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "±",
            "importance_rank": 1297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "section_title": "◦",
            "importance_rank": 1298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "CORDIC",
            "importance_rank": 1299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "±",
            "importance_rank": 1300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "◦",
            "importance_rank": 1301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "◦",
            "importance_rank": 1302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "x",
            "importance_rank": 1303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "y",
            "importance_rank": 1304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "−",
            "importance_rank": 1305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "◦",
            "importance_rank": 1306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "y",
            "importance_rank": 1307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "section_title": "◦",
            "importance_rank": 1308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "CORDIC",
            "importance_rank": 1309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "/",
            "importance_rank": 1310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": ".",
            "importance_rank": 1311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": ".",
            "importance_rank": 1312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "3.5",
            "importance_rank": 1313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "Number Representation",
            "importance_rank": 1314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "⃝",
            "importance_rank": 1315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "⃝",
            "importance_rank": 1316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "binary representation",
            "importance_rank": 1317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "⃝",
            "importance_rank": 1318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "∗",
            "importance_rank": 1319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "∗",
            "importance_rank": 1320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "∗",
            "importance_rank": 1321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "section_title": "∗",
            "importance_rank": 1322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "CORDIC",
            "importance_rank": 1323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "∗",
            "importance_rank": 1324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "∗",
            "importance_rank": 1325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "∗",
            "importance_rank": 1326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "∗",
            "importance_rank": 1327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "most signiﬁcant bit",
            "importance_rank": 1328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "least signiﬁcant bit",
            "importance_rank": 1329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "ﬁxed-point",
            "importance_rank": 1330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": ".",
            "importance_rank": 1333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "// Initialize p1 to ”11.25”",
            "importance_rank": 1334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "// Initialize p2 to ”11.25”",
            "importance_rank": 1336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "zero-extension",
            "importance_rank": 1337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "−",
            "importance_rank": 1341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "<>",
            "importance_rank": 1342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "<>",
            "importance_rank": 1343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "<>",
            "importance_rank": 1344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "section_title": "<>",
            "importance_rank": 1345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "CORDIC",
            "importance_rank": 1346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "⃝",
            "importance_rank": 1349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "<>",
            "importance_rank": 1353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "signed-magnitude",
            "importance_rank": 1354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "biased",
            "importance_rank": 1359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "−",
            "importance_rank": 1363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "two’s complement",
            "importance_rank": 1364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "section_title": "also",
            "importance_rank": 1365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "CORDIC",
            "importance_rank": 1366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "sign-extension",
            "importance_rank": 1377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "x",
            "importance_rank": 1378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "x",
            "importance_rank": 1380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "x",
            "importance_rank": 1382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "x",
            "importance_rank": 1384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "Overﬂow",
            "importance_rank": 1385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "underﬂow",
            "importance_rank": 1386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "wrapping",
            "importance_rank": 1387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": "−",
            "importance_rank": 1391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": ".",
            "importance_rank": 1392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": ".",
            "importance_rank": 1393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": ".",
            "importance_rank": 1394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "section_title": ".",
            "importance_rank": 1395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "CORDIC",
            "importance_rank": 1396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding",
            "importance_rank": 1410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding down",
            "importance_rank": 1411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding to negative inﬁnity",
            "importance_rank": 1412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "→",
            "importance_rank": 1428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "→",
            "importance_rank": 1429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding up",
            "importance_rank": 1445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding to positive inﬁnity",
            "importance_rank": 1446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding to zero",
            "importance_rank": 1447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding away from zero",
            "importance_rank": 1448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding to",
            "importance_rank": 1449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "inﬁnity",
            "importance_rank": 1450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "rounding to nearest even",
            "importance_rank": 1451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "convergent rounding",
            "importance_rank": 1452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "banker’s rounding",
            "importance_rank": 1453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "even",
            "importance_rank": 1454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "→",
            "importance_rank": 1470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "→",
            "importance_rank": 1471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": "−",
            "importance_rank": 1485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "section_title": ".",
            "importance_rank": 1486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "section_title": "CORDIC",
            "importance_rank": 1487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "section_title": "−",
            "importance_rank": 1488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "section_title": ".",
            "importance_rank": 1489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "section_title": ".",
            "importance_rank": 1490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "section_title": "−",
            "importance_rank": 1491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "CORDIC",
            "importance_rank": 1492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "// Danger! p depends on sizeof(int)",
            "importance_rank": 1493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "∗",
            "importance_rank": 1494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "// 4.0 represented with 12 fractional bits",
            "importance_rank": 1495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "// 4.0 represented with 12 fractional bits.",
            "importance_rank": 1496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "// Danger! p depends on sizeof(int)",
            "importance_rank": 1497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "∗",
            "importance_rank": 1498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": ">>",
            "importance_rank": 1499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "// p is assigned to 0x10000000",
            "importance_rank": 1500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "section_title": "∗",
            "importance_rank": 1501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "CORDIC",
            "importance_rank": 1502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// 4.0 represented with 12 fractional bits.",
            "importance_rank": 1503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// 4.0 represented with 12 fractional bits.",
            "importance_rank": 1504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// p assigned to 16.0 represented with 12 fractional bits",
            "importance_rank": 1505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "∗",
            "importance_rank": 1506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">>",
            "importance_rank": 1507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "−",
            "importance_rank": 1508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ",",
            "importance_rank": 1509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "⃝",
            "importance_rank": 1510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// p is assigned to 0x10000000.",
            "importance_rank": 1521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "∗",
            "importance_rank": 1524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// 4.0 represented with 12 fractional bits.",
            "importance_rank": 1527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// 4.0 represented with 12 fractional bits.",
            "importance_rank": 1530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "// p is assigned to 16.0 represented with 12 fractional bits",
            "importance_rank": 1533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "∗",
            "importance_rank": 1536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<>",
            "importance_rank": 1538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "−",
            "importance_rank": 1540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": "<",
            "importance_rank": 1542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "section_title": ">",
            "importance_rank": 1543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "section_title": "CORDIC",
            "importance_rank": 1544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "section_title": "3.6",
            "importance_rank": 1545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "section_title": "Further Optimizations",
            "importance_rank": 1546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "section_title": "for",
            "importance_rank": 1547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "CORDIC",
            "importance_rank": 1548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "sigma",
            "importance_rank": 1549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "±",
            "importance_rank": 1550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "◦",
            "importance_rank": 1551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "±",
            "importance_rank": 1552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "◦",
            "importance_rank": 1553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "3.7",
            "importance_rank": 1554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "section_title": "⃝",
            "importance_rank": 1555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "Chapter 4",
            "importance_rank": 1556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "Discrete Fourier Transform",
            "importance_rank": 1557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "⃝",
            "importance_rank": 1558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "4.1",
            "importance_rank": 1559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "Fourier Series",
            "importance_rank": 1560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "Fourier series",
            "importance_rank": 1561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "−",
            "importance_rank": 1562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "π",
            "importance_rank": 1563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "π",
            "importance_rank": 1564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "π",
            "importance_rank": 1565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "π",
            "importance_rank": 1566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "f",
            "importance_rank": 1567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "∼",
            "importance_rank": 1569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ". . .",
            "importance_rank": 1577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "b",
            "importance_rank": 1578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "b",
            "importance_rank": 1580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "b",
            "importance_rank": 1582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "t",
            "importance_rank": 1583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ". . .",
            "importance_rank": 1584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "∼",
            "importance_rank": 1585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "∞",
            "importance_rank": 1587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "n",
            "importance_rank": 1588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "n",
            "importance_rank": 1590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "nt",
            "importance_rank": 1591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "b",
            "importance_rank": 1592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "n",
            "importance_rank": 1593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "nt",
            "importance_rank": 1594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "a",
            "importance_rank": 1595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ", a",
            "importance_rank": 1596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ", . . .",
            "importance_rank": 1597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": "b",
            "importance_rank": 1598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ", b",
            "importance_rank": 1599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "section_title": ", . . .",
            "importance_rank": 1600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 1601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nt",
            "importance_rank": 1618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "b",
            "importance_rank": 1620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nt",
            "importance_rank": 1628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ", a",
            "importance_rank": 1631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ", a",
            "importance_rank": 1632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ", . . . , b",
            "importance_rank": 1633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ", b",
            "importance_rank": 1634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ", . . .",
            "importance_rank": 1635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "direct current (DC)",
            "importance_rank": 1637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "≥",
            "importance_rank": 1640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "·",
            "importance_rank": 1644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "b",
            "importance_rank": 1647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "·",
            "importance_rank": 1648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "∼",
            "importance_rank": 1652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L, L",
            "importance_rank": 1655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π, π",
            "importance_rank": 1657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "≡",
            "importance_rank": 1659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "πt",
            "importance_rank": 1660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π, π",
            "importance_rank": 1669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L, L",
            "importance_rank": 1671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "Lt",
            "importance_rank": 1676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "∞",
            "importance_rank": 1682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nπt",
            "importance_rank": 1686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "b",
            "importance_rank": 1689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nπt",
            "importance_rank": 1691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "b",
            "importance_rank": 1695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "a",
            "importance_rank": 1706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nπt",
            "importance_rank": 1715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "b",
            "importance_rank": 1720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nπt",
            "importance_rank": 1729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "L",
            "importance_rank": 1731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "′",
            "importance_rank": 1733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "e",
            "importance_rank": 1734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "jnt",
            "importance_rank": 1735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nt",
            "importance_rank": 1736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "j",
            "importance_rank": 1737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "nt",
            "importance_rank": 1738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "∞",
            "importance_rank": 1741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−∞",
            "importance_rank": 1743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "c",
            "importance_rank": 1744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "e",
            "importance_rank": 1746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "jnt",
            "importance_rank": 1747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": ".",
            "importance_rank": 1748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "c",
            "importance_rank": 1749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "c",
            "importance_rank": 1751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "n",
            "importance_rank": 1752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "e",
            "importance_rank": 1759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "−",
            "importance_rank": 1760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "jnt",
            "importance_rank": 1761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "f",
            "importance_rank": 1763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "t",
            "importance_rank": 1764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "section_title": "π",
            "importance_rank": 1765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 1766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "b",
            "importance_rank": 1769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": ",",
            "importance_rank": 1781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": ",",
            "importance_rank": 1782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": ", . . .",
            "importance_rank": 1783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "b",
            "importance_rank": 1784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "j",
            "importance_rank": 1786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1792
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1793
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": ",",
            "importance_rank": 1794
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": ", . . .",
            "importance_rank": 1795
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1796
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1797
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1798
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1799
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1800
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jb",
            "importance_rank": 1801
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1802
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n >",
            "importance_rank": 1803
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1804
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1805
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1806
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1807
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1808
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jb",
            "importance_rank": 1809
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1810
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1811
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n <",
            "importance_rank": 1812
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "a",
            "importance_rank": 1813
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1814
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "b",
            "importance_rank": 1815
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1816
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "c",
            "importance_rank": 1817
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "n",
            "importance_rank": 1818
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1819
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "{",
            "importance_rank": 1820
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1821
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1822
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "}",
            "importance_rank": 1823
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1824
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1825
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1826
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1827
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1828
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "j",
            "importance_rank": 1829
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1830
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "{",
            "importance_rank": 1831
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1832
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1833
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "}",
            "importance_rank": 1834
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1835
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1836
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1837
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1838
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1839
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1840
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "j",
            "importance_rank": 1841
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1842
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1843
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1844
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1845
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1846
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1847
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1848
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1849
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1850
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1851
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "e",
            "importance_rank": 1852
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "−",
            "importance_rank": 1853
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "jx",
            "importance_rank": 1854
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1855
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "j",
            "importance_rank": 1856
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "x",
            "importance_rank": 1857
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "4.2",
            "importance_rank": 1858
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "DFT Background",
            "importance_rank": 1859
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "discrete",
            "importance_rank": 1860
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "section_title": "fundamental frequency",
            "importance_rank": 1861
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 1862
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "e",
            "importance_rank": 1863
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "jx",
            "importance_rank": 1864
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "e",
            "importance_rank": 1865
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "−",
            "importance_rank": 1866
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "jx",
            "importance_rank": 1867
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "x",
            "importance_rank": 1868
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "e",
            "importance_rank": 1869
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "jx",
            "importance_rank": 1870
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "−",
            "importance_rank": 1871
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "e",
            "importance_rank": 1872
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "−",
            "importance_rank": 1873
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "jx",
            "importance_rank": 1874
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "x",
            "importance_rank": 1875
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "f",
            "importance_rank": 1876
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "F",
            "importance_rank": 1877
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "g",
            "importance_rank": 1878
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "G",
            "importance_rank": 1879
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "g",
            "importance_rank": 1880
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1881
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1882
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "−",
            "importance_rank": 1883
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N/",
            "importance_rank": 1884
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N/",
            "importance_rank": 1885
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "G",
            "importance_rank": 1886
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N/",
            "importance_rank": 1887
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1888
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1889
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1890
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "×",
            "importance_rank": 1891
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1892
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "section_title": "N",
            "importance_rank": 1893
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 1894
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "g",
            "importance_rank": 1895
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1896
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N/",
            "importance_rank": 1897
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "G",
            "importance_rank": 1898
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1899
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "·",
            "importance_rank": 1900
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "g",
            "importance_rank": 1901
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1902
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "· · ·",
            "importance_rank": 1903
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1904
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1905
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "· · ·",
            "importance_rank": 1906
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1907
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1908
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1909
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1910
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1911
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "· · ·",
            "importance_rank": 1912
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1913
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1914
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1915
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1916
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1917
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "· · ·",
            "importance_rank": 1918
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1919
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1920
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1921
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1922
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1923
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1924
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1925
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1926
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1927
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "· · ·",
            "importance_rank": 1928
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1929
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1930
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1931
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1932
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1933
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1934
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "e",
            "importance_rank": 1935
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1936
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1937
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "π",
            "importance_rank": 1938
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1939
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "G",
            "importance_rank": 1940
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "k",
            "importance_rank": 1941
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1942
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1943
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "n",
            "importance_rank": 1944
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "g",
            "importance_rank": 1945
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "n",
            "importance_rank": 1946
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1947
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "kn",
            "importance_rank": 1948
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "k",
            "importance_rank": 1949
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": ", . . . , N",
            "importance_rank": 1950
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "−",
            "importance_rank": 1951
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1952
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1953
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1954
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "g",
            "importance_rank": 1955
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "◦",
            "importance_rank": 1956
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "◦",
            "importance_rank": 1957
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "◦",
            "importance_rank": 1958
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1959
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1960
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "i",
            "importance_rank": 1961
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1962
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1963
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1964
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "i",
            "importance_rank": 1965
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1966
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "i",
            "importance_rank": 1967
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1968
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1969
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "i",
            "importance_rank": 1970
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "∗",
            "importance_rank": 1971
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1972
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1973
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "s",
            "importance_rank": 1974
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "i",
            "importance_rank": 1975
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1976
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1977
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1978
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1979
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1980
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "∗",
            "importance_rank": 1981
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1982
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1983
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1984
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1985
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "∗",
            "importance_rank": 1986
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1987
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1988
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "S",
            "importance_rank": 1989
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "j",
            "importance_rank": 1990
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "∗",
            "importance_rank": 1991
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1992
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N/",
            "importance_rank": 1993
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N/",
            "importance_rank": 1994
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "section_title": "N",
            "importance_rank": 1995
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 1996
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[0]",
            "importance_rank": 1997
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[1]",
            "importance_rank": 1998
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[2]",
            "importance_rank": 1999
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[6]",
            "importance_rank": 2000
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[3]",
            "importance_rank": 2001
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[4]",
            "importance_rank": 2002
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[5]",
            "importance_rank": 2003
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "G[7]",
            "importance_rank": 2004
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "=",
            "importance_rank": 2005
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[0]",
            "importance_rank": 2006
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[1]",
            "importance_rank": 2007
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[2]",
            "importance_rank": 2008
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[6]",
            "importance_rank": 2009
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[3]",
            "importance_rank": 2010
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[4]",
            "importance_rank": 2011
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[5]",
            "importance_rank": 2012
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "g[7]",
            "importance_rank": 2013
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "S",
            "importance_rank": 2014
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "{",
            "importance_rank": 2015
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "<",
            "importance_rank": 2016
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "{",
            "importance_rank": 2017
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "<",
            "importance_rank": 2018
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "{",
            "importance_rank": 2019
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "∗",
            "importance_rank": 2020
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "}",
            "importance_rank": 2021
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "}",
            "importance_rank": 2022
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "}",
            "importance_rank": 2023
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "4.3",
            "importance_rank": 2024
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "section_title": "Matrix-Vector Multiplication Optimizations",
            "importance_rank": 2025
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2026
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "−",
            "importance_rank": 2027
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "4.4",
            "importance_rank": 2028
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "section_title": "∗",
            "importance_rank": 2029
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2030
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "{",
            "importance_rank": 2031
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "<",
            "importance_rank": 2032
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "{",
            "importance_rank": 2033
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2034
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2035
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2036
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2037
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2038
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2039
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2040
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2041
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "}",
            "importance_rank": 2042
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "}",
            "importance_rank": 2043
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "⃝",
            "importance_rank": 2044
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2045
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "section_title": "∗",
            "importance_rank": 2046
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 85,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2047
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2048
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "section_title": "⃝",
            "importance_rank": 2049
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "section_title": "⃝",
            "importance_rank": 2050
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "section_title": "⃝",
            "importance_rank": 2051
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2052
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "section_title": "⃝",
            "importance_rank": 2053
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "section_title": "4.5",
            "importance_rank": 2054
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "section_title": "⃝",
            "importance_rank": 2055
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "section_title": "⃝",
            "importance_rank": 2056
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "section_title": "⃝",
            "importance_rank": 2057
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2058
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "{",
            "importance_rank": 2059
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "<",
            "importance_rank": 2060
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "{",
            "importance_rank": 2061
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "<",
            "importance_rank": 2062
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "{",
            "importance_rank": 2063
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "∗",
            "importance_rank": 2064
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "}",
            "importance_rank": 2065
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "}",
            "importance_rank": 2066
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "section_title": "}",
            "importance_rank": 2067
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2068
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "{",
            "importance_rank": 2069
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "<",
            "importance_rank": 2070
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "{",
            "importance_rank": 2071
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "<",
            "importance_rank": 2072
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "{",
            "importance_rank": 2073
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "∗",
            "importance_rank": 2074
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "∗",
            "importance_rank": 2075
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "}",
            "importance_rank": 2076
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "section_title": "}",
            "importance_rank": 2077
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "4.6",
            "importance_rank": 2078
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "Baseline Implementation",
            "importance_rank": 2079
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2080
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2081
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2082
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2083
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "N",
            "importance_rank": 2084
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2085
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "N",
            "importance_rank": 2086
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "S",
            "importance_rank": 2087
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "N",
            "importance_rank": 2088
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "N",
            "importance_rank": 2089
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "section_title": "⃝",
            "importance_rank": 2090
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2091
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "<",
            "importance_rank": 2092
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": ">",
            "importance_rank": 2093
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "//Required for cos and sin functions",
            "importance_rank": 2094
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Data type for the input signal",
            "importance_rank": 2095
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Data type for the temporary variables",
            "importance_rank": 2096
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// DFT Size",
            "importance_rank": 2097
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "{",
            "importance_rank": 2098
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Temporary arrays to hold the intermediate frequency domain results",
            "importance_rank": 2099
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Calculate each frequency domain sample iteratively",
            "importance_rank": 2100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "<",
            "importance_rank": 2101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "{",
            "importance_rank": 2102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// (2",
            "importance_rank": 2103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "pi",
            "importance_rank": 2105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "i)/N",
            "importance_rank": 2107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Calculate the jth frequency sample sequentially",
            "importance_rank": 2110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "<",
            "importance_rank": 2111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "{",
            "importance_rank": 2112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Utilize HLS tool to calculate sine and cosine values",
            "importance_rank": 2113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Multiply the current phasor with the appropriate input sample and keep",
            "importance_rank": 2116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// running sum",
            "importance_rank": 2117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "−",
            "importance_rank": 2119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "∗",
            "importance_rank": 2122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "}",
            "importance_rank": 2123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "}",
            "importance_rank": 2124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "// Perform an inplace DFT, i.e., copy result into the input arrays",
            "importance_rank": 2125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "<",
            "importance_rank": 2126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "{",
            "importance_rank": 2127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "}",
            "importance_rank": 2128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "section_title": "}",
            "importance_rank": 2129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "4.7",
            "importance_rank": 2130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "double",
            "importance_rank": 2131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "float",
            "importance_rank": 2132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "double",
            "importance_rank": 2133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "section_title": "S",
            "importance_rank": 2134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "/",
            "importance_rank": 2142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "◦",
            "importance_rank": 2143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "×",
            "importance_rank": 2144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "N",
            "importance_rank": 2145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "O",
            "importance_rank": 2146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "N",
            "importance_rank": 2147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "O",
            "importance_rank": 2148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "N",
            "importance_rank": 2149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "×",
            "importance_rank": 2150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "′",
            "importance_rank": 2154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "′",
            "importance_rank": 2156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "·",
            "importance_rank": 2158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "s",
            "importance_rank": 2159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "s",
            "importance_rank": 2160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "· · ·",
            "importance_rank": 2161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "s",
            "importance_rank": 2162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "N",
            "importance_rank": 2163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "−",
            "importance_rank": 2164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "′",
            "importance_rank": 2166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "i",
            "importance_rank": 2167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "j",
            "importance_rank": 2168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "i, j",
            "importance_rank": 2172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "′",
            "importance_rank": 2175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "S",
            "importance_rank": 2176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "section_title": "′",
            "importance_rank": 2177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "′",
            "importance_rank": 2181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "′",
            "importance_rank": 2183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "′",
            "importance_rank": 2186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "⃝",
            "importance_rank": 2187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "sin",
            "importance_rank": 2188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "cos",
            "importance_rank": 2189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "⃝",
            "importance_rank": 2190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "′",
            "importance_rank": 2192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "S",
            "importance_rank": 2193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "section_title": "4.8",
            "importance_rank": 2194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 98,
            "section_title": "DISCRETE FOURIER TRANSFORM",
            "importance_rank": 2195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "Chapter 5",
            "importance_rank": 2196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "Fast Fourier Transform",
            "importance_rank": 2197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "O",
            "importance_rank": 2198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "n",
            "importance_rank": 2199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "n",
            "importance_rank": 2200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "S",
            "importance_rank": 2201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "S",
            "importance_rank": 2202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "O",
            "importance_rank": 2203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "n",
            "importance_rank": 2204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "n",
            "importance_rank": 2205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "5.1",
            "importance_rank": 2206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "section_title": "Background",
            "importance_rank": 2207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 2208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "s",
            "importance_rank": 2236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "s",
            "importance_rank": 2237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "N",
            "importance_rank": 2242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "s",
            "importance_rank": 2243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "s",
            "importance_rank": 2245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "N",
            "importance_rank": 2247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "twiddle factors",
            "importance_rank": 2253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "G",
            "importance_rank": 2283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "g",
            "importance_rank": 2302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "j",
            "importance_rank": 2305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "π",
            "importance_rank": 2306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "·",
            "importance_rank": 2308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "e",
            "importance_rank": 2309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "jπ",
            "importance_rank": 2311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "−",
            "importance_rank": 2313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "×",
            "importance_rank": 2316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "S",
            "importance_rank": 2319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "section_title": "W",
            "importance_rank": 2335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 2336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g[0]",
            "importance_rank": 2337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g[1]",
            "importance_rank": 2338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "+",
            "importance_rank": 2339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "-",
            "importance_rank": 2340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G[0]",
            "importance_rank": 2341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G[1]",
            "importance_rank": 2342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g[0]",
            "importance_rank": 2343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g[1]",
            "importance_rank": 2344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G[0]",
            "importance_rank": 2345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G[1]",
            "importance_rank": 2346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "a)",
            "importance_rank": 2347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "b)",
            "importance_rank": 2348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "W",
            "importance_rank": 2369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "jπ",
            "importance_rank": 2478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "jπ",
            "importance_rank": 2487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "jπ",
            "importance_rank": 2506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "G",
            "importance_rank": 2509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "·",
            "importance_rank": 2556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "g",
            "importance_rank": 2566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "jπ",
            "importance_rank": 2573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "e",
            "importance_rank": 2575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "−",
            "importance_rank": 2576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "j",
            "importance_rank": 2577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "section_title": "π",
            "importance_rank": 2579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 2580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "·",
            "importance_rank": 2697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "W",
            "importance_rank": 2755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "i",
            "importance_rank": 2756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "i",
            "importance_rank": 2757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "i",
            "importance_rank": 2759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2792
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2793
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2794
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2795
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2796
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2797
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2798
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "G",
            "importance_rank": 2799
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2800
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2801
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2802
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2803
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2804
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2805
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2806
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2807
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2808
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2809
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "g",
            "importance_rank": 2810
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2811
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2812
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2813
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2814
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2815
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2816
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2817
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2818
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2819
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2820
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2821
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2822
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2823
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2824
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "e",
            "importance_rank": 2825
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "−",
            "importance_rank": 2826
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "j",
            "importance_rank": 2827
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "section_title": "π",
            "importance_rank": 2828
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 2829
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "O",
            "importance_rank": 2830
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2831
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "O",
            "importance_rank": 2832
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2833
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2834
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2835
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N >",
            "importance_rank": 2836
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2837
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "G",
            "importance_rank": 2838
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2839
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "G",
            "importance_rank": 2840
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "k",
            "importance_rank": 2841
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2842
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2843
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2844
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2845
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2846
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2847
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2848
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2849
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2850
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πkn",
            "importance_rank": 2851
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2852
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "k",
            "importance_rank": 2853
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": ", . . . , N",
            "importance_rank": 2854
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2855
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "G",
            "importance_rank": 2856
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "k",
            "importance_rank": 2857
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2858
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2859
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2860
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2861
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2862
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2863
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2864
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2865
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2866
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πk",
            "importance_rank": 2867
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2868
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2869
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2870
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2871
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2872
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2873
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2874
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2875
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2876
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2877
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2878
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πk",
            "importance_rank": 2879
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2880
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2881
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2882
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2883
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2884
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2885
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2886
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2887
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "G",
            "importance_rank": 2888
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "k",
            "importance_rank": 2889
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2890
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2891
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2892
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2893
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2894
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2895
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2896
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2897
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2898
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πkn",
            "importance_rank": 2899
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2900
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N/",
            "importance_rank": 2901
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2902
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2903
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "g",
            "importance_rank": 2904
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2905
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2906
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2907
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2908
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2909
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πk",
            "importance_rank": 2910
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "n",
            "importance_rank": 2911
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2912
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "·",
            "importance_rank": 2913
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "e",
            "importance_rank": 2914
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "−",
            "importance_rank": 2915
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "j",
            "importance_rank": 2916
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "πk",
            "importance_rank": 2917
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "section_title": "N",
            "importance_rank": 2918
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 2919
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2920
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2921
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2922
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2923
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2924
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 2925
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "g",
            "importance_rank": 2926
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 2927
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 2928
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 2929
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2930
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 2931
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 2932
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2933
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 2934
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2935
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 2936
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πk",
            "importance_rank": 2937
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 2938
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 2939
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2940
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2941
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 2942
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "g",
            "importance_rank": 2943
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 2944
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 2945
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 2946
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2947
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 2948
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 2949
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2950
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 2951
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 2952
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2953
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 2954
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 2955
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2956
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2957
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2958
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "A",
            "importance_rank": 2959
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2960
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "W",
            "importance_rank": 2961
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2962
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 2963
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "B",
            "importance_rank": 2964
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2965
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "A",
            "importance_rank": 2966
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2967
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "B",
            "importance_rank": 2968
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2969
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "W",
            "importance_rank": 2970
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 2971
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2972
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 2973
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 2974
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2975
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2976
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2977
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2978
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2979
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2980
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2981
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2982
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2983
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 2984
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2985
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2986
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2987
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2988
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 2989
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2990
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2991
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2992
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": ", N/",
            "importance_rank": 2993
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": ", . . . , N/",
            "importance_rank": 2994
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 2995
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 2996
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 2997
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 2998
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 2999
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3000
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3001
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "g",
            "importance_rank": 3002
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3003
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3004
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3005
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3006
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3007
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3008
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3009
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3010
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3011
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3012
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3013
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": ", . . . , N/",
            "importance_rank": 3014
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3015
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3016
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3017
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3018
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3019
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3020
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3021
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "G",
            "importance_rank": 3022
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3023
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3024
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3025
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3026
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3027
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "g",
            "importance_rank": 3028
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3029
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3030
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3031
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3032
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3033
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3034
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3035
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3036
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3037
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3038
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3039
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3040
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3041
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3042
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3043
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3044
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3045
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3046
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3047
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3048
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3049
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "g",
            "importance_rank": 3050
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3051
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3052
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3053
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3054
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3055
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3056
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3057
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3058
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3059
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3060
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3061
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3062
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3063
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3064
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3065
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3066
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3067
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3068
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3069
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3070
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3071
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 3072
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3073
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3074
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3075
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3076
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3077
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3078
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3079
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3080
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3081
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3082
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3083
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3084
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 3085
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3086
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3087
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3088
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3089
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3090
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πn",
            "importance_rank": 3091
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3092
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3093
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3094
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πkn",
            "importance_rank": 3095
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3096
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3097
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3098
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "n",
            "importance_rank": 3099
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πn",
            "importance_rank": 3103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "π",
            "importance_rank": 3108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "k",
            "importance_rank": 3109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N/",
            "importance_rank": 3110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πk",
            "importance_rank": 3115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πN/",
            "importance_rank": 3121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πk",
            "importance_rank": 3126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "·",
            "importance_rank": 3128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "jπ",
            "importance_rank": 3131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "j",
            "importance_rank": 3135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "πk",
            "importance_rank": 3136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "N",
            "importance_rank": 3137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "e",
            "importance_rank": 3138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "jπ",
            "importance_rank": 3140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "section_title": "−",
            "importance_rank": 3141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[0]",
            "importance_rank": 3143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[2]",
            "importance_rank": 3144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[4]",
            "importance_rank": 3145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[N - 2]",
            "importance_rank": 3146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[1]",
            "importance_rank": 3147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[3]",
            "importance_rank": 3148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[5]",
            "importance_rank": 3149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g[N -1]",
            "importance_rank": 3150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[0]",
            "importance_rank": 3155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[1]",
            "importance_rank": 3156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[2]",
            "importance_rank": 3157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[N/2 -1]",
            "importance_rank": 3158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[N/2]",
            "importance_rank": 3159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[N/2 +1]",
            "importance_rank": 3160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[N/2 +2]",
            "importance_rank": 3161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G[N -1]",
            "importance_rank": 3162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/2",
            "importance_rank": 3163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "Point",
            "importance_rank": 3164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "FFT",
            "importance_rank": 3165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/2",
            "importance_rank": 3166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "Point",
            "importance_rank": 3167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "FFT",
            "importance_rank": 3168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "n",
            "importance_rank": 3178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g",
            "importance_rank": 3179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "n",
            "importance_rank": 3180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "·",
            "importance_rank": 3181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "e",
            "importance_rank": 3182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "j",
            "importance_rank": 3184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "πkn",
            "importance_rank": 3185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "e",
            "importance_rank": 3188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "j",
            "importance_rank": 3190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "πk",
            "importance_rank": 3191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "·",
            "importance_rank": 3193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "n",
            "importance_rank": 3196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g",
            "importance_rank": 3197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "n",
            "importance_rank": 3198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "·",
            "importance_rank": 3199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "e",
            "importance_rank": 3200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "j",
            "importance_rank": 3202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "πkn",
            "importance_rank": 3203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "A",
            "importance_rank": 3208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "B",
            "importance_rank": 3214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "A",
            "importance_rank": 3218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "B",
            "importance_rank": 3220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "A",
            "importance_rank": 3226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "B",
            "importance_rank": 3229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "k",
            "importance_rank": 3230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "G",
            "importance_rank": 3240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "−",
            "importance_rank": 3243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "W",
            "importance_rank": 3244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N",
            "importance_rank": 3245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "g",
            "importance_rank": 3246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "n/",
            "importance_rank": 3247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "section_title": "N/",
            "importance_rank": 3252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[0]",
            "importance_rank": 3254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[1]",
            "importance_rank": 3255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[2]",
            "importance_rank": 3256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[3]",
            "importance_rank": 3257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[4]",
            "importance_rank": 3258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[5]",
            "importance_rank": 3259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[6]",
            "importance_rank": 3260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[7]",
            "importance_rank": 3261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Bit",
            "importance_rank": 3262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Reverse",
            "importance_rank": 3263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[0]",
            "importance_rank": 3264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[4]",
            "importance_rank": 3265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[2]",
            "importance_rank": 3266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[6]",
            "importance_rank": 3267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[1]",
            "importance_rank": 3268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[5]",
            "importance_rank": 3269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[3]",
            "importance_rank": 3270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "g[7]",
            "importance_rank": 3271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "W",
            "importance_rank": 3283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[0]",
            "importance_rank": 3284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[1]",
            "importance_rank": 3285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[2]",
            "importance_rank": 3286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[3]",
            "importance_rank": 3287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[4]",
            "importance_rank": 3288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[5]",
            "importance_rank": 3289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[6]",
            "importance_rank": 3290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "G[7]",
            "importance_rank": 3291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Stage 1",
            "importance_rank": 3292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Stage 2",
            "importance_rank": 3293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Stage 3",
            "importance_rank": 3294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "2 point FFT",
            "importance_rank": 3295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "4 point FFT",
            "importance_rank": 3296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "8 point FFT",
            "importance_rank": 3297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "section_title": "Legend",
            "importance_rank": 3298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "N/",
            "importance_rank": 3300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "{",
            "importance_rank": 3301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "}",
            "importance_rank": 3306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "{",
            "importance_rank": 3307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "}",
            "importance_rank": 3312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "{",
            "importance_rank": 3317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "}",
            "importance_rank": 3322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "{",
            "importance_rank": 3323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": ", g",
            "importance_rank": 3327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "}",
            "importance_rank": 3328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "section_title": "g",
            "importance_rank": 3332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "5.2",
            "importance_rank": 3334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "Baseline Implementation",
            "importance_rank": 3335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "⃝",
            "importance_rank": 3336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "O",
            "importance_rank": 3337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "O",
            "importance_rank": 3340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n",
            "importance_rank": 3344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "n/",
            "importance_rank": 3345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "section_title": "i",
            "importance_rank": 3346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "log",
            "importance_rank": 3347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "N",
            "importance_rank": 3348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "N",
            "importance_rank": 3349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "log",
            "importance_rank": 3350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "N",
            "importance_rank": 3351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "W",
            "importance_rank": 3352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "W",
            "importance_rank": 3353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "W",
            "importance_rank": 3354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "W",
            "importance_rank": 3355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "section_title": "W",
            "importance_rank": 3356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "{",
            "importance_rank": 3358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// temporary storage complex variable",
            "importance_rank": 3359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// temporary storage complex variable",
            "importance_rank": 3360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// loop indexes",
            "importance_rank": 3361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Index of lower point in butterﬂy",
            "importance_rank": 3362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Butterﬂy Width",
            "importance_rank": 3363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// N2=N",
            "importance_rank": 3364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": ">>",
            "importance_rank": 3365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "1",
            "importance_rank": 3366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "<",
            "importance_rank": 3367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "{",
            "importance_rank": 3368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Do M stages of butterﬂies",
            "importance_rank": 3369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "<<",
            "importance_rank": 3370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// DFT = 2ˆstage = points in sub DFT",
            "importance_rank": 3371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Butterﬂy WIDTHS in sub",
            "importance_rank": 3372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "DFT",
            "importance_rank": 3374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Perform butterﬂies for j",
            "importance_rank": 3376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "th stage",
            "importance_rank": 3378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "<",
            "importance_rank": 3379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "{",
            "importance_rank": 3380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// Compute butterﬂies that use same W",
            "importance_rank": 3381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "∗∗",
            "importance_rank": 3382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "k",
            "importance_rank": 3383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "<",
            "importance_rank": 3384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "{",
            "importance_rank": 3385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "// index of lower point in butterﬂy",
            "importance_rank": 3386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "∗",
            "importance_rank": 3387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "∗",
            "importance_rank": 3389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "∗",
            "importance_rank": 3390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "∗",
            "importance_rank": 3391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "−",
            "importance_rank": 3393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "}",
            "importance_rank": 3394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "}",
            "importance_rank": 3395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "}",
            "importance_rank": 3396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "section_title": "}",
            "importance_rank": 3397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "5.3",
            "importance_rank": 3404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "Bit Reversal",
            "importance_rank": 3405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "⃝",
            "importance_rank": 3406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "\\",
            "importance_rank": 3407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "{",
            "importance_rank": 3408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "section_title": "}",
            "importance_rank": 3409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// Number of bits of FFT, i.e., log(1024)",
            "importance_rank": 3411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// SIZE OF FFT",
            "importance_rank": 3412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": ">>",
            "importance_rank": 3413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// SIZE/2",
            "importance_rank": 3414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "{",
            "importance_rank": 3415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "<",
            "importance_rank": 3416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "{",
            "importance_rank": 3417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "<<",
            "importance_rank": 3418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "|",
            "importance_rank": 3419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": ">>",
            "importance_rank": 3420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "}",
            "importance_rank": 3421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "}",
            "importance_rank": 3422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "{",
            "importance_rank": 3423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "<",
            "importance_rank": 3424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "{",
            "importance_rank": 3425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// Find the bit reversed index",
            "importance_rank": 3426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "<",
            "importance_rank": 3427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "{",
            "importance_rank": 3428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// Swap the real values",
            "importance_rank": 3429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "// Swap the imaginary values",
            "importance_rank": 3430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "}",
            "importance_rank": 3431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "}",
            "importance_rank": 3432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "}",
            "importance_rank": 3433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "i",
            "importance_rank": 3434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "section_title": "i",
            "importance_rank": 3435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "{",
            "importance_rank": 3437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "}",
            "importance_rank": 3438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "<",
            "importance_rank": 3439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "5.4",
            "importance_rank": 3440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "Task Pipelining",
            "importance_rank": 3441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "⃝",
            "importance_rank": 3442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "N",
            "importance_rank": 3443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "N",
            "importance_rank": 3444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "section_title": "N",
            "importance_rank": 3445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 114,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "section_title": "⃝",
            "importance_rank": 3448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "section_title": "FAST FOURIER TRANSFORM",
            "importance_rank": 3449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "section_title": "5.5",
            "importance_rank": 3450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "section_title": "Conclusion",
            "importance_rank": 3451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "section_title": "⃝",
            "importance_rank": 3452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "section_title": "⃝",
            "importance_rank": 3453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "Chapter 6",
            "importance_rank": 3454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "Sparse Matrix Vector Multiplication",
            "importance_rank": 3455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "⃝",
            "importance_rank": 3456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "6.1",
            "importance_rank": 3457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "Background",
            "importance_rank": 3458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "section_title": "×",
            "importance_rank": 3459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "4",
            "importance_rank": 3462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "5",
            "importance_rank": 3466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "9",
            "importance_rank": 3467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "2",
            "importance_rank": 3469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "1",
            "importance_rank": 3472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "4",
            "importance_rank": 3474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "6",
            "importance_rank": 3476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "2",
            "importance_rank": 3478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "4",
            "importance_rank": 3479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "7",
            "importance_rank": 3480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "9",
            "importance_rank": 3481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "1",
            "importance_rank": 3483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "1",
            "importance_rank": 3484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "2",
            "importance_rank": 3485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "0",
            "importance_rank": 3486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "2",
            "importance_rank": 3487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "1",
            "importance_rank": 3489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "4",
            "importance_rank": 3492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "5",
            "importance_rank": 3493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "9",
            "importance_rank": 3494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "2",
            "importance_rank": 3495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "3",
            "importance_rank": 3496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "1",
            "importance_rank": 3497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "4",
            "importance_rank": 3498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "6",
            "importance_rank": 3499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "×",
            "importance_rank": 3500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "M",
            "importance_rank": 3501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "ij",
            "importance_rank": 3502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "n",
            "importance_rank": 3503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "n",
            "importance_rank": 3504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "k",
            "importance_rank": 3505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "M",
            "importance_rank": 3506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "ij",
            "importance_rank": 3507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "≤",
            "importance_rank": 3508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "k <",
            "importance_rank": 3509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "i",
            "importance_rank": 3510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "i",
            "importance_rank": 3511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "i",
            "importance_rank": 3512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "−",
            "importance_rank": 3513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "k",
            "importance_rank": 3514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "∈",
            "importance_rank": 3515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": ",",
            "importance_rank": 3516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "k",
            "importance_rank": 3517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": "∈",
            "importance_rank": 3518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "section_title": ",",
            "importance_rank": 3519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "{",
            "importance_rank": 3521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "<",
            "importance_rank": 3522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "{",
            "importance_rank": 3523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "<",
            "importance_rank": 3524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "{",
            "importance_rank": 3525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "∗",
            "importance_rank": 3526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "}",
            "importance_rank": 3527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "}",
            "importance_rank": 3528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "}",
            "importance_rank": 3529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "y",
            "importance_rank": 3530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "·",
            "importance_rank": 3531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "x",
            "importance_rank": 3532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "6.2",
            "importance_rank": 3533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "Baseline Implementation",
            "importance_rank": 3534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "y",
            "importance_rank": 3535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "x",
            "importance_rank": 3536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "x",
            "importance_rank": 3537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "y",
            "importance_rank": 3538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "section_title": "−",
            "importance_rank": 3539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "// SIZE of square matrix",
            "importance_rank": 3541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "//Number of non",
            "importance_rank": 3542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "−",
            "importance_rank": 3543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "zero elements",
            "importance_rank": 3544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "// SIZE;",
            "importance_rank": 3545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "//",
            "importance_rank": 3546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "MATRIXMUL H",
            "importance_rank": 3547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "not deﬁned",
            "importance_rank": 3548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "x",
            "importance_rank": 3549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "6.3",
            "importance_rank": 3550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "Testbench",
            "importance_rank": 3551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "⃝",
            "importance_rank": 3552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "x",
            "importance_rank": 3553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "y",
            "importance_rank": 3554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "section_title": "y",
            "importance_rank": 3555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "<",
            "importance_rank": 3557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": ">",
            "importance_rank": 3558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "∗",
            "importance_rank": 3559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "∗",
            "importance_rank": 3560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "<",
            "importance_rank": 3562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "<",
            "importance_rank": 3564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "∗",
            "importance_rank": 3565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{{",
            "importance_rank": 3569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}}",
            "importance_rank": 3576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "{",
            "importance_rank": 3583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "<",
            "importance_rank": 3585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "\\",
            "importance_rank": 3586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "\\",
            "importance_rank": 3587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "section_title": "}",
            "importance_rank": 3588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "6.4",
            "importance_rank": 3590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "⃝",
            "importance_rank": 3591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "⃝",
            "importance_rank": 3592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "section_title": "⃝",
            "importance_rank": 3593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "6.5",
            "importance_rank": 3594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "C/RTL Cosimulation",
            "importance_rank": 3595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "⃝",
            "importance_rank": 3596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "input",
            "importance_rank": 3597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "vectors",
            "importance_rank": 3598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "section_title": "output vectors",
            "importance_rank": 3599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "section_title": "6.6",
            "importance_rank": 3601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 125,
            "section_title": "⃝",
            "importance_rank": 3602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "section_title": "⃝",
            "importance_rank": 3604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "section_title": "⃝",
            "importance_rank": 3605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "section_title": "⃝",
            "importance_rank": 3606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "{",
            "importance_rank": 3608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "<",
            "importance_rank": 3609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "{",
            "importance_rank": 3610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "<",
            "importance_rank": 3611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "{",
            "importance_rank": 3612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "∗",
            "importance_rank": 3613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "<",
            "importance_rank": 3614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "{",
            "importance_rank": 3615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "<",
            "importance_rank": 3616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "{",
            "importance_rank": 3617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "∗",
            "importance_rank": 3618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "}",
            "importance_rank": 3619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "}",
            "importance_rank": 3620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "}",
            "importance_rank": 3621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "}",
            "importance_rank": 3622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "section_title": "}",
            "importance_rank": 3623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "SPARSE MATRIX VECTOR MULTIPLICATION",
            "importance_rank": 3624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "6.7",
            "importance_rank": 3625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "Conclusion",
            "importance_rank": 3626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "section_title": "⃝",
            "importance_rank": 3627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "Chapter 7",
            "importance_rank": 3628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "Matrix Multiplication",
            "importance_rank": 3629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "7.1",
            "importance_rank": 3630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "Background",
            "importance_rank": 3631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "matrix product",
            "importance_rank": 3632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "×",
            "importance_rank": 3634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "×",
            "importance_rank": 3637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "×",
            "importance_rank": 3640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "nm",
            "importance_rank": 3658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": ",",
            "importance_rank": 3659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "mp",
            "importance_rank": 3676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "p",
            "importance_rank": 3680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "n",
            "importance_rank": 3682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "· · ·",
            "importance_rank": 3683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "np",
            "importance_rank": 3684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "ij",
            "importance_rank": 3685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "ij",
            "importance_rank": 3686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "m",
            "importance_rank": 3687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "k",
            "importance_rank": 3688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "ik",
            "importance_rank": 3690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "kj",
            "importance_rank": 3692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": ",",
            "importance_rank": 3699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "A",
            "importance_rank": 3728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "section_title": "B",
            "importance_rank": 3729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "{",
            "importance_rank": 3731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "/",
            "importance_rank": 3732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "for each row and column of AB",
            "importance_rank": 3734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "/",
            "importance_rank": 3736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "<",
            "importance_rank": 3737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "{",
            "importance_rank": 3738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "<",
            "importance_rank": 3739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "{",
            "importance_rank": 3740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "/",
            "importance_rank": 3741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "compute (AB)i,j",
            "importance_rank": 3743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "/",
            "importance_rank": 3745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "<",
            "importance_rank": 3746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "{",
            "importance_rank": 3747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "}",
            "importance_rank": 3749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "}",
            "importance_rank": 3750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "}",
            "importance_rank": 3751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "7.2",
            "importance_rank": 3752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "Complete Matrix Multiplication",
            "importance_rank": 3753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "M",
            "importance_rank": 3754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "N",
            "importance_rank": 3755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "∗",
            "importance_rank": 3756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "section_title": "P",
            "importance_rank": 3757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "N",
            "importance_rank": 3759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "∗",
            "importance_rank": 3760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "M",
            "importance_rank": 3761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "∗",
            "importance_rank": 3762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "P",
            "importance_rank": 3763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "M",
            "importance_rank": 3764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "∗",
            "importance_rank": 3765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "section_title": "P",
            "importance_rank": 3766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "∗",
            "importance_rank": 3769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "M",
            "importance_rank": 3770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "∗",
            "importance_rank": 3774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "M",
            "importance_rank": 3775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "M",
            "importance_rank": 3776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "N",
            "importance_rank": 3778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "×",
            "importance_rank": 3779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "×",
            "importance_rank": 3780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "blocking",
            "importance_rank": 3781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "section_title": "tiling",
            "importance_rank": 3782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "×",
            "importance_rank": 3784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "×",
            "importance_rank": 3785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "×",
            "importance_rank": 3786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "7.3",
            "importance_rank": 3787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "Block Matrix Multiplication",
            "importance_rank": 3788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "block matrix",
            "importance_rank": 3789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "section_title": "streaming architecture",
            "importance_rank": 3790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 3792
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 3793
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 3794
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 3795
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "section_title": "×",
            "importance_rank": 3796
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3797
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "x",
            "importance_rank": 3798
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "=",
            "importance_rank": 3799
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "a)",
            "importance_rank": 3800
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "x",
            "importance_rank": 3801
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "=",
            "importance_rank": 3802
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "b)",
            "importance_rank": 3803
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "x",
            "importance_rank": 3804
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "=",
            "importance_rank": 3805
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "c)",
            "importance_rank": 3806
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "x",
            "importance_rank": 3807
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "=",
            "importance_rank": 3808
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "d)",
            "importance_rank": 3809
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "×",
            "importance_rank": 3810
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "×",
            "importance_rank": 3811
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "section_title": "×",
            "importance_rank": 3812
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3813
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "<",
            "importance_rank": 3814
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": ">",
            "importance_rank": 3815
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "<",
            "importance_rank": 3816
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": ">",
            "importance_rank": 3817
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "<",
            "importance_rank": 3818
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": ">",
            "importance_rank": 3819
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "{",
            "importance_rank": 3820
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "}",
            "importance_rank": 3821
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "{",
            "importance_rank": 3822
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "}",
            "importance_rank": 3823
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "<",
            "importance_rank": 3824
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": ">",
            "importance_rank": 3825
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": "<",
            "importance_rank": 3826
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "section_title": ">",
            "importance_rank": 3827
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "×",
            "importance_rank": 3828
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "×",
            "importance_rank": 3829
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "<",
            "importance_rank": 3830
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": ">",
            "importance_rank": 3831
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "<>",
            "importance_rank": 3832
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "⃝",
            "importance_rank": 3833
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "section_title": "⃝",
            "importance_rank": 3834
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3835
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3836
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": ">",
            "importance_rank": 3837
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3838
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": ">",
            "importance_rank": 3839
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3840
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3841
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "//only load the A rows when necessary",
            "importance_rank": 3842
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3843
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3844
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3845
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3846
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3847
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3848
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3849
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3850
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3851
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3852
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3853
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3854
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3855
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3856
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3857
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "∗",
            "importance_rank": 3858
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3859
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3860
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3861
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3862
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3863
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "<",
            "importance_rank": 3864
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "{",
            "importance_rank": 3865
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3866
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3867
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "}",
            "importance_rank": 3868
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "section_title": "×",
            "importance_rank": 3869
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3870
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "<<",
            "importance_rank": 3871
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "<<",
            "importance_rank": 3872
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 3873
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 3874
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 3875
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 3876
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "section_title": "×",
            "importance_rank": 3877
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3878
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "interval",
            "importance_rank": 3879
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "≥",
            "importance_rank": 3880
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "interval",
            "importance_rank": 3881
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": ", interval",
            "importance_rank": 3882
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": ",",
            "importance_rank": 3883
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "<>",
            "importance_rank": 3884
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "<",
            "importance_rank": 3885
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": ">",
            "importance_rank": 3886
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "section_title": "⃝",
            "importance_rank": 3887
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3888
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": "×",
            "importance_rank": 3889
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": "×",
            "importance_rank": 3890
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": "<",
            "importance_rank": 3891
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": ">",
            "importance_rank": 3892
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": ">>",
            "importance_rank": 3893
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": "<<",
            "importance_rank": 3894
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "section_title": ">>",
            "importance_rank": 3895
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3896
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3897
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": ">",
            "importance_rank": 3898
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3899
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3900
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3901
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3902
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3903
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3904
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3905
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "∗",
            "importance_rank": 3906
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3907
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3908
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3909
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3910
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3911
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3912
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": ">",
            "importance_rank": 3913
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3914
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": ">",
            "importance_rank": 3915
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3916
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3917
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "<",
            "importance_rank": 3918
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "{",
            "importance_rank": 3919
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3920
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "}",
            "importance_rank": 3921
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "section_title": "//the remainder of this testbench is displayed in the next ﬁgure",
            "importance_rank": 3922
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "MATRIX MULTIPLICATION",
            "importance_rank": 3923
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "// The beginning of the testbench is shown in the previous ﬁgure",
            "importance_rank": 3924
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3925
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3926
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3927
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3928
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3929
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "//row + BLOCK SIZE",
            "importance_rank": 3930
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "∗",
            "importance_rank": 3931
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "factor row;",
            "importance_rank": 3932
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "//col + BLOCK SIZE",
            "importance_rank": 3933
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "∗",
            "importance_rank": 3934
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "factor col;",
            "importance_rank": 3935
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3936
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3937
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3938
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3939
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3940
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3941
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3942
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3943
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3944
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3945
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3946
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<",
            "importance_rank": 3947
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "{",
            "importance_rank": 3948
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3949
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<<",
            "importance_rank": 3950
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<<",
            "importance_rank": 3951
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<<",
            "importance_rank": 3952
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "<<",
            "importance_rank": 3953
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "section_title": "}",
            "importance_rank": 3954
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "section_title": "7.4",
            "importance_rank": 3955
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "section_title": "Conclusion",
            "importance_rank": 3956
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "Chapter 8",
            "importance_rank": 3957
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "Preﬁx Sum and Histogram",
            "importance_rank": 3958
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "8.1",
            "importance_rank": 3959
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "Preﬁx Sum",
            "importance_rank": 3960
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3961
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3962
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3963
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3964
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3965
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3966
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3967
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3968
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3969
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3970
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "· · ·",
            "importance_rank": 3971
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3972
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3973
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "−",
            "importance_rank": 3974
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3975
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3976
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3977
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3978
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3979
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3980
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3981
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3982
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3983
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3984
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3985
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3986
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3987
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3988
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3989
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3990
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3991
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "· · ·",
            "importance_rank": 3992
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3993
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3994
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 3995
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3996
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "−",
            "importance_rank": 3997
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "in",
            "importance_rank": 3998
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 3999
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 4000
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 4001
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "−",
            "importance_rank": 4002
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "out",
            "importance_rank": 4003
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "n",
            "importance_rank": 4004
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "II",
            "importance_rank": 4005
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "section_title": "⃝",
            "importance_rank": 4006
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4007
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "{",
            "importance_rank": 4008
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "<",
            "importance_rank": 4009
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "{",
            "importance_rank": 4010
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "−",
            "importance_rank": 4011
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "}",
            "importance_rank": 4012
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "}",
            "importance_rank": 4013
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "{",
            "importance_rank": 4014
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "<",
            "importance_rank": 4015
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "{",
            "importance_rank": 4016
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "}",
            "importance_rank": 4017
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "⃝",
            "importance_rank": 4018
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "section_title": "⃝",
            "importance_rank": 4019
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4020
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "{",
            "importance_rank": 4021
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "<",
            "importance_rank": 4022
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "{",
            "importance_rank": 4023
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "−",
            "importance_rank": 4024
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "}",
            "importance_rank": 4025
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "}",
            "importance_rank": 4026
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "+",
            "importance_rank": 4027
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "a)",
            "importance_rank": 4028
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "b)",
            "importance_rank": 4029
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "in[]",
            "importance_rank": 4030
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "+",
            "importance_rank": 4031
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "out[]",
            "importance_rank": 4032
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "A",
            "importance_rank": 4033
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "in[]",
            "importance_rank": 4034
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "section_title": "out[]",
            "importance_rank": 4035
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4036
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "4",
            "importance_rank": 4037
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Data",
            "importance_rank": 4038
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Histogram",
            "importance_rank": 4039
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Bins",
            "importance_rank": 4040
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "0",
            "importance_rank": 4041
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "2",
            "importance_rank": 4042
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "3",
            "importance_rank": 4043
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "4",
            "importance_rank": 4044
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Histogram Values",
            "importance_rank": 4045
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "1",
            "importance_rank": 4046
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "2",
            "importance_rank": 4047
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "4",
            "importance_rank": 4048
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "4",
            "importance_rank": 4049
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "3",
            "importance_rank": 4050
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "3",
            "importance_rank": 4051
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "3",
            "importance_rank": 4052
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "4",
            "importance_rank": 4053
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "2 3 4",
            "importance_rank": 4054
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Counts",
            "importance_rank": 4055
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "1 4 3",
            "importance_rank": 4056
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "{",
            "importance_rank": 4057
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "<",
            "importance_rank": 4058
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "{",
            "importance_rank": 4059
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "}",
            "importance_rank": 4060
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "}",
            "importance_rank": 4061
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "8.2",
            "importance_rank": 4062
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "Histogram",
            "importance_rank": 4063
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": "bins",
            "importance_rank": 4064
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "section_title": ",",
            "importance_rank": 4065
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4066
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "+",
            "importance_rank": 4067
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "in[]",
            "importance_rank": 4068
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "val",
            "importance_rank": 4069
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "hist[]",
            "importance_rank": 4070
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "1",
            "importance_rank": 4071
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "8.3",
            "importance_rank": 4072
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "Histogram Optimization and False Dependencies",
            "importance_rank": 4073
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4074
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4075
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4076
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4077
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4078
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4079
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4080
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4081
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4082
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4083
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "not",
            "importance_rank": 4084
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4085
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "x",
            "importance_rank": 4086
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "⃝",
            "importance_rank": 4087
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "⃝",
            "importance_rank": 4088
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "⃝",
            "importance_rank": 4089
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "n",
            "importance_rank": 4090
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "i",
            "importance_rank": 4091
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "n",
            "importance_rank": 4092
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "section_title": "i",
            "importance_rank": 4093
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4094
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "<",
            "importance_rank": 4095
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": ">",
            "importance_rank": 4096
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "// Precondition: hist[] is initialized with zeros.",
            "importance_rank": 4097
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "// Precondition: for all x, in[x] != in[x+1]",
            "importance_rank": 4098
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "{",
            "importance_rank": 4099
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "−",
            "importance_rank": 4100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "<",
            "importance_rank": 4101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "{",
            "importance_rank": 4102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "}",
            "importance_rank": 4103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "}",
            "importance_rank": 4104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "⃝",
            "importance_rank": 4105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "section_title": "⃝",
            "importance_rank": 4106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "+",
            "importance_rank": 4108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "in[]",
            "importance_rank": 4109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "val",
            "importance_rank": 4110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "hist[]",
            "importance_rank": 4111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "1",
            "importance_rank": 4112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "⃝",
            "importance_rank": 4113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "section_title": "⃝",
            "importance_rank": 4114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "{",
            "importance_rank": 4116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "<",
            "importance_rank": 4117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "{",
            "importance_rank": 4118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "{",
            "importance_rank": 4119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "}",
            "importance_rank": 4120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "{",
            "importance_rank": 4121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "}",
            "importance_rank": 4122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "}",
            "importance_rank": 4123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "section_title": "8.4",
            "importance_rank": 4124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "+",
            "importance_rank": 4126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "in[]",
            "importance_rank": 4127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "val",
            "importance_rank": 4128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "hist[]",
            "importance_rank": 4129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "=",
            "importance_rank": 4130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "old",
            "importance_rank": 4131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "acc",
            "importance_rank": 4132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "1",
            "importance_rank": 4133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "acc",
            "importance_rank": 4134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "+",
            "importance_rank": 4135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "1",
            "importance_rank": 4136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "T",
            "importance_rank": 4137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "F",
            "importance_rank": 4138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "old",
            "importance_rank": 4139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "section_title": "new",
            "importance_rank": 4140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "Processing Element (PE)",
            "importance_rank": 4142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "PE",
            "importance_rank": 4143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": ". . .",
            "importance_rank": 4144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "in[]",
            "importance_rank": 4145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "PE",
            "importance_rank": 4146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "PE",
            "importance_rank": 4147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "Merge",
            "importance_rank": 4148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "hist[]",
            "importance_rank": 4149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "a)",
            "importance_rank": 4150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "b)",
            "importance_rank": 4151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "II",
            "importance_rank": 4152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "II",
            "importance_rank": 4153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "II",
            "importance_rank": 4154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": "II",
            "importance_rank": 4155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "section_title": ", II",
            "importance_rank": 4156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "<",
            "importance_rank": 4159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "<",
            "importance_rank": 4162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "<",
            "importance_rank": 4171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "//Top level function",
            "importance_rank": 4175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "{",
            "importance_rank": 4176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "section_title": "}",
            "importance_rank": 4177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "section_title": "PREFIX SUM AND HISTOGRAM",
            "importance_rank": 4178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "section_title": "⃝",
            "importance_rank": 4179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "section_title": "8.5",
            "importance_rank": 4180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "section_title": "Conclusion",
            "importance_rank": 4181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "section_title": "⃝",
            "importance_rank": 4182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "Chapter 9",
            "importance_rank": 4183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "Video Systems",
            "importance_rank": 4184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "9.1",
            "importance_rank": 4185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "Background",
            "importance_rank": 4186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "∗",
            "importance_rank": 4187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "∗",
            "importance_rank": 4188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": ",",
            "importance_rank": 4189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": ",",
            "importance_rank": 4190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "section_title": "scanline order",
            "importance_rank": 4191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "section_title": "chroma subsampling",
            "importance_rank": 4193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "section_title": "Bayer",
            "importance_rank": 4194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "section_title": "sync",
            "importance_rank": 4195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "DVI",
            "importance_rank": 4197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Horizontal Sync Pulse",
            "importance_rank": 4198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Horizontal Front Porch",
            "importance_rank": 4199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Horizontal Back Porch",
            "importance_rank": 4200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Vertical Sync Pulse",
            "importance_rank": 4201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Vertical Front Porch",
            "importance_rank": 4202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Vertical Back Porch",
            "importance_rank": 4203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Horizontal Blanking Interval",
            "importance_rank": 4204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "Vertical Blanking Interval",
            "importance_rank": 4205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "overscan",
            "importance_rank": 4206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "section_title": "∗",
            "importance_rank": 4207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "{",
            "importance_rank": 4209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "−",
            "importance_rank": 4210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "∗",
            "importance_rank": 4211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": ">>",
            "importance_rank": 4212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "}",
            "importance_rank": 4213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "{",
            "importance_rank": 4214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "}",
            "importance_rank": 4215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "{",
            "importance_rank": 4216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "<",
            "importance_rank": 4217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "{",
            "importance_rank": 4218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "<",
            "importance_rank": 4219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "{",
            "importance_rank": 4220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "}",
            "importance_rank": 4221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "}",
            "importance_rank": 4222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "}",
            "importance_rank": 4223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "∗",
            "importance_rank": 4224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": "∗",
            "importance_rank": 4225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "section_title": ".",
            "importance_rank": 4226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "section_title": "Dataﬂow",
            "importance_rank": 4228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "section_title": "{",
            "importance_rank": 4229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "section_title": "⃝",
            "importance_rank": 4230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "Dataﬂow",
            "importance_rank": 4232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "{",
            "importance_rank": 4233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "external memory controller",
            "importance_rank": 4234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "⃝",
            "importance_rank": 4235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "section_title": "⃝",
            "importance_rank": 4236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "Dataﬂow",
            "importance_rank": 4238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "{",
            "importance_rank": 4239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "{",
            "importance_rank": 4240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "<",
            "importance_rank": 4241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": ">",
            "importance_rank": 4242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "<",
            "importance_rank": 4243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": ">",
            "importance_rank": 4244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "section_title": "{",
            "importance_rank": 4245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "Dataﬂow",
            "importance_rank": 4247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "{",
            "importance_rank": 4248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "9.2",
            "importance_rank": 4249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "window",
            "importance_rank": 4250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "−",
            "importance_rank": 4251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "−",
            "importance_rank": 4252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "section_title": "line buﬀer",
            "importance_rank": 4253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{{",
            "importance_rank": 4256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}}",
            "importance_rank": 4261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "∗",
            "importance_rank": 4266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "∗",
            "importance_rank": 4267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "∗",
            "importance_rank": 4268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "−",
            "importance_rank": 4281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "−",
            "importance_rank": 4282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": ">",
            "importance_rank": 4285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "<",
            "importance_rank": 4287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": ">",
            "importance_rank": 4289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "−",
            "importance_rank": 4296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "||",
            "importance_rank": 4297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "−",
            "importance_rank": 4298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "{",
            "importance_rank": 4299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "section_title": "}",
            "importance_rank": 4303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "⃝",
            "importance_rank": 4305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "scalarization",
            "importance_rank": 4306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "reuse buﬀer",
            "importance_rank": 4307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "⃝",
            "importance_rank": 4308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "<>",
            "importance_rank": 4309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "<>",
            "importance_rank": 4310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "causal",
            "importance_rank": 4311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "∀",
            "importance_rank": 4314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "k <",
            "importance_rank": 4315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": ", h",
            "importance_rank": 4316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "k",
            "importance_rank": 4317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "−",
            "importance_rank": 4326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "D",
            "importance_rank": 4327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "y",
            "importance_rank": 4328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "x",
            "importance_rank": 4329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "⊗",
            "importance_rank": 4330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "y",
            "importance_rank": 4332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "x",
            "importance_rank": 4333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "⊗",
            "importance_rank": 4334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "h",
            "importance_rank": 4335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "y",
            "importance_rank": 4336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "y",
            "importance_rank": 4338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "n",
            "importance_rank": 4339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "−",
            "importance_rank": 4340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "section_title": "D",
            "importance_rank": 4341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "<",
            "importance_rank": 4344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "<",
            "importance_rank": 4346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "<",
            "importance_rank": 4348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "||",
            "importance_rank": 4351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "||",
            "importance_rank": 4352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "−",
            "importance_rank": 4353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "||",
            "importance_rank": 4354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "−",
            "importance_rank": 4355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "{",
            "importance_rank": 4358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "section_title": "}",
            "importance_rank": 4362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "y",
            "importance_rank": 4364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "x",
            "importance_rank": 4365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "⊗",
            "importance_rank": 4366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "h",
            "importance_rank": 4367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "∞",
            "importance_rank": 4368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "k",
            "importance_rank": 4369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "−∞",
            "importance_rank": 4370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "x",
            "importance_rank": 4371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "k",
            "importance_rank": 4372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "∗",
            "importance_rank": 4373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "h",
            "importance_rank": 4374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "n",
            "importance_rank": 4375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "−",
            "importance_rank": 4376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "k",
            "importance_rank": 4377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "section_title": "extending the iteration domain",
            "importance_rank": 4378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "<",
            "importance_rank": 4392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": ">",
            "importance_rank": 4395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": ">",
            "importance_rank": 4396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "−",
            "importance_rank": 4398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "−",
            "importance_rank": 4399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "||",
            "importance_rank": 4400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "||",
            "importance_rank": 4401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "−",
            "importance_rank": 4402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "||",
            "importance_rank": 4403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "−",
            "importance_rank": 4404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "{",
            "importance_rank": 4407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "section_title": "}",
            "importance_rank": 4412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 170,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "•",
            "importance_rank": 4415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "•",
            "importance_rank": 4416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "•",
            "importance_rank": 4417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "9.3",
            "importance_rank": 4418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "section_title": "Conclusion",
            "importance_rank": 4419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "VIDEO SYSTEMS",
            "importance_rank": 4420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": ">",
            "importance_rank": 4436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": ">",
            "importance_rank": 4437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "{",
            "importance_rank": 4444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": ">",
            "importance_rank": 4448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "<",
            "importance_rank": 4451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": ">",
            "importance_rank": 4454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "−",
            "importance_rank": 4456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "section_title": "}",
            "importance_rank": 4462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "Chapter 10",
            "importance_rank": 4463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "Sorting Algorithms",
            "importance_rank": 4464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "10.1",
            "importance_rank": 4465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "Introduction",
            "importance_rank": 4466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "O",
            "importance_rank": 4467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "n",
            "importance_rank": 4468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "{",
            "importance_rank": 4470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "}",
            "importance_rank": 4478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ">",
            "importance_rank": 4480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "..",
            "importance_rank": 4482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "..",
            "importance_rank": 4484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "{",
            "importance_rank": 4486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "}",
            "importance_rank": 4494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "<",
            "importance_rank": 4496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "{",
            "importance_rank": 4499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": ",",
            "importance_rank": 4506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "}",
            "importance_rank": 4507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "A",
            "importance_rank": 4511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "key",
            "importance_rank": 4512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "O",
            "importance_rank": 4513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "O",
            "importance_rank": 4514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "n",
            "importance_rank": 4515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "n",
            "importance_rank": 4516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "section_title": "n",
            "importance_rank": 4517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "O",
            "importance_rank": 4519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "n",
            "importance_rank": 4520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "n",
            "importance_rank": 4521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "•",
            "importance_rank": 4522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "•",
            "importance_rank": 4523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "•",
            "importance_rank": 4524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "•",
            "importance_rank": 4525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "O",
            "importance_rank": 4526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "n",
            "importance_rank": 4527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "10.2",
            "importance_rank": 4528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "Insertion Sort",
            "importance_rank": 4529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "section_title": "−",
            "importance_rank": 4530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "<",
            "importance_rank": 4545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "−",
            "importance_rank": 4547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": ">",
            "importance_rank": 4548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "−",
            "importance_rank": 4549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": ">",
            "importance_rank": 4550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": ">",
            "importance_rank": 4551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "{",
            "importance_rank": 4552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "−",
            "importance_rank": 4553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "−−",
            "importance_rank": 4554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "}",
            "importance_rank": 4557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "section_title": "−",
            "importance_rank": 4558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": ">",
            "importance_rank": 4560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "−",
            "importance_rank": 4561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": ">",
            "importance_rank": 4562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "−",
            "importance_rank": 4563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "⃝",
            "importance_rank": 4564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "N",
            "importance_rank": 4565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "/",
            "importance_rank": 4566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "N",
            "importance_rank": 4567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "section_title": "/",
            "importance_rank": 4568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "{",
            "importance_rank": 4570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "<",
            "importance_rank": 4571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "{",
            "importance_rank": 4572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "−",
            "importance_rank": 4573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": ">",
            "importance_rank": 4574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": ">",
            "importance_rank": 4575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "{",
            "importance_rank": 4576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "−",
            "importance_rank": 4577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "−−",
            "importance_rank": 4578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "}",
            "importance_rank": 4579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "}",
            "importance_rank": 4580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "}",
            "importance_rank": 4581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "−",
            "importance_rank": 4582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "⃝",
            "importance_rank": 4583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "⃝",
            "importance_rank": 4584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "−",
            "importance_rank": 4585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "⃝",
            "importance_rank": 4586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "⃝",
            "importance_rank": 4587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "∗",
            "importance_rank": 4588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "section_title": "memory banking",
            "importance_rank": 4589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "section_title": "⃝",
            "importance_rank": 4591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "<",
            "importance_rank": 4594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "−",
            "importance_rank": 4596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": ">",
            "importance_rank": 4597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "−−",
            "importance_rank": 4598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": ">",
            "importance_rank": 4600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": ">",
            "importance_rank": 4603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "−",
            "importance_rank": 4604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": ">",
            "importance_rank": 4605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "−",
            "importance_rank": 4607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "{",
            "importance_rank": 4609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": ">",
            "importance_rank": 4610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "−",
            "importance_rank": 4611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "section_title": "}",
            "importance_rank": 4615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "φ",
            "importance_rank": 4617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "⃝",
            "importance_rank": 4618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "i",
            "importance_rank": 4619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "i",
            "importance_rank": 4620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "N",
            "importance_rank": 4621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "section_title": "−",
            "importance_rank": 4622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "cell 0",
            "importance_rank": 4624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "cell i",
            "importance_rank": 4625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "cell N-1",
            "importance_rank": 4626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Sorted",
            "importance_rank": 4627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Output",
            "importance_rank": 4628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "...",
            "importance_rank": 4629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "in",
            "importance_rank": 4630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "out",
            "importance_rank": 4631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Unsorted",
            "importance_rank": 4632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Output",
            "importance_rank": 4633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Comparison",
            "importance_rank": 4634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "Logic",
            "importance_rank": 4635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "local",
            "importance_rank": 4636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "...",
            "importance_rank": 4637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "<",
            "importance_rank": 4638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": ">",
            "importance_rank": 4639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "<",
            "importance_rank": 4640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": ">",
            "importance_rank": 4641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "{",
            "importance_rank": 4642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": ">",
            "importance_rank": 4643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "{",
            "importance_rank": 4644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "}",
            "importance_rank": 4645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "{",
            "importance_rank": 4646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "}",
            "importance_rank": 4647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "}",
            "importance_rank": 4648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "section_title": "⃝",
            "importance_rank": 4649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "{",
            "importance_rank": 4655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "<",
            "importance_rank": 4668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": ">",
            "importance_rank": 4669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "// Function calls;",
            "importance_rank": 4670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "section_title": "}",
            "importance_rank": 4671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 183,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 183,
            "section_title": "∗",
            "importance_rank": 4673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": ">",
            "importance_rank": 4676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": ">",
            "importance_rank": 4678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": ">",
            "importance_rank": 4683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//generate random data to sort",
            "importance_rank": 4684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//change me if you want diﬀerent numbers",
            "importance_rank": 4687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//process the data through the insertion cell sort function",
            "importance_rank": 4694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "∗",
            "importance_rank": 4696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//feed in the SIZE elements to be sorted",
            "importance_rank": 4700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//then send in dummy data to ﬂush pipeline",
            "importance_rank": 4703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "−",
            "importance_rank": 4704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//sort the data using the insertion sort function",
            "importance_rank": 4707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "//compare the results of insertion sort to insertion cell sort; fail if they diﬀer",
            "importance_rank": 4708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<",
            "importance_rank": 4718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "{",
            "importance_rank": 4720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "<<",
            "importance_rank": 4731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "\\",
            "importance_rank": 4732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "section_title": "}",
            "importance_rank": 4733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{ }",
            "importance_rank": 4747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4792
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4793
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "{",
            "importance_rank": 4794
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "}",
            "importance_rank": 4795
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "10.3",
            "importance_rank": 4796
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "Merge Sort",
            "importance_rank": 4797
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "O",
            "importance_rank": 4798
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "section_title": "n",
            "importance_rank": 4799
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4800
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "section_title": "N",
            "importance_rank": 4801
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "section_title": "N",
            "importance_rank": 4802
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4803
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// subarray1 is in[i1..i2",
            "importance_rank": 4804
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4805
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1], subarray2 is in[i2..i3",
            "importance_rank": 4806
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4807
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1], result is in out[i1..i3",
            "importance_rank": 4808
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4809
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1]",
            "importance_rank": 4810
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4811
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// Foreach element that needs to be sorted...",
            "importance_rank": 4812
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4813
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4814
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// Select the smallest available element.",
            "importance_rank": 4815
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4816
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4817
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "||",
            "importance_rank": 4818
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4819
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4820
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4821
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4822
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4823
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4824
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4825
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4826
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// Each time through the loop, we try to merge sorted subarrays of width elements",
            "importance_rank": 4827
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// into a sorted subarray of 2",
            "importance_rank": 4828
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4829
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "width elements.",
            "importance_rank": 4830
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4831
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4832
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4833
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4834
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4835
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4836
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// Try to merge two sorted subarrays:",
            "importance_rank": 4837
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// A[i1..i1+width",
            "importance_rank": 4838
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4839
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1] and A[i1+width..i1+2",
            "importance_rank": 4840
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4841
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "width",
            "importance_rank": 4842
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4843
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1] to temp[i1..2",
            "importance_rank": 4844
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4845
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "width",
            "importance_rank": 4846
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "−",
            "importance_rank": 4847
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "1]",
            "importance_rank": 4848
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "∗",
            "importance_rank": 4849
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": ">",
            "importance_rank": 4850
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": ">",
            "importance_rank": 4851
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4852
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "// Copy temp[] back to A[] for next iteration",
            "importance_rank": 4853
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "<",
            "importance_rank": 4854
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "{",
            "importance_rank": 4855
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4856
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4857
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "section_title": "}",
            "importance_rank": 4858
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "section_title": "N",
            "importance_rank": 4859
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "section_title": "N",
            "importance_rank": 4860
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4861
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "// subarray1 is in[ii..i2",
            "importance_rank": 4862
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "−",
            "importance_rank": 4863
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "1]; subarray2 is in[i2..i3",
            "importance_rank": 4864
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "−",
            "importance_rank": 4865
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "1]",
            "importance_rank": 4866
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "// sorted merge is stored in out[i1..i3",
            "importance_rank": 4867
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "−",
            "importance_rank": 4868
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "1]",
            "importance_rank": 4869
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "{",
            "importance_rank": 4870
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "// Foreach element that needs to be sorted...",
            "importance_rank": 4871
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "<",
            "importance_rank": 4872
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "{",
            "importance_rank": 4873
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "// Select the smallest available element.",
            "importance_rank": 4874
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "<",
            "importance_rank": 4875
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "<",
            "importance_rank": 4876
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "||",
            "importance_rank": 4877
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "{",
            "importance_rank": 4878
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "}",
            "importance_rank": 4879
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "{",
            "importance_rank": 4880
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "<",
            "importance_rank": 4881
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "}",
            "importance_rank": 4882
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "}",
            "importance_rank": 4883
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "}",
            "importance_rank": 4884
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "section_title": "⃝",
            "importance_rank": 4885
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4886
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4887
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4888
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "∗",
            "importance_rank": 4889
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4890
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "∗",
            "importance_rank": 4891
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": ">",
            "importance_rank": 4892
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": ">",
            "importance_rank": 4893
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4894
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4895
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4896
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4897
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "||",
            "importance_rank": 4898
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4899
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4900
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4901
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4902
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4903
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4904
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "∗",
            "importance_rank": 4905
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "∗",
            "importance_rank": 4906
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": ">",
            "importance_rank": 4907
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": ">",
            "importance_rank": 4908
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4909
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4910
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "<",
            "importance_rank": 4911
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "{",
            "importance_rank": 4912
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4913
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4914
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "}",
            "importance_rank": 4915
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "section_title": "⃝",
            "importance_rank": 4916
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4917
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "⃝",
            "importance_rank": 4918
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "10.4",
            "importance_rank": 4919
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "Conclusion",
            "importance_rank": 4920
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 4921
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "/",
            "importance_rank": 4922
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 4923
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 4924
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 4925
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "section_title": "N",
            "importance_rank": 4926
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4927
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4928
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "∗",
            "importance_rank": 4929
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": ">",
            "importance_rank": 4930
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": ">",
            "importance_rank": 4931
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "<",
            "importance_rank": 4932
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4933
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "<",
            "importance_rank": 4934
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "<",
            "importance_rank": 4935
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "||",
            "importance_rank": 4936
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4937
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4938
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4939
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "<",
            "importance_rank": 4940
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4941
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4942
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "∗",
            "importance_rank": 4943
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "∗",
            "importance_rank": 4944
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": ">",
            "importance_rank": 4945
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": ">",
            "importance_rank": 4946
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4947
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4948
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4949
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4950
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "−",
            "importance_rank": 4951
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "∗",
            "importance_rank": 4952
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "<",
            "importance_rank": 4953
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "−",
            "importance_rank": 4954
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "{",
            "importance_rank": 4955
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "−",
            "importance_rank": 4956
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "∗",
            "importance_rank": 4957
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4958
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "−",
            "importance_rank": 4959
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "}",
            "importance_rank": 4960
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "section_title": "⃝",
            "importance_rank": 4961
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "SORTING ALGORITHMS",
            "importance_rank": 4962
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "N",
            "importance_rank": 4963
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "N",
            "importance_rank": 4964
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "N",
            "importance_rank": 4965
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "N",
            "importance_rank": 4966
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "section_title": "⃝",
            "importance_rank": 4967
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "section_title": "Chapter 11",
            "importance_rank": 4968
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "section_title": "Huﬀman Encoding",
            "importance_rank": 4969
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "section_title": "11.1",
            "importance_rank": 4970
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 196,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 4971
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 196,
            "section_title": "Basic Hufman Encoding",
            "importance_rank": 4972
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 4973
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "l",
            "importance_rank": 4974
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "<<",
            "importance_rank": 4975
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "<<",
            "importance_rank": 4976
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "<<",
            "importance_rank": 4977
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "section_title": "⃝",
            "importance_rank": 4978
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 4979
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4980
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4981
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "input",
            "importance_rank": 4982
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4983
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4984
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4985
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4986
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "output",
            "importance_rank": 4987
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4988
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4989
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4990
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4991
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "output",
            "importance_rank": 4992
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4993
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "/",
            "importance_rank": 4994
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "∗",
            "importance_rank": 4995
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "{",
            "importance_rank": 4996
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 4997
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 4998
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "−",
            "importance_rank": 4999
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5000
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 5001
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "−",
            "importance_rank": 5002
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5003
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 5004
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "−",
            "importance_rank": 5005
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5006
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 5007
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5008
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 5009
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5010
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": ">",
            "importance_rank": 5011
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "−",
            "importance_rank": 5012
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5013
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "{",
            "importance_rank": 5014
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "// std::cout",
            "importance_rank": 5015
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<<",
            "importance_rank": 5016
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "sorted[i].value",
            "importance_rank": 5017
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<<",
            "importance_rank": 5018
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "” ”",
            "importance_rank": 5019
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<<",
            "importance_rank": 5020
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "sorted[i].frequency",
            "importance_rank": 5021
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<<",
            "importance_rank": 5022
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "”",
            "importance_rank": 5023
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "\\",
            "importance_rank": 5024
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "n”;",
            "importance_rank": 5025
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "<",
            "importance_rank": 5026
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "}",
            "importance_rank": 5027
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "section_title": "// Check the result of computing the tree histogram",
            "importance_rank": 5028
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5029
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "<",
            "importance_rank": 5030
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "{",
            "importance_rank": 5031
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": ">",
            "importance_rank": 5032
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "<<",
            "importance_rank": 5033
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "<<",
            "importance_rank": 5034
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "<<",
            "importance_rank": 5035
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "<<",
            "importance_rank": 5036
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "\\",
            "importance_rank": 5037
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "}",
            "importance_rank": 5038
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "∗",
            "importance_rank": 5039
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "}",
            "importance_rank": 5040
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "⃝",
            "importance_rank": 5041
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "11.2",
            "importance_rank": 5042
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "section_title": "Implementation",
            "importance_rank": 5043
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5044
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// input number of symbols",
            "importance_rank": 5045
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// upper bound on codeword length during tree construction",
            "importance_rank": 5046
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// maximum codeword tree length after rebalancing",
            "importance_rank": 5047
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// Should be log2(INPUT SYMBOL SIZE)",
            "importance_rank": 5048
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// Should be log2(TREE DEPTH)",
            "importance_rank": 5049
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// number of bits needed to record MAX CODEWORD LENGTH value",
            "importance_rank": 5050
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// Should be log2(MAX CODEWORD LENGTH)",
            "importance_rank": 5051
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "// A marker for internal nodes",
            "importance_rank": 5052
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5053
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5054
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "−",
            "importance_rank": 5055
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5056
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5057
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5058
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5059
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5060
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5061
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5062
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5063
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "{",
            "importance_rank": 5064
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5065
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5066
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "<",
            "importance_rank": 5067
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": ">",
            "importance_rank": 5068
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "}",
            "importance_rank": 5069
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "section_title": "∗",
            "importance_rank": 5070
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5071
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "section_title": "⌈",
            "importance_rank": 5072
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "section_title": "⌉",
            "importance_rank": 5073
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "section_title": "⃝",
            "importance_rank": 5074
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5075
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "// Postcondition: out[x].frequency",
            "importance_rank": 5076
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": ">",
            "importance_rank": 5077
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "0",
            "importance_rank": 5078
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5079
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5080
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "input",
            "importance_rank": 5081
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5082
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5083
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5084
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5085
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "output",
            "importance_rank": 5086
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5087
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5088
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5089
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5090
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "output",
            "importance_rank": 5091
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5092
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "/",
            "importance_rank": 5093
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5094
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "{",
            "importance_rank": 5095
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "<",
            "importance_rank": 5096
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": ">",
            "importance_rank": 5097
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "<",
            "importance_rank": 5098
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "{",
            "importance_rank": 5099
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "{",
            "importance_rank": 5100
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "}",
            "importance_rank": 5101
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "}",
            "importance_rank": 5102
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "∗",
            "importance_rank": 5103
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "}",
            "importance_rank": 5104
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "⃝",
            "importance_rank": 5105
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "section_title": "⃝",
            "importance_rank": 5106
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5107
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "radix",
            "importance_rank": 5108
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "⃝",
            "importance_rank": 5109
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "⃝",
            "importance_rank": 5110
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "section_title": "⃝",
            "importance_rank": 5111
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5112
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "// should be log2(RADIX)",
            "importance_rank": 5113
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5114
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": ">",
            "importance_rank": 5115
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5116
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5117
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "input",
            "importance_rank": 5118
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5119
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5120
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5121
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5122
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "input",
            "importance_rank": 5123
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5124
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5125
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5126
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5127
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "output",
            "importance_rank": 5128
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "∗",
            "importance_rank": 5129
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "/",
            "importance_rank": 5130
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "{",
            "importance_rank": 5131
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5132
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": ">",
            "importance_rank": 5133
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": ">",
            "importance_rank": 5134
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5135
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5136
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "{",
            "importance_rank": 5137
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "}",
            "importance_rank": 5138
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5139
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "{",
            "importance_rank": 5140
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5141
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "{",
            "importance_rank": 5142
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "}",
            "importance_rank": 5143
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "<",
            "importance_rank": 5144
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "{",
            "importance_rank": 5145
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": ">>",
            "importance_rank": 5146
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "−",
            "importance_rank": 5147
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "// Extrract a digit",
            "importance_rank": 5148
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "// Store the current digit for each symbol",
            "importance_rank": 5149
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "section_title": "// Save the current sorted order of symbols",
            "importance_rank": 5150
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5151
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "}",
            "importance_rank": 5152
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "<",
            "importance_rank": 5153
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "−",
            "importance_rank": 5154
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "−",
            "importance_rank": 5155
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "<",
            "importance_rank": 5156
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "{",
            "importance_rank": 5157
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "// Move symbol to new sorted location",
            "importance_rank": 5158
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "// Also copy to output",
            "importance_rank": 5159
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "// Update digit location",
            "importance_rank": 5160
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "}",
            "importance_rank": 5161
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "}",
            "importance_rank": 5162
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "section_title": "}",
            "importance_rank": 5163
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "section_title": "n >",
            "importance_rank": 5164
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "section_title": "n",
            "importance_rank": 5165
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 207,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5166
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 207,
            "section_title": "pages",
            "importance_rank": 5167
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5168
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "S",
            "importance_rank": 5169
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "F",
            "importance_rank": 5170
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "F",
            "importance_rank": 5171
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "1",
            "importance_rank": 5172
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "B",
            "importance_rank": 5173
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "1",
            "importance_rank": 5174
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "C",
            "importance_rank": 5175
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "2",
            "importance_rank": 5176
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "A",
            "importance_rank": 5177
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "3",
            "importance_rank": 5178
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "D",
            "importance_rank": 5179
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "5",
            "importance_rank": 5180
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "E",
            "importance_rank": 5181
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "5",
            "importance_rank": 5182
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "Intermediate:",
            "importance_rank": 5183
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "2",
            "importance_rank": 5184
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "4",
            "importance_rank": 5185
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "7 10 17",
            "importance_rank": 5186
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "Left:",
            "importance_rank": 5187
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "B",
            "importance_rank": 5188
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "C",
            "importance_rank": 5189
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "A",
            "importance_rank": 5190
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "D n2",
            "importance_rank": 5191
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "Right:",
            "importance_rank": 5192
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "F",
            "importance_rank": 5193
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "n0 n1 E n3",
            "importance_rank": 5194
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "Parent:",
            "importance_rank": 5195
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "1",
            "importance_rank": 5196
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "2",
            "importance_rank": 5197
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "4",
            "importance_rank": 5198
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "4",
            "importance_rank": 5199
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "0",
            "importance_rank": 5200
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "section_title": "In:",
            "importance_rank": 5201
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5202
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5203
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5204
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "input",
            "importance_rank": 5205
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5206
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5207
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5208
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5209
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "input",
            "importance_rank": 5210
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5211
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5212
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5213
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5214
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "output",
            "importance_rank": 5215
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5216
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5217
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5218
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5219
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "−",
            "importance_rank": 5220
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5221
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5222
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "output",
            "importance_rank": 5223
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5224
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5225
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5226
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5227
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "−",
            "importance_rank": 5228
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5229
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5230
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "output",
            "importance_rank": 5231
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "∗",
            "importance_rank": 5232
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "/",
            "importance_rank": 5233
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5234
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5235
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "−",
            "importance_rank": 5236
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "{",
            "importance_rank": 5237
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "−",
            "importance_rank": 5238
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5239
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5240
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Number of intermediate nodes assigned a parent.",
            "importance_rank": 5241
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5242
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5243
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Number of inputs consumed.",
            "importance_rank": 5244
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": ">",
            "importance_rank": 5245
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5246
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5247
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "−",
            "importance_rank": 5248
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "{",
            "importance_rank": 5249
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// There are two cases.",
            "importance_rank": 5250
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Case 1: remove a Symbol from in[]",
            "importance_rank": 5251
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Case 2: remove an element from intermediate[]",
            "importance_rank": 5252
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// We do this twice, once for the left and once for the right of the new intermediate node.",
            "importance_rank": 5253
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5254
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "||",
            "importance_rank": 5255
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5256
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5257
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5258
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "||",
            "importance_rank": 5259
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "{",
            "importance_rank": 5260
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Pick symbol from in[].",
            "importance_rank": 5261
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Set input symbol as left node",
            "importance_rank": 5262
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Add symbol frequency to total node frequency",
            "importance_rank": 5263
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Move to the next input symbol",
            "importance_rank": 5264
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "}",
            "importance_rank": 5265
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "{",
            "importance_rank": 5266
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Pick internal node without a parent.",
            "importance_rank": 5267
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Set symbol to indicate an internal node",
            "importance_rank": 5268
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Add child node frequency",
            "importance_rank": 5269
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Set this node as child’s parent",
            "importance_rank": 5270
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "// Go to next parentless internal node",
            "importance_rank": 5271
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "}",
            "importance_rank": 5272
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5273
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "||",
            "importance_rank": 5274
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5275
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5276
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "<",
            "importance_rank": 5277
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "||",
            "importance_rank": 5278
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "section_title": "{",
            "importance_rank": 5279
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5280
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "// Pick symbol from in[].",
            "importance_rank": 5281
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "}",
            "importance_rank": 5282
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "{",
            "importance_rank": 5283
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "// Pick internal node without a parent.",
            "importance_rank": 5284
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "}",
            "importance_rank": 5285
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "// Verify that nodes in the tree are sorted by frequency",
            "importance_rank": 5286
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "||",
            "importance_rank": 5287
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": ">",
            "importance_rank": 5288
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "−",
            "importance_rank": 5289
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "}",
            "importance_rank": 5290
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "//Set parent of last node (root) to 0",
            "importance_rank": 5291
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "}",
            "importance_rank": 5292
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "−",
            "importance_rank": 5293
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "−",
            "importance_rank": 5294
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "section_title": "−",
            "importance_rank": 5295
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5296
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n >",
            "importance_rank": 5297
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5298
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "∀",
            "importance_rank": 5299
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5300
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": ",",
            "importance_rank": 5301
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5302
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5303
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "∀",
            "importance_rank": 5304
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n,",
            "importance_rank": 5305
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5306
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5307
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "∀",
            "importance_rank": 5308
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5309
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": ",",
            "importance_rank": 5310
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5311
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "section_title": "n",
            "importance_rank": 5312
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5313
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5314
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5315
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "input",
            "importance_rank": 5316
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5317
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5318
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5319
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5320
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5321
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5322
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5323
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "input",
            "importance_rank": 5324
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5325
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5326
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5327
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5328
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5329
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5330
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5331
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "input",
            "importance_rank": 5332
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5333
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5334
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5335
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5336
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5337
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5338
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5339
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "input",
            "importance_rank": 5340
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5341
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5342
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5343
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5344
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "output",
            "importance_rank": 5345
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "∗",
            "importance_rank": 5346
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "/",
            "importance_rank": 5347
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5348
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5349
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5350
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5351
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5352
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5353
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5354
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5355
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5356
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5357
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5358
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5359
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5360
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5361
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "// Depth of the root node is 1.",
            "importance_rank": 5362
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−",
            "importance_rank": 5363
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5364
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "−−",
            "importance_rank": 5365
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5366
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5367
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5368
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "||",
            "importance_rank": 5369
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5370
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5371
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "// Both the children of the original node were symbols",
            "importance_rank": 5372
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5373
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "{",
            "importance_rank": 5374
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "// One child of the original node was a symbol",
            "importance_rank": 5375
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5376
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "<",
            "importance_rank": 5377
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": ">",
            "importance_rank": 5378
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5379
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5380
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "section_title": "}",
            "importance_rank": 5381
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5382
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "section_title": "n >",
            "importance_rank": 5383
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "section_title": "n",
            "importance_rank": 5384
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5385
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5386
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5387
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "input",
            "importance_rank": 5388
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5389
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5390
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5391
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": ">",
            "importance_rank": 5392
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5393
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5394
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "output",
            "importance_rank": 5395
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5396
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5397
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5398
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": ">",
            "importance_rank": 5399
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5400
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5401
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "output",
            "importance_rank": 5402
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "∗",
            "importance_rank": 5403
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "/",
            "importance_rank": 5404
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5405
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": ">",
            "importance_rank": 5406
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5407
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Copy into temporary storage to maintain dataﬂow properties",
            "importance_rank": 5408
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5409
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5410
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "}",
            "importance_rank": 5411
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5412
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": ">",
            "importance_rank": 5413
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−",
            "importance_rank": 5414
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": ">",
            "importance_rank": 5415
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−−",
            "importance_rank": 5416
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5417
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Look to see if there is any nodes at lengths greater than target depth",
            "importance_rank": 5418
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5419
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5420
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Find deepest leaf with codeword length",
            "importance_rank": 5421
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5422
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "target depth",
            "importance_rank": 5423
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "{",
            "importance_rank": 5424
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−−",
            "importance_rank": 5425
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "}",
            "importance_rank": 5426
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "}",
            "importance_rank": 5427
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Move leaf with depth i to depth j+1.",
            "importance_rank": 5428
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−",
            "importance_rank": 5429
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// The node at level j is no longer a leaf.",
            "importance_rank": 5430
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Two new leaf nodes are attached at level j+1.",
            "importance_rank": 5431
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−",
            "importance_rank": 5432
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// The leaf node at level i+1 gets attached here.",
            "importance_rank": 5433
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "−",
            "importance_rank": 5434
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// Two leaf nodes have been lost from level i.",
            "importance_rank": 5435
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// now deepest leaf with codeword length",
            "importance_rank": 5436
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "<",
            "importance_rank": 5437
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "target length",
            "importance_rank": 5438
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "// is at level (j+1) unless j+1 == target length",
            "importance_rank": 5439
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "}",
            "importance_rank": 5440
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "section_title": "}",
            "importance_rank": 5441
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5442
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "// Copy the output to meet dataﬂow requirements and check the validity",
            "importance_rank": 5443
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "<",
            "importance_rank": 5444
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "{",
            "importance_rank": 5445
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": ">",
            "importance_rank": 5446
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "<",
            "importance_rank": 5447
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "∗",
            "importance_rank": 5448
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "}",
            "importance_rank": 5449
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "}",
            "importance_rank": 5450
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "−",
            "importance_rank": 5451
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "section_title": "−",
            "importance_rank": 5452
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5453
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5454
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5455
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "input",
            "importance_rank": 5456
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5457
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5458
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5459
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5460
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "input",
            "importance_rank": 5461
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5462
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5463
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5464
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": ">",
            "importance_rank": 5465
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5466
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5467
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "input",
            "importance_rank": 5468
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5469
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5470
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5471
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": ">",
            "importance_rank": 5472
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5473
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5474
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "output",
            "importance_rank": 5475
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "∗",
            "importance_rank": 5476
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "/",
            "importance_rank": 5477
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "{",
            "importance_rank": 5478
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5479
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5480
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "{",
            "importance_rank": 5481
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "}",
            "importance_rank": 5482
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5483
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": ">",
            "importance_rank": 5484
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5485
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": ">",
            "importance_rank": 5486
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "// Iterate across the symbols from lowest frequency to highest",
            "importance_rank": 5487
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "// Assign them largest bit length to smallest",
            "importance_rank": 5488
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "<",
            "importance_rank": 5489
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "{",
            "importance_rank": 5490
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "{",
            "importance_rank": 5491
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "//ﬁnd the next non",
            "importance_rank": 5492
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "−",
            "importance_rank": 5493
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "zero bit length",
            "importance_rank": 5494
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "{",
            "importance_rank": 5495
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "−−",
            "importance_rank": 5496
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "// n is the number of symbols with encoded length i",
            "importance_rank": 5497
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "}",
            "importance_rank": 5498
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "}",
            "importance_rank": 5499
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "//assign symbol k to have length bits",
            "importance_rank": 5500
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "−−",
            "importance_rank": 5501
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "//keep assigning i bits until we have counted oﬀ n symbols",
            "importance_rank": 5502
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "}",
            "importance_rank": 5503
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "section_title": "}",
            "importance_rank": 5504
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5505
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": ">",
            "importance_rank": 5506
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "−−",
            "importance_rank": 5507
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "{",
            "importance_rank": 5508
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "<",
            "importance_rank": 5509
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "{",
            "importance_rank": 5510
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "}",
            "importance_rank": 5511
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "}",
            "importance_rank": 5512
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "∀",
            "importance_rank": 5513
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "i >",
            "importance_rank": 5514
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": ",",
            "importance_rank": 5515
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "i",
            "importance_rank": 5516
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "i",
            "importance_rank": 5517
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "−",
            "importance_rank": 5518
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "i",
            "importance_rank": 5519
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "−",
            "importance_rank": 5520
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "section_title": "<<",
            "importance_rank": 5521
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 218,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5522
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5523
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<",
            "importance_rank": 5524
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": ">",
            "importance_rank": 5525
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5526
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5527
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "input",
            "importance_rank": 5528
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5529
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5530
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5531
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5532
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "input",
            "importance_rank": 5533
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5534
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5535
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<",
            "importance_rank": 5536
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": ">",
            "importance_rank": 5537
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5538
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5539
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "output",
            "importance_rank": 5540
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "∗",
            "importance_rank": 5541
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "/",
            "importance_rank": 5542
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "{",
            "importance_rank": 5543
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "// Computes the initial codeword value for a symbol with bit length i",
            "importance_rank": 5544
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<",
            "importance_rank": 5545
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "{",
            "importance_rank": 5546
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "−",
            "importance_rank": 5547
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "−",
            "importance_rank": 5548
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5549
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "// std::cout",
            "importance_rank": 5550
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5551
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "c.to string(2)",
            "importance_rank": 5552
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5553
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "” with length ”",
            "importance_rank": 5554
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5555
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "i",
            "importance_rank": 5556
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5557
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "”",
            "importance_rank": 5558
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "\\",
            "importance_rank": 5559
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "n”;",
            "importance_rank": 5560
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "}",
            "importance_rank": 5561
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<",
            "importance_rank": 5562
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "{",
            "importance_rank": 5563
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "//if symbol has 0 bits, it doesn’t need to be encoded",
            "importance_rank": 5564
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "{",
            "importance_rank": 5565
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "// std::cout",
            "importance_rank": 5566
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5567
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "ﬁrst codeword[length].to string(2)",
            "importance_rank": 5568
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5569
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "”",
            "importance_rank": 5570
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "\\",
            "importance_rank": 5571
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "n”;",
            "importance_rank": 5572
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": ">>",
            "importance_rank": 5573
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "−",
            "importance_rank": 5574
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "// std::cout",
            "importance_rank": 5575
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5576
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "out reversed.to string(2)",
            "importance_rank": 5577
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5578
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "”",
            "importance_rank": 5579
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "\\",
            "importance_rank": 5580
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "n”;",
            "importance_rank": 5581
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "<<",
            "importance_rank": 5582
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "}",
            "importance_rank": 5583
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "{",
            "importance_rank": 5584
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "}",
            "importance_rank": 5585
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "}",
            "importance_rank": 5586
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "section_title": "}",
            "importance_rank": 5587
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5588
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "<<",
            "importance_rank": 5589
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "<<",
            "importance_rank": 5590
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "<<",
            "importance_rank": 5591
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5592
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5593
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5594
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5595
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5596
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "section_title": "→",
            "importance_rank": 5597
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5598
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5599
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5600
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5601
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5602
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5603
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5604
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5605
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5606
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5607
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "\\",
            "importance_rank": 5608
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5609
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5610
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "\\",
            "importance_rank": 5611
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "}",
            "importance_rank": 5612
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5613
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5614
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5615
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5616
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5617
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5618
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5619
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5620
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5621
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5622
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "}",
            "importance_rank": 5623
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "}",
            "importance_rank": 5624
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "}",
            "importance_rank": 5625
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5626
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "\\",
            "importance_rank": 5627
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5628
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5629
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": ">",
            "importance_rank": 5630
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "∗",
            "importance_rank": 5631
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "<",
            "importance_rank": 5632
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "{",
            "importance_rank": 5633
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "section_title": "}",
            "importance_rank": 5634
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5635
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "<",
            "importance_rank": 5636
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5637
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5638
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗",
            "importance_rank": 5639
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗ \\",
            "importance_rank": 5640
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5641
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "{",
            "importance_rank": 5642
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗\\",
            "importance_rank": 5643
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5644
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗\\",
            "importance_rank": 5645
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "}",
            "importance_rank": 5646
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "{",
            "importance_rank": 5647
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗\\",
            "importance_rank": 5648
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5649
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗∗\\",
            "importance_rank": 5650
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "}",
            "importance_rank": 5651
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "\\",
            "importance_rank": 5652
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "section_title": "}",
            "importance_rank": 5653
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5654
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "⃝",
            "importance_rank": 5655
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "11.3",
            "importance_rank": 5656
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "Conclusion",
            "importance_rank": 5657
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "O",
            "importance_rank": 5658
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "n",
            "importance_rank": 5659
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "section_title": "⃝",
            "importance_rank": 5660
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 224,
            "section_title": "HUFFMAN ENCODING",
            "importance_rank": 5661
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Bibliography",
            "importance_rank": 5662
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of the International Symposium on Field Programmable Gate Arrays (FPGA)",
            "importance_rank": 5663
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "SystemC",
            "importance_rank": 5664
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of Design SuperCon",
            "importance_rank": 5665
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of the International Field Programmable Logic and",
            "importance_rank": 5666
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Applications Conference (FPL)",
            "importance_rank": 5667
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "AMBA AXI and ACE Protocol Speciﬁcation",
            "importance_rank": 5668
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of the International Symposium on Field Pro-",
            "importance_rank": 5669
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "grammable Gate Arrays (FPGA)",
            "importance_rank": 5670
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of the International Conference on Application-speciﬁc Systems,",
            "importance_rank": 5671
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Architectures and Processors (ASAP)",
            "importance_rank": 5672
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Proceedings of the International Field Programmable Logic and Applications",
            "importance_rank": 5673
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "Conference (FPL)",
            "importance_rank": 5674
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "IEEE Design",
            "importance_rank": 5675
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "section_title": "and Test of Computers",
            "importance_rank": 5676
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5677
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5678
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Proceedings of the International Symposium on Field",
            "importance_rank": 5679
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Programmable Gate Arrays (FPGA)",
            "importance_rank": 5680
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Proceedings of the International Symposium on Field Programmable",
            "importance_rank": 5681
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Gate Arrays (FPGA)",
            "importance_rank": 5682
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "IEEE Transactions on",
            "importance_rank": 5683
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Computer-aided Design of Integrated Circuits and Systems (TCAD)",
            "importance_rank": 5684
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Mathematics of Computation",
            "importance_rank": 5685
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Introduction to",
            "importance_rank": 5686
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Algorithms, Third Edition",
            "importance_rank": 5687
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "High-level synthesis",
            "importance_rank": 5688
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Proceedings of the International Symposium on Field Programmable Gate Arrays (FPGA)",
            "importance_rank": 5689
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Communications of the ACM",
            "importance_rank": 5690
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "IEEE Transactions",
            "importance_rank": 5691
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "on Computers",
            "importance_rank": 5692
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Proceed-",
            "importance_rank": 5693
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "ings of the International Field Programmable Logic and Applications Conference (FPL)",
            "importance_rank": 5694
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "IEEE Transactions on Computers",
            "importance_rank": 5695
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Numerical",
            "importance_rank": 5696
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "recipes in C",
            "importance_rank": 5697
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "High-Level Synthesis:",
            "importance_rank": 5698
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Introduction to Chip and System Design",
            "importance_rank": 5699
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "section_title": "Proceedings of the November 7-10, 1966, fall joint computer conference",
            "importance_rank": 5700
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5701
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5702
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Proceedings of the International Field Programmable Logic and",
            "importance_rank": 5703
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Applications Conference (FPL)",
            "importance_rank": 5704
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "SPARK: A Parallelizing",
            "importance_rank": 5705
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Approach to the High-level Synthesis of Digital Circuits",
            "importance_rank": 5706
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Reconﬁgurable computing: the theory and practice of FPGA-",
            "importance_rank": 5707
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "based computation",
            "importance_rank": 5708
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "ACM Trans. Graph.",
            "importance_rank": 5709
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "ASSP Magazine, IEEE",
            "importance_rank": 5710
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Proceedings",
            "importance_rank": 5711
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "of the IRE",
            "importance_rank": 5712
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Arithmetic optimization techniques for",
            "importance_rank": 5713
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "hardware and software design",
            "importance_rank": 5714
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Behavioral Synthesis: Digital System Design using the Synopsys Behavioral",
            "importance_rank": 5715
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Compiler",
            "importance_rank": 5716
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "The art of computer programming: sorting and searching",
            "importance_rank": 5717
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "ACM Transactions on Reconﬁgurable Tech-",
            "importance_rank": 5718
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "nology and Systems (TRETS)",
            "importance_rank": 5719
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Proceedings of the International Field Pro-",
            "importance_rank": 5720
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "grammable Logic and Applications Conference (FPL)",
            "importance_rank": 5721
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "IEEE Transactions on Acoustics, Speech, and Signal Processing (TASSP)",
            "importance_rank": 5722
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Structure and Interpretation of Signals and Systems,",
            "importance_rank": 5723
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Second Edition",
            "importance_rank": 5724
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "Plato and the Nerd: The Creative Partnership of Humans and Technol-",
            "importance_rank": 5725
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "section_title": "ogy",
            "importance_rank": 5726
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5727
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5728
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Third",
            "importance_rank": 5729
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Caltech Conference On VLSI",
            "importance_rank": 5730
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "IEEE Transactions on Computer-aided Design of Integrated",
            "importance_rank": 5731
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Circuits and Systems (TCAD)",
            "importance_rank": 5732
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Distributed Embedded",
            "importance_rank": 5733
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Systems: Design, Middleware and Resources",
            "importance_rank": 5734
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Proceedings",
            "importance_rank": 5735
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "of the International Conference on Field-Programmable Technology (FPT)",
            "importance_rank": 5736
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Proceedings of the International Conference on Application-speciﬁc Systems,",
            "importance_rank": 5737
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Architectures and Processors (ASAP)",
            "importance_rank": 5738
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Proceedings of the International Symposium on Field Programmable Gate Arrays",
            "importance_rank": 5739
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "(FPGA)",
            "importance_rank": 5740
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Introduction to VLSI systems",
            "importance_rank": 5741
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Synthesis and optimization of digital circuits",
            "importance_rank": 5742
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Computer Design, 2006. ICCD 2006. International",
            "importance_rank": 5743
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Conference on",
            "importance_rank": 5744
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Guidelines for the Use of the C Language in Critical Systems",
            "importance_rank": 5745
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "The VLDB Journal—The International",
            "importance_rank": 5746
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "Journal on Very Large Data Bases",
            "importance_rank": 5747
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "International Journal of Reconﬁgurable Computing",
            "importance_rank": 5748
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "SPAA ’91: Proceedings of the third annual ACM symposium on Parallel algorithms and",
            "importance_rank": 5749
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "architectures",
            "importance_rank": 5750
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "section_title": "JPEG: Still image data compression standard",
            "importance_rank": 5751
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5752
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5753
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Algorithms in C",
            "importance_rank": 5754
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Proceedings of the International Symposium",
            "importance_rank": 5755
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "on Field Programmable Gate Arrays (FPGA)",
            "importance_rank": 5756
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Communications of the ACM",
            "importance_rank": 5757
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "UltraScale",
            "importance_rank": 5758
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Architecture",
            "importance_rank": 5759
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Conﬁgurable",
            "importance_rank": 5760
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Logic",
            "importance_rank": 5761
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Block",
            "importance_rank": 5762
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "(UG574)",
            "importance_rank": 5763
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Vivado Design Suite User Guide: High-Level Synthesis (UG902)",
            "importance_rank": 5764
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "UltraScale",
            "importance_rank": 5765
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Architecture",
            "importance_rank": 5766
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "Conﬁguration",
            "importance_rank": 5767
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "section_title": "(UG570)",
            "importance_rank": 5768
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 230,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5769
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 230,
            "section_title": "BIBLIOGRAPHY",
            "importance_rank": 5770
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 231,
            "section_title": "Glossary",
            "importance_rank": 5771
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 232,
            "section_title": "Glossary",
            "importance_rank": 5772
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 233,
            "section_title": "Glossary",
            "importance_rank": 5773
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 233,
            "section_title": "Glossary",
            "importance_rank": 5774
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 234,
            "section_title": "Glossary",
            "importance_rank": 5775
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 234,
            "section_title": "Glossary",
            "importance_rank": 5776
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Acronyms",
            "importance_rank": 5777
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5778
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5779
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5780
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5781
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5782
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5783
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5784
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5785
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5786
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5787
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5788
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5789
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5790
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5791
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "section_title": "Glossary:",
            "importance_rank": 5792
        }
    ],
    "sub_section_analysis": [
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": " There is substantial opportunity to exploit parallelism in the matrix-multiplication example. We start by focusing on the inner loop. The expression sum += V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Static analysis of performance and resource usage"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " array. To increase performance further we can apply techniques that are very similar to the matrix- vector multiply. Previously, we observed that increasing performance of matrix-vector multiply required partitioning the M[][] array. Unfortunately, representing the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " Before we get into the optimizations, it is necessary to deﬁne precise metrics. When deriving the performance of a design, it is important to carefully state the metric. For instance, there are many diﬀerent ways of specifying how “fast” your design runs. For example, you could say that it operates at"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " = 11 multiply accumulate operations for each execution of ﬁr . Therefore, if your metric of interest is MACs/second, you should calculate the task latency for ﬁr in terms of seconds, and then divide this by 11 to get the time that it takes to perform the equivalent of one MAC operation. Calculating performance becomes even more complicated as we perform pipelining and other optimizations. In this case, it is important to understand the diﬀerence between task interval and task latency. It is a good time to refresh your understanding of these two metrics of performance. This was discussed in Chapter 1.4. And we will continue to discuss how diﬀerent optimizations eﬀect diﬀerent performance metrics."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " . As with standard cores, accelerator cores are primarily synchronous circuits that can be characterized by a clock period timing constraint. In contrast, however, they are almost inevitably constructed for a speciﬁc application by a system designer. These are often the “secret sauce” and used to diﬀerentiate your system from others. Ideally a designer can quickly and easily generate high- performance custom cores, perform a design space exploration about feasible designs, and integrate these into their systems in a short timeframe. This book will focus on the development of custom cores using HLS in a fast, eﬃcient and high performance manner. When integrating a design as in Figure 1.6, there are two common design methodologies. One methodology is to treat HLS-generated accelerator cores just like any other cores. After creating the appropriate accelerator cores using HLS, the cores are composed together (for instance, in a tool such as Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " HLS is able to eliminate most of the read operations of the out[] array within the body of the loop, but we still only achieve a loop II of 2. In this case the ﬁrst load in the body of the loop is still not able to be removed. We can, however, rewrite the code manually to use a local variable rather than read from the out[] array. Ideally, when we unroll the inner loop, we the perform more operations per clock and reduce the interval to compute the function. If we unroll by a factor of two, then the performance doubles. A factor of four would increase the performance by factor four, i.e., the performance scales in a linear manner as it is unrolled. While this is mostly the case, as we unroll the inner loop there are often some aspects of the design that don’t change. Under most circumstances, such as when the iteration space of loops execute for a long time, these aspects represent a small ﬁxed overhead which doesn’t contribute signiﬁcantly to the performance of the overall function. However, as the number of loop iterations decreases, these ﬁxed portions of the design have more impact. The largest ﬁxed component of a pipelined loop is the depth of the pipeline itself. The control logic generate by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "refined_text": " Now that we have a method to gather all of the performance and utilization estimates from the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": " HLS tool. This is particularly important for us in order to get precise performance results. The task interval and task latency depends upon the input data. The less sparse the matrix, the more computation that must be performed. The cosimulation provides a precise trace of execution using the given testbench. This allows the tool to compute the clock cycles to include in the performance results. Finally, we discuss optimizing the code using loop optimizations and array partitioning. 128"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " This function prototype forces an in-place implementation. That is, the output data is stored in the same array as the input data. This eliminates the need for additional arrays for the output data, which reduces the amount of memory that is required for the implementation. However, this may limit the performance due to the fact that we must read the input data and write the output data to the same arrays. Using separate arrays for the output data is reasonable if it can increase the performance. There is always a tradeoﬀ between resource usage and performance; the same is true here. The best implementation depends upon the application requirements (e.g., high throughput, low power, size of FPGA, size of the FFT, etc.). We start with code for an FFT that would be typical for a software implementation. Figure 5.5 shows a nested three for loop structure. The outer for loop, labeled stage loop implements one stage of the FFT during each iteration. There are"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " Study the eﬀects of loop unrolling and array partitioning on the performance and area. Plot the performance in terms of number of matrix vector multiply operations per second (throughput) versus the unroll and array partitioning factor. Plot the same trend for area (showing LUTs, FFs, DSP blocks, BRAMs). What is the general trend in both cases? Which design would you select? Why?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " 1.4.1 Performance Characterization Before we can talk about optimizing a design, we need to discuss the key criterion that are used to characterize a design. The computation time is a particularly important metric for design quality. When describing synchronous circuits, one often will use the number of clock cycles as a measure of performance. However, this is not appropriate when comparing designs that have diﬀerent clock rates, which is typically the case in HLS. For example, the clock frequency is speciﬁed as an input constraint to the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS tool provides an initial timing estimate relative to this clock target. However, some uncertainty in the performance of the circuit remains which is only resolved once the design is fully place and routed. While achieving higher frequencies are often critical for reaching higher performance, increasing the target clock frequency is not necessarily optimal in terms of an overall system. Lower frequencies give more leeway for the tool to combine multiple dependent operations in a single cycle, a process called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " Figure 4.14: The inner loop of matrix-vector multiply manually unrolled by a factor of two. The HLS tool can automatically unroll loops using the unroll directive. The directive takes a factor argument which is a positive integer denoting the number of times that the loop body should be unrolled. Manually divide M[][] and vector V in[] into separate arrays in the same manner as the directive array partition cyclic factor=2 . How do you have to modify the code in order to change the access patterns? Now manually unroll the loop by a factor of two. How do the performance results vary between the original code (no array partitioning and no unrolling), only performing array partitioning, and performing array partitioning and loop unrolling? Finally, use the directives to perform array partitioning and loop unrolling. How do those results compare to your manual results? In this code, we see that array partitioning often goes hand in hand with our choices of pipelining. Array partitioning by a factor of 2 enables an increase in performance by a factor of 2, which can be achieved either by partially unrolling the inner loop by a factor of 2 or by reducing the II of the outer loop by a factor of 2. Increasing performance requires a corresponding amount of array partitioning. In the case of matrix vector multiplication, this relationship is relatively straightforward since there is only one access to each variable in the inner loop. In other code, the relationship might be more complicated. Regardless, the goal of a designer is usually to ensure that the instantiated FPGA resources are used eﬃciently. Increasing performance by a factor of 2 should use approximately twice as many resources. Decreasing performance by a factor of 2 should use approximately half as many resources. 91"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " HLS tool can also generate higher performance pipelined and paral- lel architectures. One important class of architectures is called a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " 2048, etc. How does this eﬀect the resource usage and performance? How about the runtime of the tool? What is the best way to optimize for large large matrix sizes?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": " HLS logs to identify the adder recurrence) can we select an appropriate version of the parameter S that achieves II=1. Once we’ve determined S , we can run C/RTL cosimulation to determine the achieved performance on a set of benchmark test data. Because of the variable loop bounds, the achieved performance is data-dependent so we might have to explore diﬀerent values of S to determine the value that maximizes performance. Changing the target device or clock period might aﬀect all of these decisions! Although it may seem like high-level synthesis provides little assistance in solving this problem, it’s still much faster (and possible to easily script) compared to evaluating each new version with a new RTL design that must be veriﬁed! The behavior in Figure 6.8 is achieved when S is the same as the number of pipeline stages for the adder. What happens to the behavior when S is set larger? What happens to the behavior when is it set smaller? What happens when the target II is smaller than S ? What happens when the target II is larger?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " HLS shortly. This code is close to a “software” version. It can be optimized in many ways to increase its performance and reduce its area. We will discuss how to optimize this code later in the chapter."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " matrix? In order to eﬀectively optimize the design, we must consider every part of the code. The performance can only as good as the “weakest link” meaning that if there is a bottleneck the performance will take a signiﬁcant hit. The current version of the DFT function performs an in- place operation on the input and output data, i.e., it stores the results in the same array as the input data. The input array arguments sample real and sample imag eﬀectively act as a memory port. That is, you can think of these arguments arrays as stored in the same memory location. Thus, we can only grab one piece of data from each of these arrays on any given cycle. This can create a bottleneck in terms of parallelizing the multiplication and summation operations within the function. This also explains the reason why we must store all of the output results in a temporary array, and then copy all of those results into the “sample” arrays at the end of the function. We would not have to do this if we did not perform an in-place operation. Modify the DFT function interface so that the input and outputs are stored in separate arrays. How does this eﬀect the optimizations that you can perform? How does it change the performance? What about the area results?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " eliminating these function calls, since the inputs aren’t arbitrary. We will discuss these tradeoﬀs in more detail later. A sequential implementation of this code is show in Figure 4.16. What changes would this code require if you were to use a CORDIC that you designed, for example, from Chapter 3? Would changing the accuracy of the CORDIC core make the DFT hardware resource usage change? How would it eﬀect the performance? Implement the baseline code for the DFT using HLS. Looking at the reports, what is the relative cost of the implementation of the trignometric functions, compared to multiplication and addition? Which operations does it make more sense to try to optimize? What performance can be achieved by pipelining the inner loop?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " 1 we can change its data type which will result in smaller area and better performance than if we were to use the current int data type. We discuss data types and how to specify them in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " 4. In this cases, it may be desirable to implement a design with the absolute highest performance, which is generally achieved by applying the pipeline directive on the entire function. As the size of the arrays increase, in the range of 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " ( writeoutput )) (7.5) We need to keep Equation 7.5 in mind as we optimize the blockmatmul function. For example, assume that interval( partialsum ) is much larger than the other two portions of the function. Any performance optimizations that minimize interval( loadA ) and interval( writeoutput ) are useless since the function interval, i.e., interval( blockmatmul ) would not decrease. Thus, the designer should focus any performance optimization eﬀort to decrease interval( partialsum ), i.e., target performance optimizations on those three nested for loops. It is important to note that this only applies to performance optimizations. The designer can (and should) optimize the resource usage of these other two parts. In fact, they are ripe for such optimizations since reducing the resource usage often increases the interval and/or latency. In this case, it is ok to increase the interval as it will not eﬀect the overall performance of the blockmatmul function. In fact, the ideal case is to optimize all three parts of the function such that they all have the same interval, assuming that we can easily tradeoﬀ between the interval and resource usage (which is not always the case). The testbench for the blockmatmul function is shown in Figures 7.6 and 7.7. We split it across two ﬁgures to make it more readable since it is a longer piece of code. Up until this point, we have not shown the testbenches. We show this testbench for several reasons. First, it provides insight into how the blockmatmul function works. In particular, it partitions the input matrices into blocks and feeds them into the blockmatmul function in a block by block manner. Second, it gives a complex usage scenario for using stream template for simulation. Finally, it gives the reader an idea about how to properly design testbenches. The matmatmul sw function is a simple three for loop implementation of matrix multiplication. It takes two two-dimensional matrices as inputs, and outputs a single two-dimensional matrix. It is very similar to what we have seen in the matrixmul function in Figure 7.1. We use this to compare our results from the blocked matrix multiplication hardware version. Let us focus on the ﬁrst half of the testbench shown in Figure 7.6. The beginning block of code initializes variables of the rest of the function. The variable fail keeps track of whether the matrix multiplication was done correctly. We will check this later in the function. The variables strm matrix1 and strm matrix2 are hls:stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " where the blocks on the diagonal are non-zero and blocks oﬀ the diagonal are zero. Yet another reason is that the blocked decomposition results in lots of smaller problems operating on smaller sets of data. This increases the data locality of a computation. In processor systems, it is common to choose block sizes that conveniently match the memory hierarchy of a processor or the natural size of the vector data types supported by the processor. Similarly, in FPGAs we can choose the blocking sizes to match the available on-chip memory size or to the number of multiply-add operators that we can budget to support. Until now, we have assumed that accelerators always have all of their data available before the start of a task. However in designs dealing with large datasets, such as large matrices, this can sometimes be an unneeded constraint. Since it is unlikely that our accelerator will be able to process all input data immediately, we can build an accelerator that receives input data only right before it is needed. This allows an accelerator to more eﬃciently use the available on-chip memory. We call this a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , 15(1):65–82, 1982. [4] Raymond J. Andraka. Building a high performance bit-serial processor in an FPGA. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "refined_text": " Optimize the code using loop optimizations and array partitioning, i.e., create a set of designs using the array partition , pipeline , and unroll directives. Were you able to achieve better results than by using the pipeline and unroll directives alone? What was the best strategy for performing design space exploration using these directives? What was your best design in terms of performance? What was the best design that provides a good tradeoﬀ between resource utilization and performance? Many times the best designs are only possible by performing code restructuring. Although Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " (respectively) assuming the length of the vector is 1. The key to the CORDIC is doing all of this in a computationally eﬃcient manner. and logic blocks) and reduced performance. We provide a background on number representation and arbitrary data types in Chapter 3.5.5."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 95,
            "refined_text": " sample[i] sample[i] double sin/cos int to double double double double double Compute w Run inner loop Run remaining Copy Result iterations double int to double Compute w CORDIC x + temp[0] temp[1] temp[2] temp[N-1] sample[0] sample[1] sample[2] sample[N-1] x i w / N x j 2 ∏ Figure 4.16: A high level architectural diagram of the DFT as speciﬁed in the code from Figure 4.15. This is not a comprehensive view of the architecture, e.g., it is missing components related to updating the loop counters i and j . It is meant to provide an approximate notion of how this architecture will be synthesized. Here we’ve assumed that ﬂoating point operators take 4 clock cycles. 95"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " times, once for each element. In practice, the cost of inserting an element can be signiﬁcant, depending on the data structure being sorted. In processor systems a variety of factors inﬂuence overall performance, such as memory locality when processing large data sets or their ability to easily parallelize across multiple cores. In HLS, we have similar considerations where it is common to trade oﬀ increased resource usage for reduced processing time. In many cases, this might require a variety of algorithms and implementation techniques in order to obtain the best design. The best techniques for making these tradeoﬀs are an area of active research[45, 54, 49]. Characteristics other than performance also aﬀect the choice of sorting algorithms. For instance, we might consider:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE iterations. Thus, we should focus our optimizations on the middle part, i.e., the partialsum nested for loops. The common starting point for optimizations of nested for loops is to pipeline the innermost for loop. Then, if that does not require too many resources, the designer can move the pipeline directive into higher level for loops. Whether the resulting design consume too many resource depends upon the speciﬁed BLOCK SIZE ; if this is small, then it is likely worth moving the pipeline directive. It may even be worthwhile to move it inside the outermost for loop. This will unroll the two inner for loops and thus very likely increase the resource usage by a substantial amount. However, it will increase the performance. How does changing the BLOCK SIZE eﬀect the performance and resource usage? How about changing the SIZE constant? How does moving the pipeline directive across the three diﬀerent nested for loops in the partialsum portion of the function change the performance and resource usage? The dataﬂow directive at the start of the function creates a pipeline across the portions of the function, i.e., the loadA for loop, the partialsum nested for loop, and the writeoutput for loop. 139"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 188,
            "refined_text": " relationships between i1 , i2 , and i3 ? If we restrict the allowed values of the parameter SIZE can the code be simpliﬁed? What is the aﬀect on the resulting HLS generated circuit? The merge() function performs the “two ﬁnger” algorithm on two subarrays within the in[] array. The function takes input in the in[] array and produces output in the out[] array. The function also takes as input variables i1 , i2 , and i3 which describe the extent of the two subarrays to be merged. One subarray starts at index i1 and includes all the elements before i2 and the second subarray starts at index i2 and includes the elements up to i3 . The merged output subarray will be stored from index i1 up to i3 in out[] . The merge() function consists of a single loop which iterates over the elements being stored into out[] . Each iteration places an element into its correctly sorted location in out[] . The variables f1 and f2 within the function correspond to the position of the ﬁngers for each subarray. The if condition selects the smaller of in[f1] or in[f2] to copy to the next sorted position in out[] . However, the if condition is more complex since it has to deal with several special cases. One case is where f1 == i2 and we have run out of elements to consider for in[f1] , in which case we must select in[f2] as the smallest element. Alternatively, if f2 == i3 , then we have run out of elements to consider for in[f2] , in which case we must select in[f1] as the smallest element. What happens to the in[] array over the course of the computation? Describe the state of the elements in the in[] array after each iteration of the outer for loop. What is the ﬁnal order of the elements in the in[] array when merge sort() returns? The performance report after synthesis may not be able to determine the number of cycles for the latency and interval. Why is that the case? What are appropriate min , max , and avg values to provide in a loop tripcount directive(s)? The code is not particularly optimized for any particular high-level synthesis (HLS) implemen- tation. The best starting point for optimization is by adding directives. Given that we have several nested for loops, we generally look ﬁrst at optimizing the inner loops. Optimizations of inner loops are usually much more signiﬁcant than optimizations of outer loops, which are executed relatively rarely. By this point, you should be familiar with the common pipeline and unroll directives for loop optimization. Perform diﬀerent optimizations using the pipeline and unroll directives on the for loops. What provides the best performance? Which gives the best tradeoﬀ between resource utilization and performance? What aspects of the code prevent higher performance? Are these aspects fundamental to the algorithm, or only because of the way the algorithm is captured in the code? Pipelining and unrolling can be hindered by resource constraints; in particular, we must carefully consider the number of memory ports for the arrays. The arrays in this code seem relatively straightforward as they are both one-dimensional. Yet, the designer must carefully consider the access patterns to insure that performance optimizations match with the resource constraints. 188"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "refined_text": " correspond to reducing the bandwidth of the output signal. In essence, it is acting like a low pass ﬁlter (though not a very optimal one). Intuitively, this should make sense. As we average over larger and larger number of samples, we are eliminating higher frequency variations in the input signal. That is, “smoothing” is equivalent to reducing higher frequencies. The moving average ﬁlter is optimal for reducing white noise while keeping the sharpest step response, i.e., it creates the lowest noise for a given edge sharpness. Note that in general, ﬁlter coeﬃcients can be crafted to create many diﬀerent kinds of ﬁlters: low pass, high pass, band pass, etc.. In general, a larger value of number of taps provides more degrees of freedom when designing a ﬁlter, generally resulting in ﬁlters with better characteristics. There is substantial amount of literature devoted to generating ﬁlter coeﬃcients with particular characteristics for a given application. When implementing a ﬁlter, the actual values of these coeﬃcients are largely irrelevant and we can ignore how the coeﬃcients themselves were arrived at. However, as we saw with the moving average ﬁlter, the structure of the ﬁlter, or the particular coeﬃcients can have a large impact on the number of operations that need to be performed. For instance, symmetric ﬁlters have multiple taps with exactly the same value which can be grouped to reduce the number of multiplications. In other cases, it is possible to convert the multiplication by a known constant ﬁlter coeﬃcient into shift and add operations [34]. In that case, the values of the coeﬃcients can drastically change the performance and area of the ﬁlter implementation [52]. But we will ignore that for the time being, and focus on generating architectures that have constant coeﬃcients, but do not take advantage of the values of the constants."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": " HLS tool. This is necessary to derive the performance characteristics for the diﬀerent SpMV designs. Since the execution time depends upon the number of entries in the sparse matrix, we must use input data in order to determine the clock cycles for the task interval and task latency."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS for the RTL implementation ﬂow are solely based on the target clock period. It is also necessary to put the task that you are performing in context with the performance metric that you are calculating. In our example, each execution of the ﬁr function results in one output sample. But we are performing"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " comparisons) when operating on sorted data. We showed several ways of parallelizing Insertion sort which can increase performance at the expense of us- ing more hardware resources. Because of bubbles in the statically scheduled pipeline, we end up needing roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " c[0]; shift reg[0] = x; Figure 2.3: Removing the conditional statement from the for loop creates a more eﬃcient hardware implementation. periods, overall performance optimization and determining the optimal target clock period still requires some creativity on the part of the user. For the most part, we advocate sticking within a small subset of clock periods. For example, in the projects we suggest that you set the clock period to 10 ns and focus on understanding how other optimizations, such as pipelining, can be used to create diﬀerent architectures. This 100 MHz clock frequency is relatively easy to achieve, yet it is provides a good ﬁrst order result. It is certainly possible to create designs that run at a faster clock rate. 200 MHz and faster designs are possible but often require more careful balance between clock frequency targets and other optimization goals. You can change the target clock period and observe the diﬀerences in the performance. Unfortunately, there is no good rule to pick the optimal frequency. Vary the clock period for the base FIR architecture (Figure 2.1) from 10 ns to 1 ns in increments of 1 ns. Which clock period provides the best performance? Which gives the best area? Why do you think this is the case? Do you see any trends?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "refined_text": " values to strm matrix1 . Recall that the values from the A matrix are used across several calls to the blockmatmul function. See Figure 7.3 for a discussion on this. These if statements are placed there to highlight the fact that you should not continually write the same data over and over. This is important because the internal code of the blockmatmul only does a read of this data when it is necessary. So if we continued to write this consistently, the code would not function correctly do to the fact that this stream is written to more than it is read from. Now that the input data, the testbench calls the blockmatmul function. After the function call, it receives the partial computed results in the block out variable. The next two for loops but these results into the appropriate locations in the matrix hwout array. After this complex set of for loops, the block matrix multiplication is complete. And the testbench continues to insure that the code is written correctly. It does this by comparing the results from the multiple calls to the blockmatmul function to results that were computed in the matmatmul sw , which is a much simpler version of matrix matrix multiplication. After this function call, the testbench iterates through both two-dimensional matrices matrix hwout and matrix swout and makes sure that all of the elements are equivalent. If there is one or more element that is not equal, it sets the fail ﬂag equal to 1. The testbench completes by printing out failed or passed . It is important that note that you cannot directly compare the performance of the function blockmatmul with that of code for matrix multiplication, such as the code in Figure 7.1. This is because it takes multiple calls to the blockmatmul function in order to perform the entire matrix multiplication. It is important to always compare apples to apples. Derive a function to determine the number of times that blockmatmul must be called in order to complete the entire matrix multiplication. This function should be generic, e.g., it should not be assume a speciﬁc value of BLOCK SIZE or size of the matrix (i.e., SIZE ). Compare the resource usage of block matrix multiplication versus matrix multiplication. How do the resources change as the size of the matrices increases? Does the block size play a role in the resource usage? What are the general trends, if any? Compare the performance of block matrix multiplication versus matrix multiplication. How does the performance change as the size of the matrices increases? Does the block size play a role in the performance? Pick two architectures with similar resource usage. How does the performance for those architectures compare?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS tool more informa- tion about the number of times a loop is executed which can be used by the tool to analyze the performance of the design. It takes three optional arguments min , max , and average . In this code, we could add a directive to dft loop . By applying this directive, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "refined_text": " HLS will automatically ﬂatten perfect loop nests. In this case, however, since the code does not contain a perfect loop nest, we can resort to ﬂattening the loops manually. Code resulting from manually ﬂattening the merge arrays loop with the loop inside the merge() function is shown in Figure 10.14. Note that one advantage of this code is that the merge arrays loop also has a constant number of loop iterations, making understanding performance much easier. Estimate the performance of the code in Figure 10.14. Even though the inner loops have achieved a loop II of 1, is the design using hardware eﬃciently? Is there a way to further reduce the latency of the merge sort() function to the point where it is using approximately"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " Synthesize a number of designs by varying the unroll factor for the MAC loop. How does the performance change? How does the unroll factor number aﬀect the number of resources? Compare these results with the trends that you found by unrolling the TDL ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " HLS is unable to perform this analysis. What are the preconditions for the spmv function to work correctly? Prove that given these preconditions, the body of the inner loop does, in fact, execute exactly once for each non-zero element in the matrix. There are several ways to leverage the tool to derive some performance estimates, however. One method is to provide the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " If you directly synthesize this code, you will get results for the clock period and utilization. However, you will not get the number of clock cycles either in terms of task latency or initiation interval. This is because this depends upon the input data, which is external to the spmv function itself. Primarily, the performance depends on the number of times the body of the inner loop is executed, which is equal to the number of non-zero elements in M . We know that the number of non-zero elements is limited by the constant NNZ in the code, but it is possible to call the code with matrices of diﬀerent sizes, so the actual number of iterations is data-dependent. In addition, the performance may vary depending on the location of the non-zero elements and the optimization directives utilized during synthesis. To make matters worse, the number of iterations depends on the input in a complex way and many potential inputs don’t actually represent valid matrices. Thus, it is very diﬃcult for a tool to determine the total number of clock cycles for the spmv function without complex analysis and additional information. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " The interface must be precisely deﬁned. The primary output of an HLS tool is a RTL hardware design that is capable of being synthesized through the rest of the hardware design ﬂow. Additionally, the tool may output testbenches to aid in the veriﬁcation process. Finally, the tool will provide some estimates on resource usage and performance. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " operation can begin in Cycle 2; assume that it takes three cycles to complete, i.e., it is ﬁnished is Cycle 4. The + operation is chained to start and complete during Cycle 4. The entire body of the MAC for loop takes 4 cycles to complete. There are a number of performance metrics associated with a for loop. The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 3,
            "refined_text": " Preface 7 Acknowledgements 9 1 Introduction 11 1.1 High-level Synthesis (HLS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 1.2 FPGA Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 1.3 FPGA Design Process . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 1.4 Design Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.4.1 Performance Characterization . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 1.4.2 Area/Throughput Tradeoﬀs . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 1.4.3 Restrictions on Processing Rate . . . . . . . . . . . . . . . . . . . . . . . . . . 26 1.4.4 Coding Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 1.5 Restructured Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 1.6 Book Organization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2 Finite Impulse Response (FIR) Filters 31 2.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 2.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 2.3 Base FIR Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 2.4 Calculating Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 2.5 Operation Chaining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 2.6 Code Hoisting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 2.7 Loop Fission . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 2.8 Loop Unrolling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 2.9 Loop Pipelining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 2.10 Bitwidth Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 2.11 Complex FIR Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 2.12 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 3 CORDIC 55 3.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 3.2 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 3.3 Calculating Sine and Cosine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 3.4 Cartesian to Polar Conversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 3.5 Number Representation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 3.5.1 Binary and Hexadecimal Numbers . . . . . . . . . . . . . . . . . . . . . . . . 67 3.5.2 Negative numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "refined_text": " External Memory High Performance Interconnect Low Performance Interconnect Accelerator 1 Accelerator 2 Video Input Video Output Control Accelerator 3 Console Network Storage Interface Interface Interface Processor Figure 1.6: A block diagram showing a hypothetical embedded FPGA design, consisting of I/O interface cores (shown in blue), standard cores (shown in green), and application speciﬁc accelerator cores (shown in purple). Note that accelerator cores might have streaming interfaces (Accelerator 2), memory-mapped interfaces (Accelerator 3), or both (Accelerator 1)."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " Loop Interval = 1 In Out Figure 8.2: Code for implementing an optimized preﬁx sum, and its accompanying behavior. is often advantageous in processor code, but in HLS designs it is often more signiﬁcant since other operations are rarely a performance bottleneck. Code that does this is shown in Figure 8.2. You might ask why the compiler is not able to optimize the memory loads and stores auto- matically in order to improve the II of the design. It turns out that Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": " There are a number of options when mapping vari- ables to hardware. The variable could simply be a set of wires (if its value never needs saved across a cycle), a register, RAM or FIFO. All of these options provide tradeoﬀs between performance and area. Another major factor is the amount of parallelism that is available within the code. Purely sequential code has few options for implementation. On the other hand, code with a signiﬁcant amount of parallelism has implementation options that range from purely sequentially to fully parallel. These options obviously have diﬀerent area and performance. We will look at how both memory conﬁgurations and parallelism eﬀect the hardware implementation for the matrix-vector implementation of the DFT. Figure 4.5 shows a sequential architecture for matrix-vector multiplication with one multiply and one addition operator. Logic is created to access the V In and M arrays which are stored in BRAMs. Each element of V Out is computed and stored into the BRAM. This architecture is essentially what will result from synthesizing the code from Figure 4.4 with no directives. It does not consume a lot of area, but the task latency and task interval are relatively large."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " HLS tool to co-optimize a particular function within its parent function. This will add the code from that function into the parent function and eliminate the hierarchical structure. While this can increase the potential for beneﬁts in performance and area, it also creates a large amount of code that the tool must synthesize. That may take a long time, even fail to synthesize, or may result in a non-optimal design. Therefore, use the inline directive carefully. Also note that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS performs in order to optimize the ﬁnal design. It is not something that a designer has much control over, but it is important that the designer understands how this works especially with respect to performance. Consider the multiply accumulate operation that is done in a FIR ﬁlter tap. Assume that the add operation takes 2 ns to complete, and a multiply operation takes 3 ns. If we set the clock period to 1 36"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 90,
            "refined_text": " HLS can implement the operations in both expressions in parallel, corresponding to two iterations of the original loop. Note that without appropriate array partitioning, unrolling the inner loop may oﬀer no increase in performance, as the number of concurrent read operations is limited by the number of ports to the memory. In this case, we can store the data from the even columns in one BRAM and the data from the odd columns in the other. This is due to the fact that the unrolled loop is always performing one even iteration and one odd iteration. 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " . This can sometimes allow higher performance by enabling improved logic synthesis optimizations and increasing the amount of code that can ﬁt in a device. Improved operation chaining can also improve (i.e., lower) the initiation interval of pipelines with recurrences. In general providing a constrained, but not over constrained target clock latency is a good option. Something in the range of 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " is another important performance metric. It is deﬁned as the number of clock cycles until the next iteration of the loop can start. In our example, the loop II is 1, which means that we start a new iteration of the loop every cycle. This is graphically depicted in Figure 2.7 b). The II can be explicitly set using the directive. For example, the directive #pragma HLS pipeline II=2 informs the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , 2014. [49] Janarbek Matai, Dustin Richmond, Dajung Lee, Zac Blair, Qiongzhi Wu, Amin Abazari, and Ryan Kastner. Resolve: Generation of high-performance sorting architectures from high-level synthesis. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " HLS should inline particular functions. In this case, INLINE oﬀ ensures that this function will not be inlined and will appear as a module in the generated register-transfer level (RTL) design. In this case, disabling inlining allows us to get a performance and resource usage for this function and to ensure that it will be implemented as a process in the toplevel dataﬂow design. 11.2.2 Sort The sort function, shown in Figure 11.6, orders the input symbols based on their frequency values. The function itself consists of two for loops, labeled copy in to sorting and radix sort . The copy in to sorting loop moves input data from the in array into the sorting array. This ensures that the in array is read-only to meet the requirements of the dataﬂow directive used at the toplevel. The sorting function reads and writes to the sorting array throughout its execution. Even for simple loops like this, it is important to use the pipeline directive to generate the most eﬃcient result and accurate performance estimates. The radix sort loop implements the core radix-sorting algorithm. In general, radix sorting algo- rithms sort data by considering one digit or group of bits at a time. The size of each digit determines the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 90,
            "refined_text": " V In[1] V In[2] V In[3] V In[4] V In[5] V In[6] V In[7] V In[0] M[][0] M[][2] M[][1] M[][3] M[][4] M[][5] M[][6] M[][7] i To Adders To Adders To Adders M[][0-2] M[][6-7] M[][3-5] i,j%3 To Adders V In[0-2] V In[3-5] V In[6-7] j%3 Figure 4.13: Matrix-vector multiplication architectures at II=3 with a particular choices of array partitioning. On the left, the arrays have been partitioned more than necessary, resulting in multi- plexers. On the right, the arrays are partitioned with factor=3. In this case, multiplexing has been reduced, but the j loop index becomes a part of the address computations. Similarly, the directive array partition variable=x factor=2 block would split it into two arrays � 1 2 3 4 5 � and � 6 7 8 9 � Study the eﬀects of varying pipeline II and array partitioning on the performance and area. Plot the performance in terms of number of matrix vector multiply operations per second (throughput) versus the unroll and array partitioning factor. Plot the same trend for area (showing LUTs, FFs, DSP blocks, BRAMs). What is the general trend in both cases? Which design would you select? Why? Alternatively, similar results can be achieved by pipelining and applying partial loop unrolling to the inner dot product loop . Figure 4.14 shows the result of unrolling the inner loop of the matrix- vector multiplication code by a factor of 2. You can see that the loop bounds now increment by 2. Each loop iteration requires 2 elements of matrix M[][] and vector V in[] each iteration and perform two multiplies instead of one. In this case after loop unrolling Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "refined_text": " Consider the code for an 11 tap FIR ﬁlter in Figure 2.1. The function takes two arguments, an input sample x , and the output sample y . This function must be called multiple times to compute an entire output signal, since each time that we execute the function we provide one input sample and receive one output sample. This code is convenient for modeling a streaming architecture, since we can call it as many times as needed as more data becomes available. The coeﬃcients for the ﬁlter are stored in the c[] array declared inside of the function. These are statically deﬁned constants. Note that the coeﬃcients are symmetric. i.e., they are mirrored around the center value c[5] = 500 . Many FIR ﬁlter have this type of symmetry. We could take advantage of it in order to reduce the amount of storage that is required for the c[] array. The code uses typedef for the diﬀerent variables. While this is not necessary, it is convenient for changing the types of data. As we discuss later, bit width optimization – speciﬁcally setting the number of integer and fraction bits for each variable – can provide signiﬁcant beneﬁts in terms of performance and area. Rewrite the code so that it takes advantage of the symmetry found in the coeﬃcients. That is, change c[] so that it has six elements ( c[0] through c[5] ). What changes are necessary in the rest of the code? How does this eﬀect the number of resources? How does it change the performance? The code is written as a streaming function. It receives one sample at a time, and therefore it must store the previous samples. Since this is an 11 tap ﬁlter, we must keep the previous 10 33"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " HLS tool with input values provided from the C testbench. As a result, it can gen- erate accurate estimates of the performance of the generated RTL design which reﬂect any HLS optimizations, even in the presence of data-dependent behavior. The minimum, maximum, and av- erage latency and interval of the synthesized function are automatically extracted after simulation completes. Note that these numbers only correspond to the clock cycles derived from the input data used by the testbench. Thus, they are only as good as the testbench itself. To put it another way, if the testbench does not exercise the function in a manner that is consistent with how it will be used upon deployment, the results will not be accurate. In addition, the input testvectors are generated with idealized timing that does not accurately model the behavior of external interfaces. The actual performance may be lower if execution stalls waiting for input data, or if there is contention waiting for external memory access to complete. Nevertheless, it provides a convenient method for determining clock cycles that does not require the designer to estimate the loop bounds for a variable loop. C/RTL cosimulation provides the latency for functions with variable loop bounds. It reports the minimum, maximum, and average clock cycles for function latency and function interval. These latency values are directly dependent upon the input data from the C testbench. 123"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " HLS tool adds these labels into the views of the code. After the for loop completes, the acc variable has the complete result of the convolution of the input samples with the FIR coeﬃcient array. The ﬁnal result is written into the function argument y which acts as the output port from this ﬁr function. This completes the streaming process for computing one output value of an FIR. This function does not provide an eﬃcient implementation of a FIR ﬁlter. It is largely sequential, and employs a signiﬁcant amount of unnecessary control logic. The following sections describe a number of diﬀerent optimizations that improve its performance."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " With some eﬀort, we’ve achieved a design with a loop II of 1. Previously we have seen how further reducing the execution time of a design can be achieved by partial unrolling of the inner loop. However, with the histogram function this is somewhat diﬃcult for several reasons. One reason is the challenging recurrence, unless we can break up the input data in some fashion, the computation of one iteration of the loop must be completed with the computation of the next iteration of the loop. A second reason is that with a loop II of 1, the circuit performs a read and a write of the 152"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 125,
            "refined_text": " loop. One factor is the recurrence through the adder that limits the achieved loop II. A second factor is that iterations of the outer loop are not pipelined. An eﬃcient solution for sparse matrix- vector multiply would likely come close to using each multiplier and adder every clock cycle. This design is far from that. In Section 4.3 we explored several design optimization techniques, including pipelining diﬀerent loops, loop unrolling, and array partitioning. Understanding the tradeoﬀs between these techniques can be somewhat challenging, since they are often dependent on what another. We must often apply these techniques together with a carefully chosen goal in mind in order to get a beneﬁt and applying one technique without applying another technique can actually make matters worse. For instance, when performing loop unrolling, the designer must be careful to understand the eﬀects that this has upon memory accesses. Increasing the number of operations that can execute concurrently doesn’t help if performance is limited by available memory ports. Similarly, providing more memory ports if there are insuﬃcient operations to utilize those memory ports (or if the addresses of each memory operation can’t be easily partitioned) can also incur a resource cost without increasing performance. To see some of the complexity in applying these combinations of transforms, we encourage you to perform the following exercise: Synthesize the spmv design using the directives speciﬁed in each of the ten cases from Table 6.1. Each case has diﬀerent pipeline, unroll, and partitioning directives for the diﬀerent loops and arrays. These partitionings should be done across the three arrays ( values , columnIndex , and x ). What sort of trends do you see? Does increasing the unroll and partitioning factors help or hurt when it comes to utilization? How about performance? Why? Table 6.1: Potential optimizations for sparse matrix-vector multiplication. L1 L2 Case 1 - - Case 2 - pipeline Case 3 pipeline - Case 4 unroll=2 - Case 5 - pipeline, unroll=2 Case 6 - pipeline, unroll=2, cyclic=2 Case 7 - pipeline, unroll=4 Case 8 - pipeline, unroll=4, cyclic=4 Case 9 - pipeline, unroll=8 Case 10 - pipeline, unroll=8, cyclic=8 Case 11 - pipeline, unroll=8, block=8 If you performed the previous exercise, you should have seen that blindly applying optimization directives may not always provide you with the expected results. It is usually more eﬀective to consider the properties of an application under design, and to select optimizations with a particular design goal in mind. Of course, this requires some intuition behind the capabilities and limitations of a particular tool being used. While it is certainly diﬃcult (perhaps impossible?) to understand every detail of a complex tool like Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " When actually processing video in a system it is common to factor out the system integration aspects from the implementation of video processing algorithms. For the remainder of this chapter we will assume that input pixels are arriving in a stream of pixels and must be processed in scanline order. The actual means by which this happens is largely unimportant, as long as HLS meets the required performance goals. 9.2.1 Line Buﬀers and Frame Buﬀers Video processing algorithms typically compute an output pixel or value from a nearby region of input pixels, often called a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " . Binary numbers work in most ways like normal decimal numbers, but can often be the cause of confusing errors if you are not familiar with how they work. This is particularly true in many embedded systems and FPGAs where minimizing the number of bits used to represent variables can greatly increase the overall performance or eﬃciency of a system. In this section, we will summarize binary arithmetic and the basic ways that computers represent numbers. Many readers may already be familiar with these ideas. In that case, you may skim these sections or skip them entirely. We do suggest that look at Section 3.5.5 as this provides information speciﬁc to Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " Figure 2.2: The performance of multiply accumulate operation changes depending upon the target clock period. Assume the multiply operation takes 3 ns and add operation takes 2 ns. Part a) has a clock period of 1 ns, and one MAC operation takes 5 cycles. Thus the performance is 200 million MACs/sec. Part b) has a clock period of 2 ns, and the MAC takes 3 cycles resulting in approximately 167 million MACs/sec. Part c) has a clock period of 5 ns. By using operation chaining, a MAC operation takes 1 cycle for a clock period of 200 million MACs/sec. ns (or equivalently a clock frequency of 1 GHz), then it would take 5 cycles for the MAC operation to complete. This is depicted in Figure 2.2 a). The multiply operation is executed over 3 cycles, and the add operation is executed across 2 cycles. The total time for the MAC operation is 5 cycles"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " matrix. Since this matrix is the square of the input size, it becomes prohibitive to store for large input sizes. In the following sections, we’ll discuss techniques to address both of these complexities. As is typical when creating a hardware implementation using high level synthesis, we start with a straightforward or naive implementation. This provides us with a baseline code that we can insure has the correct functionality. Typically, this code runs in a very sequential manner; it is not highly optimized and therefore may not meet the desired performance metrics. However, it is a necessary step to insure that the designer understand the functionality of the algorithm, and it serves as starting point for future optimizations. Figure 4.15 shows a baseline implementation of the DFT. This uses a doubly nested for loop. The inner loop multiplies one row of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " point types until you ﬁnd the right tradeoﬀ between accuracy/error, performance, and resource usage. SIZE determines the number of rows and columns in the matrices to be multiplied. We limit this to square matrices although handling arbitrary matrix sizes could be done by changing the code in a number of diﬀerent places. We leave that as an exercise for the reader. Change the code to allow it to handle matrices of arbitrary size. The BLOCK SIZE variable deﬁnes the number of rows from A and the number of columns from B that we operate upon in each execution. This also deﬁnes how much data that we stream at one time into the function. The output data that we receive from the function at each execution is an BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " What primitive boolean operations are needed to implement the multiplication of 8-bit numbers? How does this change when implementing multiplication of 32-bit numbers? Hint: How many primitive decimal operations are needed to implement multiplication of two 8 digit decimal numbers? In many cases to implement optimized hardware, it is necessary to process data where the bitwidth is not a power of two. For example, analog to digital converters often output results in 10 bits, 12 bits, or 14 bits. We could map these to 16 bit values, but this would likely reduce performance and increase resource usage. To more accurately describe such values, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " ? Or to a ﬁxed point value? How does this change the performance (interval and latency) and the resource usage? Does it change the values of the output frequency domain samples? A more general solution to achieve II=1 with ﬂoating point accumulations is to process the data in a diﬀerent order. Looking at Figure 4.17 we see that the recurrence exists (represented by the arrow) because the j loop is the inner loop. If the inner loop were the i loop instead, then we wouldn’t need the result of the accumulation before the next iteration starts. We can achieve this in the code by interchanging the order of the two loops. This optimization is often called loop interchange or pipeline-interleaved processing[40]. In this case, it may not be obvious that we can rearrange the loops because of the extra code inside the outer i loop. Fortunately, the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "refined_text": " HLS because the loop bound is not constant. Add a directive to pipeline the outermost L1 loop, i.e., implement case 3 above. What is the initiation interval (II) when you do not set a target II? What happens to the utilization? How does explicitly increasing the II change the utilization results? How does this compare to pipelining the L2 loop? How does this compare to the baseline design (no directives)? What is happening when you attempt to pipeline this outer loop? (hint: check the synthesis log) Another option to increase parallelism is partial loop unrolling of the inner loop, as in cases 5 through 10. This transformation exposes more parallelism by allowing more operations from the same loop iteration to be executed concurrently. In some cases, more operations can increase performance by enabling Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": " cycles. These design points are relatively easy to achieve, given the corresponding array partitioning. It’s also possible to pipeline the innermost loop with the goal of achieving a design with only one multiply-add operator, although achieving an II=1 implementation at high clock frequencies can be diﬃcult because of the recurrence involved in the accumulation of variable ABij . We can also partially unroll diﬀerent loops to achieve yet more design points. The fundamental tradeoﬀ here is between the complexity of the resulting architecture, i.e., the number of multiply-add operators, and performance, i.e., the number of cycles that the hardware is busy. In an ideal world, each doubling of the resource usage should result in exactly half the number of clock cycles being required, although in practice such ‘perfect scaling’ is diﬃcult to achieve. Change the location of the pipeline directive. How does the location eﬀect the resource usage? How does it change the performance? Which alternative provides the best performance in terms of function interval? Which provides the smallest resource usage? Where do you think is the best place for the directive? Would increasing the size of the matrices change your decision? Executing large numbers of operations every cycle requires being able to supply all of the required operands and to store the results of each operation. Previously we have used the array partition directive to increase the number of accesses that can be performed on each memory. As long as the partition of the array that each memory access can be determined at compile time, then array partitioning is a simple and eﬃcient way to increase the number of memory accesses that can be performed each clock cycle. In this case, we use the slightly diﬀerent array reshape directive to perform array partitioning. This directive not only partitions the address space of the memory into separate memory blocks, but then recombines the memory blocks into a single memory. This transformation increases the data width of the memory used to store the array, but doesn’t change the overall number of bits being stored. The diﬀerence is shown in Figure 7.2. Both array reshape and array partition increase the number of array elements that can be read each clock cycle. They also support the same options, enabling cyclic and block partitions or parti- tioning along diﬀerent dimensions of a multi-dimensional array. In the case of array reshape , the elements must each have the same address in the transformed array, whereas with array partition , the addresses in the transformed array can be unrelated. Although it may seem like one would always want to use array partition because it is more ﬂexible, it makes each individual memory smaller, which can sometimes result in ineﬃcient memory usage. The array reshape directive re- sults in larger memory blocks, which can sometimes be mapped more eﬃciently into primitive FPGA resources. In particular, the smallest granularity of block RAM (BRAM) blocks in Xilinx Virtex Ultrascale+ devices is 18 Kbits with several diﬀerent supported combination of depths and widths. When the partitions of an array become smaller than around 18Kbits, then BRAMs are no longer used eﬃciently. If we start with an original array which is a 4-bit array with dimensions [1024][4], this array can ﬁt in a single BRAM resource conﬁgured as a 4Kbit x 4 memory. Parti- tioning this array completely in the second dimension would result in 4 1Kbit x 4 memories, each of which are much smaller than one one BRAM resource. Reshaping the array instead using the array reshape directive results in a memory which is 1Kbit x 16, a supported BRAM conﬁguration. 131"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 17,
            "refined_text": " BRAM DSP Block High Speed Interfaces Microprocessor Figure 1.4: Modern FPGAs are becoming more heterogenous with a mix of programmable logic elements and “hardened” architectural elements like register ﬁles, custom datapaths, and high speed interconnect. The FPGA is often paired with one or more microprocessors, e.g., ARM or x86 cores, that coordinates the control of the system. the fabric in order to increase performance. As the number of transistors on the FPGA has continued to increase, FPGA architectures have begun to incorporate more and more “hard” resources. These are custom resources designed speciﬁcally to perform a task. For example, many applications make heavy use of addition and multiplication operations. Thus, the FPGA fabric added custom resources targeted at these oper- ations. An example of this is the DSP48 custom datapaths, which eﬃciently implement a series of arithmetic operations including multiplication, addition, multiply-accumulate, and word level logical operations. These DSP48 blocks have some programmability, but are not as ﬂexible as the programmable logic. Yet, implementing a multiply or MAC operation on these DSP48s is much more eﬃcient than performing the same operation on the programmable logic. Thus, there is a fun- damental tradeoﬀ of eﬃciency versus ﬂexibility. Modern FPGAs will have hundreds to thousands of these DSP48 distributed throughout the logic fabric as shown in Figure 1.4. Compare the performance of a multiply accumulate operation using the programmable logic versus the DSP48s. What is the maximum frequency that one can obtain in both cases? How does the FPGA resource usage change? A block RAM (BRAM) is another example of a hardened resource. BRAMs are conﬁgurable random access memory modules that support diﬀerent memory layouts and interfaces. For example, they can be changed to have byte, half-word, word, and double word transfers and connected to a variety of diﬀerent interfaces including local on-chip buses (for talking to the programmable fabric) and processor buses (to communicate with on-chip processors). Generally, these are used to transfer data between on-chip resources (e.g., the FPGA fabric and microprocessor) and store large data 17"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " 1 ns per cycle = 5 ns. Thus we can perform 1/5 ns = 200 million MACs/second. If we increase the clock period to 2 ns, the multiply operation now spans over two cycles, and the add operation must wait until cycle 3 to start. It can complete in one cycle. Thus the MAC operation requires 3 cycles, so 6 ns total to complete. This allows us to perform approximately 167 million MACs/second. This result is lower than the previous result with a clock period of 1 ns. This can be explained by the “dead time” in cycle 2 where no operation is being performed. However, it is not always true that increasing the clock period results in worse performance. For example, if we set the clock period to 5 ns, we can perform both the multiply and add operation in the same cycle using operation chaining. This is shown in Figure 2.2 c). Thus the MAC operation takes 1 cycle where each cycle is 5 ns, so we can perform 200 million MACs/second. This is the same performance as Figure 2.2 a) where the clock period is faster (1 ns). So far we have performed chaining of only two operations in one cycle. It is possible to chain multiple operations in one cycle. For example, if the clock period is 10 ns, we could perform 5 add operations in a sequential manner. Or we could do two sequential MAC operations. It should start to become apparent that the clock period plays an important role in how the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " is a common DSP term for the FIFO operation; MAC is short-hand for “multiply accumulate”. Compare the implementations before and after loop ﬁssion. What is the diﬀerence in performance? How do the number of resources change? Loop ﬁssion alone often does not provide a more eﬃcient hardware implementation. However, it allows each of the loops to be optimized independently, which could lead to better results than optimizing the single, original for loop. The reverse is also true; merging two (or more) for loops into one for loop may yield the best results. This is highly dependent upon the application, which is true for most optimizations. In general, there is not a single ‘rule of thumb’ for how to optimize your code. There are many tricks of the trade, and your mileage may vary. Thus, it is important to have many tricks at your disposal, and even better, have a deep understanding of how the optimizations work. Only then will you be able to create the best hardware implementation. Let us continue to learn some additional tricks... 39"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " Figure 8.10: Removing the read after write dependency from the for loop. This requires an if / else structure that may seem like it is adding unnecessary complexity to the design. However, it allows for more eﬀective pipelining despite the fact that the datapath is more complicated. could propagate the if condition property into each branch, we must accept that there are some pieces of code where properties of memory accesses are actually undecidable. The highest performance in such cases will only be achieved in a static schedule with the addition of user information. Several recent research works have looked to improve this by introducing some dynamic control logic into the design[60, 44, 19]. A pictorial description of the restructured code from Figure 8.10 is shown in Figure 8.11. Not all of the operations are shown here, but the major idea of the function is there. You can see the two separate if and else regions (denoted by dotted lines). The acc variable is replicated twice in order to make the drawing more readable; the actual design will only have one register for that variable. The ﬁgure shows the two separate datapaths for the if and the else clause with the computation corresponding to the if clause on the top and the else clause datapath on the bottom."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "refined_text": " HLS is unable to construct a pipeline from the body of the L1 loop. Unfortunately, this is a case where exploring the design space of interesting alternatives requires code restructuring in addition to the use of directives. Finding the best code restructuring requires not only understanding the algorithm, but also having a sense of the architecture that will be generated by the HLS process[28, 48]. For example, we discuss one such code restructuring for insertion sort in the following section. You will see that that code is signiﬁcantly diﬀerent from the code in Figure 10.2. In the following, we attempt to demonstrate several concepts. First, writing eﬃcient high- level synthesis code requires that the designer must understand hardware concepts like unrolling and partitioning. Second, the designer must be able to diagnose any throughput problems, which requires substantial knowledge about both the application and the hardware implementation of that design. Third, and most importantly, in order to achieve the best results, i.e. high performance and low-area, it is often required to rewrite the code in a manner that will create an eﬃcient hardware architecture. This can be very diﬀerent from code that results in the most eﬃcient software. 10.2.2 Parallelising Insertion Sort In order signiﬁcantly increase the performance of insertion sort, we’d like to get to the point where we can insert a new element every clock cycle. When inserting the last element into the sorted list, this might require shifting all of the elements in the array. For the code in Figure 10.2, this means that the inner while loop could actually execute over all of the elements in the array. Intuitively, we realize that inserting a new element into the sorted list every clock cycle requires enough hardware operators to perform a comparison on every element of the array in a single clock cycle. To enable pipelining of the outer loop, we can convert the inner L2 loop with variable loop bounds into a ﬁxed-bound loop, enabling it to be unrolled and integrated into the L1 loop pipeline. Code that does this is shown in Figure 10.4. This code contains the exit condition of the original loop ( L2 in Figure 10.2) as an if condition in the body of the new L2 loop. The other branches of the conditional are added to handle the expanded iteration space of the loop, essentially performing no operations when the original loop would not be executing. In addition, the loop now contains the ﬁnal assignment of item in the array, rather than performing the assignment outside of the loop. When the inner loop is unrolled, remember that j will become a constant in all of the unrolled instances of the loop. As a result, each read and write from B[] will be performed at a constant index and comparisons between j and a constant will be completely optimized away. The item variable, on the other hand, is possibly assigned in every copy of the inner loop. During compilation, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " HLS to build an architecture that pipelined architecture processing using the dataﬂow directive. Additionally, the temp[][] array is now used to model the dataﬂow ping-pong channels between the processes implemented by the merge arrays() function, making extra array copies unnecessary. This two-dimensional array is partitioned in the ﬁrst dimension, making it easy to represent a parameterized number of channels. The merge sort parallel() function consists of STAGES calls to the merge arrays() function. Each The ﬁrst call reads from the input and writes to temp[0] . The loop performs the intermediate stages and writes to the remaining partitions of temp[] . The ﬁnal call writes to the output array B[] . The code is parameterized in terms of SIZE and STAGES and supports array lengths 4 or greater. Estimate the performance of the code in Figure 10.16. What is the interval and latency of the implementation? How much memory is required to support that processing rate? Is all of the memory necessary?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " HLS tool creates logical hardware that checks if the condition is met, which is executed in every iteration of the loop. Furthermore, this conditional structure limits the execution of the statements in either the if or else branches; these statements can only be executed after the if condition statement is resolved. The if statement checks when x == 0 , which happens only on the last iteration. Therefore, the statements within the if branch can be “hoisted” out of the loop. That is we can execute these statements after the loop ends, and then remove the if / else control ﬂow in the loop. Finally, we must change the loop bounds from executing the “0th” iteration. This transform is shown in Figure 2.3. This shows just the changes that are required to the for loop. The end results is a much more compact implementation that is ripe for further loop optimiza- tions, e.g., unrolling and pipelining. We discuss those optimizations later. Compare the implementations before and after the removal of the if / else condition done through loop hoisting. What is the diﬀerence in performance? How do the number of resources 38"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " Figure 7.1: A common three for loop structure for matrix multiplication. The outer for loops, labeled rows and cols , iterate across the rows and columns of the output matrix AB . The innermost loop, labeled product multiplies the appropriate elements of one row of A and one column of B and accumulates them until it has the result for the element in AB . Matrix multiplication is a fundamental operation in numerical algorithms. Computing the product between large matrices can take a signiﬁcant amount of time. Therefore, it is critically important part of many of problems in numerical computing. Fundamentally, matrices repre- sent linear transforms between vector spaces; matrix multiplication provides way to compose the linear transforms. Applications include linearly changing coordinates (e.g., translation, rotation in graphics), high dimensional problems in statistical physics (e.g., transfer-matrix method), and graph operations (e.g., determining if a path exists from one vertex to another). Thus it is a well studied problem, and there are many algorithms that aim to increase its performance, and reduce the memory usage."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " elements of the original array. Note that this partitioning is eﬀective because the partitioned dimension (dimension 2 of A or dimension 1 of B ) is indexed by a constant. In addition, the non-partitioned dimension is indexed by the same (variable) value. When partitioning multi-dimensional arrays, this is a good rule of thumb to identify which dimension should be partitioned. Remove the array reshape directives. How does this eﬀect the performance? How does it change the resource usage? Does it make sense to use any other array reshape directives (with diﬀerent arguments) on these arrays? In this case, how does the result diﬀer if you use the array reshape directive instead? The size of the arrays can have a substantial eﬀect on the optimizations that you wish to perform. Some applications might use very small matrices, say 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " In this chapter, we looked at the hardware implementation and optimization of the Discrete Fourier Transform (DFT). The DFT is a fundamental operation in digital signal processing. It takes a signal sampled in the time domain and converts it into the frequency domain. At the beginning of this chapter, we describe the mathematical background for the DFT. This is important for understanding the optimizations done in the next chapter (FFT). The remainder of the chapter was focused on specifying and optimizing the DFT for an eﬃcient implementation on an FPGA. At its core, the DFT performs a matrix-vector multiplication. Thus, we spend some time initially to describe instruction level optimizations on a simpliﬁed code performing matrix-vector multiplication. These instruction level optimizations are done by the HLS tool. We use this as an opportunity to shed some light into the process that the HLS tool performs in the hopes that it will provide some better intuition about the results the tool outputs. After that, we provide an functionally correct implementation for the DFT. We discuss a number of optimizations that can be done to improve the performance. In particular, we focus on the 97"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 53,
            "refined_text": " simpler data structures, e.g., one that is explicitly implemented in an array. And it often involves removing system calls and other code not supported by the HLS tool. Creating an optimum architecture requires a basic understanding about how the HLS tool performs its synthesis and optimization process to RTL code. It is certainly not unnecessary to understand the exact HLS algorithms for schedule, binding, resource allocation, etc. (and many times these are proprietary). But having a general idea of the process does aid the designer in writing code that maps well to hardware. Throughout the chapter, we talked about some of the key features of the HLS synthesis process that are necessary to understand when performing various optimizations. It is especially important to understand the way that the HLS tool reports performance, which we describe in Chapter 2.4. Additionally, we presented some basic HLS optimizations (including loop and bitwidth op- timizations). We highlighted their beneﬁts and potential drawbacks using the FIR ﬁlter as an example. These are common optimizations that can be applied across a wide range of applications. We provide more details about these optimizations in subsequent chapters as we walk through the implementation of other more complex applications. 53"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "refined_text": " HLS uses a CORDIC core for calculating trigonometric functions and it is a common element of modern FPGA IP core libraries. The goal of this chapter is to demonstrate how to create an optimized CORDIC core using high- level synthesis. We are gradually increasing the complexity of the types of hardware cores that we are developing as we progress through the book. The CORDIC method is an iterative algorithm; thus most of the computation is performed within a single for loop. The code itself is not all that complex. However, understanding the code such that we can create an optimal hardware implementation requires deep insight. And a good HLS designers must always understand the computation if they wish to create the optimal design. Thus, we spend the early part of this chapter giving the mathematical and computational background of the CORDIC method. The major HLS optimization that we wish to highlight in this chapter is choosing the correct number representation for the variables. As we discuss later in the chapter, the designer must carefully tradeoﬀ between the accuracy of the results, the performance, and resource utilization of the design. Number representation is one big factor in this tradeoﬀ – “larger” numbers (i.e., those with more bits) generally provide more precision at the cost of increased resource usage (more FFs 55"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 1 . Even though the variable is declared as an int type of at least 32 bits, many fewer bits can be used to implement the variable without changing the behavior of the program. In other cases, particularly function inputs, memories, and variables that appear in recurrences, the representation cannot be automatically optimized. In these cases, modifying the code to use smaller datatypes is a key optimization to avoid unnecessary resource usage. Although reducing the size of variables is generally a good idea, this optimization can change the behavior of the program. A data type with fewer number of bits will not be able to express as much information as a data type with more bits and no ﬁnite binary representation can represent all real numbers with inﬁnite accuracy. Fortunately, as designers we can pick numeric representations that are tuned to accuracy requirements of particular applications and tradeoﬀ between accuracy, resource usage, and performance. Before discussing these number representation optimizations further using our cordic function, we ﬁrst give a background on number representation. We provide the basics, as this is important in understand the data type speciﬁc representations provided by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " Add a loop tripcount directive to the spmv function. The syntax for the pragma form of the directive is #pragma HLS loop tripcount min=X, max=Y, avg=Z where X , Y , and Z are constant positive integers. Which loops require this directive? What happens to the synthesis report when you change the diﬀerent parameters ( min , max , and avg )? How does this eﬀect the clock period? How does it change the utilization results? The loop tripcount directive enables the designer to get a rough idea about the performance of a function. This can enable comparison between diﬀerent implementations of the same function either by applying diﬀerent optimization directives or by restructuring the code itself. However, it may be diﬃcult or impossible to determine the min , max , and avg parameters. It can also be diﬃcult to provide tight bounds on the min and max parameters. If there is a testbench, there is another more accurate method to calculate the total number of clock cycles required for the spmv function. This is done by performing C/RTL cosimulation."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " operations/sec. Other common performance metrics speciﬁcally for FIR ﬁlters talk about the number of ﬁlter operations/second. Yet another metric is multiply accumulate operations: MACs/second. Each of these are related to one another, in some manner, but when comparing diﬀerent implementations it is important to compare apples to apples. For example, directly comparing one design using bits/second to another using ﬁlter operations/second can be misleading; fully understanding the relative beneﬁts of the designs requires that we compare them using the same metric. And this may require additional information, e.g., going from ﬁlter operations/second to bits/second requires information about the size of the input and output data. All of the aforementioned metrics use seconds. High-level synthesis tools talk about the designs in terms of number of cycles, and the frequency of the clock. The frequency is inversely proportional to the time it takes to complete one clock cycle. Using them both gives us the amount of time in seconds to perform some operation. The number of cycles and the clock frequency are both 35"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " In this chapter, we looked the Coordinate Rotation DIgital Computer (CORDIC) method for calculating trigonometric and hyperbolic functions based on vector rotations. We start with a background on the computation being performed by the CORDIC method. In particular, we focus on how to use the CORDIC method to calculate the sine and cosine values for a given angle. Additionally, we discuss how the same CORDIC method can be used to determine the amplitude and phase of a given complex number. After this, we focus on the optimizations that can be done on the CORDIC method. Since it is an iterative method, there are fundamental tradeoﬀs between the number of iterations that are performed and the precision and accuracy of the resulting computation. We discuss how to reduce the precision/accuracy and get savings in FPGA resource usage and increases in performance. We introduce the notion of using custom arbitrary data types for the variables in our cordic function. This provides another method to reduce the latency, increase the throughput, and min- imize the area while changing the precision of the intermediate and ﬁnal results. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "refined_text": " CORDIC (Coordinate Rotation DIgital Computer) is an eﬃcient technique to calculate trigono- metric, hyperbolic, and other mathematical functions. It is a digit-by-digit algorithm that produces one output digit per iteration. This allows us to tune the accuracy of the algorithm to the applica- tion requirements; additional iterations produce a more precise output result. Accuracy is another common design evaluation metric alongside performance and resource usage. CORDIC performs simple computations using only addition, subtraction, bit shifting, and table lookups, which are eﬃcient to implement in FPGAs and more generally in hardware. The CORDIC method was developed by Jack Volder in the 1950’s as a digital solution to replace an analog resolver for real-time navigation on a B-58 bomber. A resolver measures degrees of rotation. At that time hardware implementations of multiply operations were pro- hibitively expense and CPUs had very limited amount of state. Thus the algorithm needed to have low complexity and use simple operations. Over the years, it has been used in math co-processors [24], linear systems [3], radar signal processing [4], Fourier transforms [21], and many other digital signal processing algorithms. It is now commonly used in FPGA designs. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "refined_text": " allow any element to be accessed as many times as it is needed each clock cycle. However, as the size of arrays grows large, this is not feasible. In the case of matrix-vector multiplication, storing a 1024 by 1024 matrix of 32-bit integers would require about 4 MBytes of memory. Even using BRAM, this storage would require about 1024 BRAM blocks, since each BRAM stores around 4KBytes. On the other hand, using a single large BRAM-based memory means that we can only access two elements at a time. This obviously prevents higher performance implementations, such as in Figure 4.7, which require accessing multiple array elements each clock cycle (all eight elements of V In[] along with 8 elements of M[][] ). In practice, most designs require larger arrays to be strategically divided into smaller BRAM memories, a process called array partitioning. Smaller arrays (often used for indexing into larger arrays) can be partitioned completely into individual scalar variables and mapped into FFs. Matching pipelining choices and array partitioning to maximize the eﬃciency of operator usage and memory usage is an important aspect of design space exploration in HLS. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " be pipelined. One possibility is to use an outer for loop to iterate over codeword length histogram[] and an inner loop to count each symbol, as shown in Figure 11.12. Implement the code in Figure 11.11 and the alternate code structure in Figure 11.12. Which results in higher performance? Which coding style is more natural to you? 11.2.7 Create Codeword The ﬁnal step in the encoding process is to create the codeword for each symbol. This process simply assigns each symbol in order according to the properties of a Canonical Huﬀman code. The ﬁrst property is that longer length codes have a higher numeric value than the same length preﬁx of shorter codes. The second property is that codes with the same length increase by one as the symbol value increases. In order to achieve these properties while keeping the code simple, it is useful to determine the ﬁrst codeword of each length. If we know the number of codewords of each length given by codeword length histogram, then this can be found using the following recurrence: ﬁrst codeword(1) = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " The baseline DFT implementation of the previous section uses relatively high precision double datatypes. Implementing ﬂoating point operations is typically very expensive and requires many pipeline stages, particularly for double precision. We can see in Figure 4.16 that this signiﬁcantly aﬀects the performance of the loop. With pipelining, the aﬀect of these high-latency operations is less critical, since multiple executions of the loop can execute concurrently. The exception in this code are the temp real[] and temp imag[] variables, which are used to accumulate the result. This accumulation is a recurrence and limits the achievable II in this design when pipelining the inner loop. This operator dependence is shown in Figure 4.17. One possible solution is to reduce the precision of the computation. This is always a valuable technique when it can be applied, since it reduces the resources required for each operation, the memory required to store any values, and often reduces the latency of operations as well. For instance we could use the 32-bit ﬂoat type or the 16-bit half types rather than double. Many signal processing systems avoid ﬂoating point data types entirely and use ﬁxed point data types3.5. For commonly used integer and ﬁxed-point precisions, each addition can be completed in a single cycle, enabling the loop to be pipelined at II=1. What happens to the synthesis result of the code in Figure 4.15 if you change all of the data types from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " HLS tool will generate an optimized, but largely sequential archi- tecture. In a sequential architecture, loops and branches are transformed into control logic that enables the registers, functional units, and the rest of the data path. Conceptually, this is similar to the execution of a RISC processor, except that the program to be executed is converted into a ﬁnite state machine in the generated RTL rather than being fetched from the program memory. A sequential architecture tends to limit the number of functional units in a design with a focus on re- source sharing over massive parallelism. Since such an implementation can be generated from most programs with minimal optimization or transformation, this makes it easy for users to get started with HLS. One disadvantage of a sequential architecture is that analyzing and understanding data rates is often diﬃcult since the control logic can be complex. The control logic dictates the number of cycles for the task interval and task latencies. The control logic can be quite complex, making it diﬃcult to analyze. In addition, the behavior of the control logic may also depend on the data being processed, resulting in performance that is data-dependent. However, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "refined_text": " Loop unrolling can increase the overall performance provided that we have the ability to execute some (or all) of the statements in parallel. In the unrolled code, each iteration requires that we read two values from the shift reg array; and we write two values to the same array. Thus, if we wish to execute both statements in parallel, we must be able to perform two read operations and two write operations from the shift reg array in the same cycle. Assume that we store the shift reg array in one BRAM, and that BRAM has two read ports and one write port. Thus we can perform two read operations in one cycle. But we must sequentialize the write operations across two consecutive cycles. There are ways to execute these two statements in one cycle. For example, we could store all of the values of the shift reg array in separate registers. It is possible to read and write to each individ- ual register on every cycle. In this case, we can perform both of the statements in this unrolled for loop in one cycle. You can tell the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "refined_text": " HLS can also synthesize ﬂoating point calculations. Floating point numbers provide a large amount of precision, but this comes at a cost; it requires signiﬁcant amount of computation which in turn translates to a large amount of resource usage and many cycles of latency. Thus, ﬂoating point numbers should be avoided unless absolutely necessary as dictated by the accuracy requirements application. In fact, the primary goal of this chapter is to allow the reader to understand how to eﬀectively move from ﬂoating point to ﬁxed point representations. Unfortunately, this is often a non-trivial task and there are not many good standard methods to automatically perform this translation. This is partially due to the fact that moving to ﬁxed point will reduce the accuracy of the application and this tradeoﬀ is best left to the designer. The standard technique for high-level synthesis starts with a ﬂoating point representation during the initial development of the application. This allows the designer to focus on getting a function- ally correct implementation. Once that is achieved, then she can move optimizing the number representation in order to reduce the resource usage and/or increase the performance. Change all of the variables in the CORDIC from ﬂoat to int . How does this eﬀect the resource usage? How does it change the latency? How about the throughput? Does the accuracy change?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " Figure 1.12: Alternative code implementing an FIR ﬁlter. 1.4.4 Coding Style Another key question you should ask yourself is, “Is this code the best way to capture the algo- rithm?”. In many cases, the goal is not only the highest quality of results, but maintainable and modiﬁable code. Although this is somewhat a stylistic preference, coding style can sometimes limit the architectures that a HLS tool can generate from a particular piece of code. For instance, while a tool might be able to generate either architecture in Figure 1.11 or 1.10 from the code in Figure 1.8, additing additional directives as shown in Figure 1.12 would result in a speciﬁc architecture. In this case the delay line is explicitly unrolled, and the multiply-accumulate for loop is stated to be implemented in a pipelined manner. This would direct the HLS tool to produce an architecture that looks more like the pipelined one in Figure 1.11. The chapter described how to build ﬁlters with a range of diﬀerent processing rates, up to one sample per clock cycle. However, many designs may require processing data at a higher rate, perhaps several samples per clock cycle. How would you code such a design? Implement a 4 samples per clock cycle FIR ﬁlter. How many resources does this architecture require (e.g., number of multipliers and adders)? Which do you think will use more FPGA resources: the 4 samples per clock or the 1 sample per clock cycle design? We look further into the optimization of an FIR function in more detail in Chapter 2. We discuss how to employ diﬀerent optimizations (pipelining, unrolling, bitwidth optimization, etc.), and describe their eﬀects on the performance and resource utilization of the resulting generated architectures. 27"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "refined_text": " HLS: the designer does not need to worry about these low level details. The BRAMs are typically co-located next to the DSP48. For HLS, it may be beneﬁcial to think of the BRAMs as conﬁgurable register ﬁles. These BRAMs can directly feed the custom datapaths (DSP48s), talk to on-chip microprocessors, and transfer data to custom datapaths implemented on the programmable logic. Implement a design that stores a large (e.g., thousand item) array in BRAMs and pro- grammable logic. How does the performance change? What about the resource usage? Figure 1.5 provides a comparison between diﬀerent on-chip and oﬀ-chip memory resources. There are millions of FFs on-chip and these provide hundreds of Kbytes of bit level storage. These can be read to and written to on every cycle and thus provide a tremendous amount of total bandwidth. Unfortunately, they do not provide the most eﬃcient storage capacity. BRAMs provide a bit more storage density at the cost of limited total bandwidth. Only one or two entries of the BRAMs can be accessed during every cycle which is the major limiting factor for the bandwidth. Going even further in this direction, we can use very high density oﬀ-chip external memory, but the bandwidth is even further reduced. The decision about where to place your application’s data is crucial and one that we will consider extensively throughout this book. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "refined_text": " External Memory BRAM FFs count 1-4 thousands millions size GBytes KBytes Bits total size GBytes MBytes 100s of KBytes width 8-64 1-16 1 total bandwidth GBytes/sec TBytes/sec 100s of TBytes/sec Figure 1.5: A comparison of three diﬀerent on- and oﬀ-chip memory storage options. External memory provides the most density but has limited total bandwidth. Moving on-chip there are two options: FFs and BRAMs. FFs have the best total bandwidth but only a limited amount of total data storage capability. BRAMs provide an intermediate value between external memory and FFs. sets on chip. We could choose to store the data set in the slices (using the FFs) but this would incur overheads in performance and resource usage. A typical BRAM has around 32 Kbit of memory storage which can be conﬁgured as 32K x 1 bit, 16K x 2 bits, 8K x 4 bits, etc. They can be cascaded together to create larger memories. All of this conﬁguration is done by the Vivado tools; this is a major advantage of Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " components. The AXI4 interconnect allows multiple multiple master components to access a number of slave components. This architecture abstracts the details of the external memory, allowing diﬀerent external memory components and standards to be used interchangeably without modifying other FPGA components. Although most processor systems are built with caches and require them for high performance processing, it is typical to implement FPGA-based video processing systems as shown in 9.5 without on-chip caches. In a processor system, the cache provides low-latency access to previously accessed data and improves the bandwidth of access to external memory by always reading or writing complete cache lines. Some processors also use more complex mechanisms, such as prefetching and speculative reads in order to reduce external memory latency and increase external memory bandwidth. For most FPGA-based video processing systems simpler techniques leveraging line buﬀers and window buﬀers are suﬃcient to avoid fetching any data from external memory more than once, due to the predictable access patterns of most video algorithms. Additionally, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 4,
            "refined_text": " 3.5.3 Overﬂow, Underﬂow, and Rounding . . . . . . . . . . . . . . . . . . . . . . . 70 3.5.4 Binary arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 3.5.5 Representing Arbitrary Precision Integers in C and C++ . . . . . . . . . . . 73 3.5.6 Floating Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 3.6 Further Optimizations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 3.7 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 4 Discrete Fourier Transform 77 4.1 Fourier Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 4.2 Discrete Fourier Transform (DFT) Background . . . . . . . . . . . . . . . . . . . . . 79 4.3 Matrix-Vector Multiplication Optimizations . . . . . . . . . . . . . . . . . . . . . . . 82 4.4 Pipelining and Parallelism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 4.5 Storage Tradeoﬀs and Array Partitioning . . . . . . . . . . . . . . . . . . . . . . . . 87 4.6 Baseline Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92 4.7 DFT optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94 4.8 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 5 Fast Fourier Transform 99 5.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 5.2 Baseline Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108 5.3 Bit Reversal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111 5.4 Task Pipelining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113 5.5 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 6 Sparse Matrix Vector Multiplication 117 6.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117 6.2 Baseline Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119 6.3 Testbench . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120 6.4 Specifying Loop Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122 6.5 C/RTL Cosimulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123 6.6 Loop Optimizations and Array Partitioning . . . . . . . . . . . . . . . . . . . . . . . 124 6.7 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128 7 Matrix Multiplication 129 7.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129 7.2 Complete Matrix Multiplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130 7.3 Block Matrix Multiplication . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133 7.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144 8 Preﬁx Sum and Histogram 145 8.1 Preﬁx Sum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145 8.2 Histogram . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 148 8.3 Histogram Optimization and False Dependencies . . . . . . . . . . . . . . . . . . . . 149 8.4 Increasing Histogram Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152 8.5 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " HLS will have slightly higher latency to account for the sequential execution of the outer loop. In order to achieve higher performance, we could also attempt to move the pipeline directive to the outer L1 loop or to the function body itself. We could also combine these options with partial loop unrolling. Some of these options are shown in Table 10.1. Table 10.1: Possible options to optimize the basic insertion sort function in Figure 10.2 through directives. Directives II Period Slices 1 L2: pipeline II=1 ? ? ? 2 L2: pipeline II=1 ? ? ? L2: unroll factor=2 array partition variable=A cyclic factor=2 3 L1: pipeline II=1 ? ? ? 4 L1: pipeline II=1 ? ? ? L1: unroll factor=2 array partition variable=A complete 5 function pipeline II=1 ? ? ? array partition variable=A complete Explore the options in Table 10.1. Synthesize each of these designs and determine the initiation interval (II), clock period, and required number of slices. Which options are successful in improving latency and/or throughput? What would happen if you combined the directives from multiple rows into one design? Unfortunately, although this code seems similar to other nested loop programs we’ve looked at previously, it does have some aspects that can make it diﬃcult to optimize. Even Option 1, which simply attempts to pipeline the inner loop, can fail to achieve II=1. Although there are no signiﬁcant data recurrences, there is a recurrence in the control path that aﬀects whether or not 176"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "refined_text": " HLS tool, let us consider how to best optimize the function. Pipelining, loop unrolling, and data partitioning are the most common ﬁrst approaches in optimizing a design. And the typical approach is to start with the innermost loop, and then move outwards as necessary. In this example, pipelining the inner L2 loop is perhaps the ﬁrst and easiest optimization to consider. This overlaps the execution of the consecutive iterations of this loop, which can result is a faster overall implementation. Without pipelining, each iteration of the L2 loop occurs sequentially. Note that the iterations of the L1 loop are still done sequentially. Figure 6.5 illustrates the approximate manner in which the spmv function executes when pipelin- ing the L2 for loop. Each iteration of the inner L2 loop is pipelined with II=3. Pipelining allows multiple iterations of the inner loop from the same iteration of the outer loop execute concurrently. In this case, the II of the inner loop is limited by a recurrence through the accumulation. II=3 is achieved because we’ve assumed that the adder has a latency of 3 clock cycles. Iterations of the outer loop are not pipelined, so the inner loop must completely ﬁnish and ﬂush the pipeline before the next iteration of the outer L2 loop begins. Pipeline the innermost L2 for loop. This can be done by adding a pipeline directive to the spmv code from Figure 6.2. What is the achieved initiation interval (II)? What happens to the results as you specify an II argument, and increase or decrease the target II? Looking at this behavior, we see that there are several factors limiting the performance of the 124"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " 2 matrix corresponding to the data in “upper left” corner of AB . Figure 7.3 c) sends diﬀerent data for both the A and B matrices. This time we send the last two rows of A and the ﬁrst two columns of B . The results from this computation provide the “lower left” corner of the AB matrix. The ﬁnal execution of the streaming block matrix multiply, shown in Figure 7.3 d), uses the same last two rows of the A matrix from the previous iteration. And it sends the last two columns of the B matrix. The result provides the elements in the “lower right” corner of the AB matrix. Before we show the code for the block matrix multiplication, we deﬁne some data types that we will use. Figure 7.4 shows the header ﬁle for the project. We create a custom data type DTYPE that speciﬁes the type of data that we will multiply in the A and B matrices, and the corresponding AB matrix. This is currently set to an int data type. It is good coding practice to use a custom data type in your designs. This allows you to easily change the data type, and to have one source of information so that you do not have errors when changing the data type in the future design iterations. And it is quite common to change the data type over the course of the design. For example, ﬁrst you may start out with a ﬂoat or double type while you get a functionally correct design. This also provides a baseline for error since later you will likely change your design to use ﬁxed point data type. Fixed point data can reduce the number of resources, and increase the performance potentially at the cost of a reduction in the precision of the resulting data. You will likely try many diﬀerent ﬁxed 134"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "refined_text": " HLS tool, which will analyze it and produce a functionally equivalent RTL circuit. This is a complex process, and we will not get into much detail about this now, but think of it as a compiler like gcc. Yet instead of outputting assembly code, the HLS “compiler” creates an RTL hardware description. In both cases, it is not necessary to understand exactly how the compiler works. This is exactly why we have the compiler in the ﬁrst place – to automate the design process and allow the programmer/designer to work at a higher level of abstraction. Yet at the same time, someone that knows more about how the compiler works will often be able to write more eﬃcient code. This is particularly important for writing HLS code since there are many options for synthesizing the design that are not typically obvious to one that only knows the “software” ﬂow. For example, ideas like custom memory layout, pipelining, and diﬀerent I/O interfaces are important for HLS, but not for a “software compiler”. These are the concepts that we focus on in this book. A key question to understand is: “What circuit is generated from this code?”. Depending on your assumptions and the capabilities of a particular HLS tool, the answer can vary widely. There are multiple ways that this could be synthesized by an HLS tool. One possible circuit would execute the code sequentially, as would a simple RISC microprocessor. Figure 1.9 shows assembly code for the Xilinx Microblaze processor which implements the C code in Figure 1.8. Although this code has been optimized, many instructions must still be executed to compute array index expressions and loop control operations. If we assume that a new instruction can be issued each clock cycle, then this code will take approximately 49 clock cycles to compute one output sample of the ﬁlter. Without going into the details of how the code works, we can see that one important barrier to performance in this code is how many instructions can be executed in each clock cycle. Many improvements in computer architecture are fundamentally attempts to execute more complex instructions that do more useful work more often. One characteristic of HLS is that architectural tradeoﬀs can be made without needing to ﬁt in the constraints of an instruction set architecture. It is common in HLS designs to generate architectures that issue 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": " HLS will synthesize in an optimal manner. Restructured code typically diﬀers substantially from a software implementation – even one that is highly optimized. A number of studies suggest that restructuring code is an essential step to generate an eﬃcient FPGA design [46, 47, 15, 14, 39]. Thus, in order to get an eﬃcient hardware design, the user must write restructured code with the underlying hardware architecture in mind. Writing restructured code requires signiﬁcant hardware design expertise and domain speciﬁc knowledge. Throughout the rest of this book, we go through a number of diﬀerent applications, and show how to restructure the code for a more eﬃcient hardware design. We present applications such as ﬁnite impulse response (FIR), discrete Fourier transform (DFT), fast Fourier transform (FFT), sparse matrix vector multiply (SpMV), matrix multiplication, sorting, and Huﬀman encoding. We discuss the impact of restructured code on the ﬁnal hardware generated from high-level synthesis. And we propose a restructuring techniques based on best practices. In each chapter, we aim to: 1. Highlight the importance of restructuring code to obtain FPGA designs with good quality of result, i.e., a design that has high performance and low area usage; 2. Provide restructured code for common applications; 3. Discuss the impact of the restructuring on the underlying hardware; and 4. Perform the necessary HLS directives to achieve the best design Throughout the book, we use example applications to show how to move from a baseline imple- mentation and restructure the code to provide more eﬃcient hardware design. We believe that the optimization process is best understood through example. Each chapter performs a diﬀerent set of optimization directives including pipelining, dataﬂow, array partitioning, loop optimizations, and bitwidth optimization. Additionally, we provide insight on the skills and knowledge necessary to perform the code restructuring process."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "refined_text": " HLS provides many directives to enable common code optimizations, it is impractical to provide directives for every optimization. Sometimes we must resort to rewriting the code in addition to providing directives in order to achieve a design that meets our requirements. In the next section we describe one way to signiﬁcantly restructure the merge sort code in order to increase throughput. 10.3.2 Restructured Merge Sort Looking ﬁrst at the inner loop of the merge() function, you might have found that it was diﬃcult to achieve a loop II of 1. One challenge is that there are actually four reads of in[] , but only at two diﬀerent addresses. The HLS tool must recognize that these reads are redundant, since block RAM (BRAM) memories can only support two accesses each clock. However because these reads are in diﬀerent basic blocks, it is more diﬃcult for a compiler to eliminate the redundant loads. By eliminating the redundant reads, the compiler needs to do less optimization to achieve a loop II of 1. The restructured code is shown in Figure 10.12. In addition, there is a recurrence through the f1 and f2 variables. These variables are incremented in one of the branches of the if conditional, which must be used in the next iteration to determine which locations in in[] to compare and subsequently which branch of the conditional to take. Because the ﬂoating point comparison is relatively complex, this recurrence can also limit the achievable II and clock period. The behavior of this code is shown in Figure 10.13. Although the inner loop achieves a loop II of 1, this inner loop often has a very small number of loop iterations. When the inner loop ﬁnishes, the pipeline must empty before code executing after the pipeline can execute. Although the loop pipeline is relatively short in this case, the bubble caused by the loop completing is signiﬁcant, since the number of iterations is also small. Unfortunately, because of the limits of static loop analysis, the performance of this particular code is somewhat hard to visualize. In this case, the number of iterations of the inner loop is data dependent. A common approach is to ﬂatten loop nests like these into a single loop, reducing the number of times that the pipeline must ﬂush when exiting a loop. In fact, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " = 2 4 = 16 sort. For each 4-bit digit in the 32-bit number, we perform a counting sort. The radix sort loop performs these 8 counting sort operations, iterating to 32 in steps of 4. Radix-sorting algorithms can also operate from left to right (least signiﬁcant digit ﬁrst) or right to left (most signiﬁcant digit ﬁrst). The algorithm implemented here works from least signiﬁcant digit to most signiﬁcant digit. In the code, the radix can be conﬁgured by setting the RADIX and BITS PER LOOP parameters. What would happen if we increased or decreased the radix? How would this eﬀect the number of counting sort operations that are performed? How would this change the resource usage, e.g., the size of the arrays? The code stores the current state of the sort in sorting[] and previous sorting[] . Each iteration of radix sort loop , the current value of sorting[] is copied to previous sorting[] and then the values are sorted as they are copied back into sorting[] . The digit histogram[] and digit location[] arrays are used in radix sort loop to implement the counting sort on a particular digit. The two array partition s declare that these two arrays should be completely partitioned into registers. These arrays are small and used frequently, thus this does not use many resources and can provide performance beneﬁts. Finally, current digit[] stores the digit being sorted for each item in the current iteration of the radix sort. This code also contains two assert() calls which check assumptions about the input num symbols . Since this variable determines the number of valid elements in the in array, it must be bounded by the size of that array. Such assertions are good defensive programming practice in general to ensure that the assumptions of this function are met. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "refined_text": " Up until this point, we have assumed that the data in arrays ( V In[] , M[][] , and V Out[] are accessible at anytime. In practice, however, the placement of the data plays a crucial role in the performance and resource usage. In most processor systems, the memory architecture is ﬁxed and we can only adapt the program to attempt to best make use of the available memory hierarchy, taking care to minimize register spills and cache misses, for instance. In HLS designs, we can also explore and leverage diﬀerent memory structures and often try to ﬁnd the memory structure that best matches a particular algorithm. Typically large amounts of data are stored in oﬀ-chip memory, such as DRAM, ﬂash, or even network-attached storage. However, data access times are typically long, on the order of tens to hundreds (or more) of cycles. Oﬀ-chip storage also relatively large amounts of energy to access, because large amounts of current must ﬂow through long wires. On-chip storage, in contrast can be accessed quickly and is much lower power. I contrast it is more limited in the amount of data that can be stored. A common pattern is to load data into on-chip memory in a block, where it can then be operated on repeatedly. This is similar to the eﬀect of caches in the memory hierarchy of general purpose CPUs. The primary choices for on-chip storage on in embedded memories (e.g., block RAMs) or in ﬂip-ﬂops (FFs). These two options have their own tradeoﬀs. Flip-ﬂop based memories allow for multiple reads at diﬀerent addresses in a single clock. It is also possible to read, modify, and write a Flip-ﬂop based memory in a single clock cycle. However, the number of FFs is typically limited to around 100 Kbytes, even in the largest devices. In practice, most ﬂip-ﬂop based memories should be much smaller in order to make eﬀective use of other FPGA resources. Block RAMs (BRAMs) oﬀer higher capacity, on the order Mbytes of storage, at the cost of limited accessibility. For example, a single BRAM can store more than 1-4 Kbytes of data, but access to that data is limited to two diﬀerent addresses each clock cycle. Furthermore, BRAMs are required to have a minimum amount of pipelining (i.e. the read operation must have a latency of at least one cycle). Therefore, the fundamental tradeoﬀ boils down to the required bandwidth versus the capacity. If throughput is the number one concern, all of the data would be stored in FFs. This would 87"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "refined_text": " through the radix sort loop implements a counting sort on one digit. The counting sort is a stable sort, so that elements with the same digit remain in the same order. After stable-sorting based on each digit, the array is returned in the correct ﬁnal order. We have previous discussed the histogram and preﬁx sum algorithms in Chapter 8.2 and 8.1. In this case, with simple code and complete partitioning of digit histogram[] and digit location[] , we can achieve a loop II of 1 to compute the histogram and preﬁx sum, since the number of bins is relatively small. The optimization of the re sort loop is similar. Since the only recurrence is through the relatively small digit location[] array, achieving a loop II of 1 is also straightforward. Note that this approach works primarily because we’ve conﬁgured RADIX to be relatively small. With larger values of RADIX , it would be preferable to implement digit histogram[] and digit location[] as memories, which might require additional optimization to achieve a loop II of 1. Another alternative that may make sense in the context of this code is to combine complete partitioning of digit histogram[] and digit location[] with complete unrolling of the init histogram and ﬁnd digit location loops. These loops access each location in these small arrays and perform operations with a minimal amount of logic. In this case, although unrolling loops would likely result in replicating the circuit for each loop body, fewer resources would be required to implement this circuit since the array accesses would be at constant indexes. However, for larger values of the BITS PER LOOP parameter this change becomes prohibitive, since each additional bit doubles the RADIX parameter, doubling the cost of these unrolled loops. This is a somewhat common situation with parameterized code where diﬀerent optimizations make sense with diﬀerent parameter values. What happens to the performance and utilization results when you perform the optimiza- tions on the preﬁx sum and histogram loops as speciﬁed in Chapter 8.2 and 8.1? Are these optimizations necessary in this case? Is the re sort for loop able to achieve the speciﬁed initiation interval of one cycle? Why or why not? For a large dataset ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 232,
            "refined_text": " I/O block An I/O block provides the interface between the FPGA fabric and the remainder of the system. I/O blocks can talk to memories (e.g., on-chip caches and oﬀ-chip DRAM, microprocessors (using AXI or other protocols), sensors, actuators, etc.. . 16, 233 IP core An RTL-level component with well-deﬁned interfaces enabling it to be incorporated into a larger design. Often used as a way of hiding the ‘intellectual property’ from another company, hence the name.. 18 logic synthesis The process of converting an glsrtl design into a netlist of device-level primitives.. 13 loop interchange A code transformation that changes the order of loop operations. This trans- formation is often a useful approach to addressing recurrences in code.. 94 loop pipelining Enabling multiple iterations of a loop to run concurrently sharing the same func- tional units.. 84 LUT A lookup table (LUT) is a memory where the address signal are the inputs and the corre- sponding outputs are contained in the memory entries. It is a key computational component of modern ﬁeld-programmable gate array (FPGA)s.. 13, 232 netlist An intermediate design artifact consisting of device-level primitive elements and the con- nections between them. In FPGA designs, the primitive elements include lookup table (LUT)s,ﬂip-ﬂop (FF)s, and block RAM (BRAM)s.. 13 partial loop unrolling A transformation where the body of a loop is replicated multiple times. This is often used in processor systems to reduce loop condition overhead or to provide opportunities for vectorization. In HLS, it can have a similar eﬀect, enabling more operations from the same loop nest to be considered in scheduling. This can improve the performance of a design.. 90, 126 place and route The process of converting a netlist of device-level primitives into the conﬁgura- tion of a particular device.. 13 process An individual component in a dataﬂow architecture. 114 processing element A coarse-grained concurrently executing component in a design. In HLS, this is often used in the context of a dataﬂow design.. 153 recurrence A code structure that results in a feedback loop when implemented in a circuit. Re- currences limit the throughput of the circuit.. 26, 94 ROM A Read-only Memory is a memory which is initialized to a particular value and then read but never written. In many cases the storage for ROMs can be highly optimized because their value never changes.. 96 routing channel A routing channel provides a ﬂexible set of connections between the FPGA programmable logic elements. . 15, 16, 15, 16, 233 RTL Register-transfer level (RTL) is a hardware design abstraction which models a synchronous digital circuit using logical operations that occur between between hardware registers. It is common design entry for modern digital design. 11, 123, 202 232"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " HLS information about the tripcount of loops. Using assert() statements serves many of the same purposes, with some advantages and disadvantages. One advantage of using assert() statements is that they are checked during simulation and this information can be used to further optimize the circuit. In contrast, the loop tripcount directive only aﬀects performance analysis and is not used for optimization. On the other hand, assert() statements can only be used to give bounds on variable values, but can’t be used to set expected or average values, which can only be done through the loop tripcount directive. In most cases, it is recommended to ﬁrst provide worst case bounds through assert() statements, and then if necessary also add loop tripcount directives. The body of the radix sort loop is divided into four subloops, labeled init histogram , compute histogram , ﬁnd digit location , and re sort . init histogram and compute histogram loops combine to compute the histogram of the input, based on the current digit being considered. This produces a count of the number of each times each digit occurs in digit histogram[] . The compute histogram loop also stores the current digit being sorted for each symbol in current digit[] . Next, the ﬁnd digit location loop computes a preﬁx sum of the resulting histogram values, placing the result in digit location[] . In the context of the counting sort, digit location[] contains the location of the ﬁrst symbol with each digit in the newly sorted array. Lastly, the re sort loop reorders the symbols based upon these results, placing each element in its correct place in the newly sorted array. It uses the key stored in current digit[] to select the right location from digit location[] . This location is incremeted each time through the re sort loop to place the next element with the same digit in the next location in the sorted array. Overall, each iteration 205"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "refined_text": " HLS can not determine if this streaming condition is met, then the memory can be implemented using a ping-pong buﬀer instead. The ping-pong buﬀer consists of two (or more) conceptual blocks of data, each the size of the original array. One of the blocks can be written by the source process while another block is read by the destination process. The term “ping-pong” comes from the fact that the reading and writing to each block of data alternates in every execution of the task. That is, the source process will write to one block and then switch to the other block before beginning the next task. The destination process reads from the block that the producer is not writing to. As a result, the source and destination processes can never writing and reading from the same block at the same time. A ping-pong buﬀer requires enough memory to store each communication array at least twice. FIFOs can often be signiﬁcantly smaller, although determining a minimal size for each ﬁfo is often a diﬃcult design problem. Unlike a FIFO, however, the data in a ping-pong buﬀer can be written to and read from in any order. Thus, FIFOs are generally the best choice when the data is produced and consumed in sequential order and ping-pong buﬀers are a better choice when there is not such regular data access patterns. Using the dataﬂow directive eﬀectively still requires the behavior of each individual process to be optimized. Each individual process in the pipeline can still be optimized using techniques we have seen previously such as code restructuring, pipelining, and unrolling. For example, we have already discussed some optimizations for the bit reverse function in Section 5.3. In general, it is important to optimize the individual tasks while considering overall toplevel performance goals. Many times it is best to start with small functions and understand how to optimize them in isolation. As a designer, it is often easier to comprehend what is going on in a small piece of code and hopefully determine the best optimizations quickly. After optimizing each individual function, then you can move up the hierarchy considering larger functions given particular implementations of low level functions, eventually reaching the toplevel function. However, the local optimizations must be considered in the overall scope of the goals. In particular for dataﬂow designs the achieved interval for the overall pipeline can never be smaller than the interval of each individual process. Looking again at Figure 5.7, assume that bit reverse has an interval of 8 cycles, ﬀt stage one takes 12 cycles, ﬀt stage two requires 12 cycles, and ﬀt stage three takes 14 cycles. When using dataﬂow , the overal task interval is 14, determined by the maximum of all of the tasks/functions. This means that you should be careful in balancing optimizations across diﬀerent processes with the goal of creating a balanced pipeline where the interval of each process is approximately the same. In this example, improving the interval of the bit reverse function cannot improve the overall interval of the ﬀt function. In fact, it might be beneﬁcial to increase the latency of the bit reverse function, if it can be achieved with signiﬁcantly fewer resources. 115"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "refined_text": " Lossless data compression is a key ingredient for eﬃcient data storage, and Huﬀman coding is amongst the most popular algorithms for variable length coding [33]. Given a set of data symbols and their frequencies of occurrence, Huﬀman coding generates codewords in a way that assigns shorter codes to more frequent symbols to minimize the average code length. Since it guarantees optimality, Huﬀman coding has been widely adopted for various applications [25]. In modern multi- stage compression designs, it often functions as a back-end of the system to boost compression performance after a domain-speciﬁc front-end as in GZIP [23], JPEG [57], and MP3 [59]. Although arithmetic encoding [61] (a generalized version of Huﬀman encoding which translates an entire message into a single number) can achieve better compression for most scenarios, Huﬀman coding has often been the algorithm of choice for many systems because of patent concerns with arithmetic encoding [38]. Canonical Huﬀman coding has two main beneﬁts over traditional Huﬀman coding. In basic Huﬀman coding, the encoder passes the complete Huﬀman tree structure to the decoder. Therefore, the decoder must traverse the tree to decode every encoded symbol. On the other hand, canonical Huﬀman coding only transfers the number of bits for each symbol to the decoder, and the decoder reconstructs the codeword for each symbol. This makes the decoder more eﬃcient both in memory usage and computation requirements. Thus, we focus on canonical Huﬀman coding. In basic Huﬀman coding, the decoder decompresses the data by traversing the Huﬀman tree from the root until it hits the leaf node. This has two major drawbacks: it requires storing the entire Huﬀman tree which increases memory usage. Furthermore, traversing the tree for each symbol is computationally expensive. Canonical Huﬀman encoding addresses these two issues by creating codes using a standardized canonical format. The beneﬁt of using a canonical encoding is that we only need to transmit the length of each Huﬀman codeword. A Canonical Huﬀman code has two additional properties. Firstly, longer length codes have a higher numeric value than the same length preﬁx of shorter codes. Secondly, codes with the same length increase by one as the symbol value increases. This means if we know the starting symbol for each code length, we can easily reconstruct the canonical Huﬀman code. The Huﬀman tree is essentially equivalent to a ‘sorted’ version of the original Huﬀman tree so that longer codewords are on the right-most branch of the tree and all of the nodes at the same level of the tree are sorted in order of the symbols. Figure 11.1 shows the process of creating a canonical Huﬀman code. The ﬁlter module only passes symbols with non-zero frequencies. The sort module rearranges the symbols in ascending order based upon their frequencies. Next, the create tree module builds the Huﬀman tree using 195"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 1,
            "refined_text": " Ryan Kastner, Janarbek Matai, and Stephen Neuendorﬀer 2018-05-11 Copyright 2011-2018. This work is licensed under the Creative Commons Attribution 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/ . The newest version of this book can be found at http://hlsbook.ucsd.edu . The authors welcome your feedback and suggestions. 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 4,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 5,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 5,
            "refined_text": " 9 Video Systems 157 9.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157 9.1.1 Representing Video Pixels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158 9.1.2 Digital Video Formats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 158 9.1.3 Video Processing System Architectures . . . . . . . . . . . . . . . . . . . . . 161 9.2 Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164 9.2.1 Line Buﬀers and Frame Buﬀers . . . . . . . . . . . . . . . . . . . . . . . . . . 164 9.2.2 Causal Filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 166 9.2.3 Boundary Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 9.3 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171 10 Sorting Algorithms 173 10.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173 10.2 Insertion Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174 10.2.1 Basic Insertion Sort Implementation . . . . . . . . . . . . . . . . . . . . . . . 175 10.2.2 Parallelising Insertion Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178 10.2.3 Explicit Systolic Array For Insertion Sort . . . . . . . . . . . . . . . . . . . . 180 10.3 Merge Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185 10.3.1 Basic Merge Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186 10.3.2 Restructured Merge Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189 10.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192 11 Huﬀman Encoding 195 11.1 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 195 11.2 Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199 11.2.1 Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 202 11.2.2 Sort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203 11.2.3 Create Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207 11.2.4 Compute Bit Length . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211 11.2.5 Truncate Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213 11.2.6 Canonize Tree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215 11.2.7 Create Codeword . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 217 11.2.8 Testbench . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220 11.3 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223 Bibliography 225 Glossary 231 Acronyms 235 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 6,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 6,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "refined_text": " “When someone says, ’I want a programming language in which I need only say what I wish done’, give him a lollipop.” -Alan Perlis This book focuses on the use of algorithmic high-level synthesis (HLS) to build application-speciﬁc FPGA systems. Our goal is to give the reader an appreciation of the process of creating an optimized hardware design using HLS. Although the details are, of necessity, diﬀerent from parallel programming for multicore processors or GPUs, many of the fundamental concepts are similar. For example, designers must understand memory hierarchy and bandwidth, spatial and temporal locality of reference, parallelism, and tradeoﬀs between computation and storage. This book is a practical guide for anyone interested in building FPGA systems. In a university environment, it is appropriate for advanced undergraduate and graduate courses. At the same time, it is also useful for practicing system designers and embedded programmers. The book assumes the reader has a working knowledge of C/C++ and includes a signiﬁcant amount of sample code. In addition, we assume familiarity with basic computer architecture concepts (pipelining, speedup, Amdahl’s Law, etc.). A knowledge of the RTL-based FPGA design ﬂow is helpful, although not required. The book includes several features that make it particularly valuable in a classroom envi- ronment. It includes questions within each chapter that will challenge the reader to solidify their understanding of the material. There are associated projects that were developed and used in the HLS class taught at UCSD (CSE 237C). We will make the ﬁles for these projects available to instructors upon request. These projects teach concepts in HLS using examples in the domain of digital signal processing with a focus on developing wireless communication systems. Each project is more or less associated with one chapter in the book. The projects have reference designs targeting FPGA boards distributed through the Xilinx University Program ( http://www.xilinx.com/support/university.html ). The FPGA boards are available for com- mercial purchase. Any reader of the book is encouraged to request an evaluation license of Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "refined_text": " HLS at http://www.xilinx.com . This book is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "refined_text": " primarily about HLS algorithms. There are many excellent resources that provide details about the HLS process including algorithms for scheduling, resource allocation, and binding [51, 29, 18, 26]. This book is valuable in a course that focuses on these concepts as supplementary material, giving students an idea of how the algorithms ﬁt together in a coherent form, and providing concrete use cases of applications developed in a HLS language. This book is also"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "refined_text": " primarily about the intricacies of FPGA architectures or RTL design techniques. However, again it may be valuable as supplementary material for those looking to understand more about the system-level context. This book focuses on using Xilinx tools for implementing designs, in particular Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 7,
            "refined_text": " HLS 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "refined_text": " to perform the translation from C-like code to RTL. C programming examples are given that are speciﬁc to the syntax used in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "refined_text": " HLS. In general, the book explains not only Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 8,
            "refined_text": " HLS speciﬁcs, but also the underlying generic HLS concepts that are often found in other tools. We encourage readers with access to other tools to understand how these concepts are interpreted in any HLS tool they may be using. Good luck and happy programming! 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 9,
            "refined_text": " Many people have contributed to making this book happen. Probably ﬁrst and foremost are the many people who have done research in the area of High-Level Synthesis. Underlying each of the applications in this book are many individual synthesis and mapping technologies which combine to result in high-quality implementations. Many people have worked directly on the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 9,
            "refined_text": " HLS tool over the years. From the beginning in Jason Cong’s research group at UCLA as the AutoPilot tool, to making a commercial product at AutoESL Inc., to widespread adoption at Xilinx, it’s taken many hours of engineering to build an eﬀective tool. To Zhiru Zhang, Yiping Fan, Bin Liu, Guoling Han, Kecheng Hao, Peichen Pan, Devadas Varma, Chuck Song, and many others: your eﬀorts are greatly appreciated. The idea for this book originally arose out of a hallway conversation with Salil Raje shortly after Xilinx acquired the AutoESL technology. Much thanks to Salil for his early encouragement and ﬁnancial support. Ivo Bolsens and Kees Vissers also had the trust that we could make something worth the eﬀort. Thanks to you all for having the patience to wait for good things to emerge. This book would not have been possible without substantial support from the UCSD Wireless Embedded Systems Program. This book grew out of the need to make a hardware design class that could be broadly applicable to students coming from a mix of software and hardware backgrounds. The program provided substantial resources in terms of lab instructors, teaching assistants, and supplies that were invaluable as we developed (and re-developed) the curriculum that eventually morphed into this book. Thanks to all the UCSD 237C students over the years for providing feedback on what made sense, what didn’t, and generally acting as guinea pigs over many revisions of the class and this book. Your suggestions and feedback were extremely helpful. A special thanks to the TAs for these classes, notable Alireza Khodamoradi, Pingfan Meng, Dajung Lee, Quentin Gautier, and Armaiti Ardeshiricham; they certainly felt the growing pains a lot more than the instructor. Various colleagues have been subjected to early drafts of the book, including Zhiru Zhang, Mike Wirthlin, Jonathan Corbett. We appreciate your feedback. 9"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 10,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 10,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 11,
            "refined_text": " The hardware design process has evolved signiﬁcantly over the years. When the circuits were small, hardware designers could more easily specify every transistor, how they were wired together, and their physical layout. Everything was done manually. As our ability to manufacture more transistors increased, hardware designers began to rely on automated design tools to help them in the process of creating the circuits. These tools gradually become more and more sophisticated and allowed hardware designers to work at higher levels of abstraction and thus become more eﬃcient. Rather than specify the layout of every transistor, a hardware designer could instead specify digital circuits and have electronic design automation (EDA) tools automatically translate these more abstract speciﬁcations into a physical layout. The Mead and Conway approach [50] of using a programming language (e.g., Verilog or VHDL) that compiles a design into physical chips took hold in the 1980s. Since that time, the hardware complexity has continued to increase at an exponential rate, which forced hardware designers to move to even more abstract hardware programming languages. register-transfer level (RTL) was one step in abstraction, enabling a designer to simply specify the registers and the operations performed on those registers, without considering how the registers and operations are eventually implementation. EDA tools can translate RTL speciﬁcations into a digital circuit model and then subsequently into the detailed speciﬁcation for a device that implements the digital circuit. This speciﬁcation might be the ﬁles necessary to manufacture a custom device or might be the ﬁles necessary to program an oﬀ-the-shelf device, such as an ﬁeld-programmable gate array (FPGA). Ultimately, the combination of these abstractions enables designers to build extraordinarily complex systems without getting lost in the details of how they are implemented. A non-technical perspective on the value of these abstractions can be found in [42]. high-level synthesis (HLS) is yet another step in abstraction that enables a designer to focus on larger architectural questions rather than individual registers and cycle-to-cycle operations. Instead a designer captures behavior in a program that does not include speciﬁc registers or cycles and an HLS tool creates the detailed RTL micro-architecture. One of the ﬁrst tools to implement such a ﬂow was based on behavioral Verilog and generated an RTL-level architecture also captured in Verilog[35]. Many commercial tools now use C/C++ as the input language. For the most part the language is unimportant, assuming that you have a tool that accepts the program you want to synthesize! Fundamentally, algorithmic HLS does several things automatically that an RTL designer does manually: 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS analyzes and exploits the concurrency in an algorithm."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS inserts registers as necessary to limit critical paths and achieve a desired clock frequency."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS generates control logic that directs the data path."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS implements interfaces to connect to the rest of the system."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS maps data onto storage elements to balance resource usage and bandwidth."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS maps computation onto logic elements performing user speciﬁed and automatic opti- mizations to achieve the most eﬃcient implementation. Generally, the goal of HLS is to make these decisions automatically based upon user-provided input speciﬁcation and design constraints. However, HLS tools greatly diﬀer in their ability to do this eﬀectively. Fortunately, there exist many mature HLS tools (e.g., Xilinx Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS, LegUp [13], and Mentor Catapult HLS) that can make these decisions automatically for a wide range of applications. We will use Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS as an exemplar for this book; however, the general techniques are broadly applicable to most HLS tools though likely with some changes in input language syntax/semantics. In general, the designer is expected to supply the HLS tool a functional speciﬁcation, describe the interface, provide a target computational device, and give optimization directives. More speciﬁcally, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS requires the following inputs:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " A function speciﬁed in C, C++, or SystemC"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " A design testbench that calls the function and veriﬁes its correctness by checking the results."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " A target FPGA device"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " The desired clock period"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " Directives guiding the implementation process In general, HLS tools can not handle any arbitrary software code. Many concepts that are com- mon in software programming are diﬃcult to implement in hardware. Yet, a hardware description oﬀers much more ﬂexibility in terms of how to implement the computation. It typically requires additional information to be added by the designers (suggestions or # pragmas ) that provide hints to the tool about how to create the most eﬃcient design. Thus, HLS tools simultaneously limit and enhance the expressiveness of the input language. For example, it is common to not be able to handle dynamic memory allocation. There is often limited support for standard libraries. System calls are typically avoided in hardware to reduce complexity. The ability to perform recursion is often limited. On the other hand, HLS tools can deal with a variety of diﬀerent interfaces (direct memory access, streaming, on-chip memories). And these tools can perform advanced opti- mizations (pipelining, memory partitioning, bitwidth optimization) to create an eﬃcient hardware implementation. We make the following assumptions about the input function speciﬁcation, which generally adheres to the guidelines of the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " HLS tool:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " No dynamic memory allocation (no operators like malloc() , free() , new , and delete() )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 12,
            "refined_text": " Limited use of pointers-to-pointers (e.g., may not appear at the interface) 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " System calls are not supported (e.g., abort() , exit() , printf() , etc. They can be used in the code, e.g., in the testbench, but they are ignored (removed) during synthesis."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Limited use of other standard libraries (e.g., common math.h functions are supported, but uncommon ones are not)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Limited use of function pointers and virtual functions in C++ classes (function calls must be compile-time determined by the compiler)."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " No recursive function calls."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " HLS generates the following outputs:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Synthesizable Verilog and VHDL"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " RTL simulations based on the design testbench"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Metadata at the boundaries of a design, making it easier to integrate into a system. Once an RTL-level design is available, other tools are usually used in a standard RTL design ﬂow. In the Xilinx Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " Design Suite, logic synthesis is performed, translating the RTL-level design into a netlist of primitive FPGA logical elements. The netlist (consisting of logical elements and the connections between them) is then associated with speciﬁc resources in a target device, a process called place and route (PAR). The resulting conﬁguration of the FPGA resources is captured in a bitstream, which can be loaded onto the FPGA to program its functionality. The bitstream contains a binary representation of the conﬁguration of each FPGA resource, including logic elements, wire connections, and on-chip memories. A large Xilinx UltraScale FPGAs will have over 1 billion conﬁguration bits and even the “smaller” devices have hundreds of millions of bits [64]."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 13,
            "refined_text": " It is important to understand the modern FPGA architectures since many of the HLS optimiza- tions speciﬁcally target these features. Over the decades, FPGAs have gone from small arrays of programmable logic and interconnect to massive arrays of programmable logic and interconnect with on-chip memories, custom data paths, high speed I/O, and microprocessor cores all co-located on the same chip. In this section, we discuss the architectural features that are relevant to HLS. It is not our intention (nor do we think it is necessary) to provide substantial details of the FPGA architecture. Rather we aim to give the reader enough information to understand the HLS reports and successfully use and leverage the HLS directives, many of which very speciﬁcally target modern FPGA architectural features. FPGAs are an array of programmable logic blocks and memory elements that are connected together using programmable interconnect. Typically these logic blocks are implemented as a lookup table (LUT) – a memory where the address signal are the inputs and the outputs are stored 13"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " Confguration Bit0 Confguration Bit1 Confguration Bit2 Confguration Bit3 2 in out in[1] out 0 0 0 1 0 0 1 1 0 1 0 1 in[0] out = in[1] & in[0] a) b) LUT Memory in 3 out c) FF FF Select Slice Lookup Table (LUT) Figure 1.1: Part a) shows a 2 input LUT, i.e., a 2-LUT. Each of the four conﬁguration bits can be programmed to change the function of the 2-LUT making it a fully programmable 2 input logic gate. Part b) provides a sample programming to implement an AND gate. The values in the “out” column from top to bottom correspond directly to conﬁguration bits 0 through 3. Part c) shows a simple slice that contains a slightly more complex 3-LUT with the possibility of storing the output into a ﬂip-ﬂop (FF). Note that there are nine conﬁguration bits: eight to program the 3-LUT and one to decide whether the output should be direct from the 3-LUT or the one stored in the FF. More generally, a slice is deﬁned as a small number of LUTs and FFs combined with routing logic (multiplexers) to move inputs, outputs, and internal values between the LUTs and FFs. in the memory entries. An"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " -bit LUT can be programmed to compute any"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " -input Boolean function by using the function’s truth table as the values of the LUT memory. Figure 1.1 a) shows a 2 input LUT. It has 2 2 = 4 conﬁguration bits. These bits are the ones that are programmed to determine the functionality of the LUT. Figure 1.1 b) shows the truth table for a 2 input AND gate. By using the four values in the “out” column for conﬁguration bits 0-3, we can program this 2 input LUT to be a 2 input AND gate. The functionality is easily changed by reprogramming the conﬁguration bits. This is a ﬂexible and fairly eﬃcient method for encoding smaller Boolean logic functions. Most FPGAs use a LUTs with 4-6 input bits as their base element for computation. Larger FPGAs can have millions of these programmable logic elements. How would you program the 2-LUT from Figure 1.1 to implement an XOR gate? An OR gate? How many programming bits does an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " input ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " -LUT) require? How many unique functions can a 2-LUT be programmed to implement? How many unique functions can a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " input ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " -LUT) implement? The FF is the basic memory element for the FPGA. They are typically co-located with a LUTs. LUTs can be replicated and combined with FFs and other specialized functions (e.g., a full adder) to create a more complex logic element called a conﬁgurable logic block (CLB), logic array block (LAB), or slice depending on the vendor or design tool. We use the term slice since it is the resource reported by the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 14,
            "refined_text": " HLS tool. A slice is a small number of LUTs, FFs and multiplexers combined to make a more powerful programmable logic element. The exact number and combination of LUTs, FFs and multiplexers varies by architecture, but generally a slice has only few of each of these elements. Figure 1.1 c) shows a very simple slice with one 3-LUT and 14"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 15,
            "refined_text": " ... Slice Routing Channel ... Routing Channel ... Switchbox Routing Track Switch Figure 1.2: A slice contains a small number of LUTs and FF. We show a very simple slice with one LUT and one FF though generally these have two or more of each. Slices are connected to one another using a routing channel and switchbox. These two provide a programmable interconnect that provide the data movement between the programmable logic elements (slices). The switch- box has many switches (typically implemented as pass transistors) that allow for arbitrary wiring conﬁgurations between the diﬀerent routing tracks in the routing tracks adjacent to the switchbox. one FF. A slice may also use some more complex logic functions. For example, it is common to embedded a full adder into a slice. This is an example of “hardening” the FPGA; this full adder is not programmable logic – it can only be used as a full adder, but it is common to use full adders (to make addition operations) and it is more eﬃcient to use the custom full adder as opposed to implementing a full adder on the programmable logic (which is also an option). And thus, overall it is beneﬁcial to have a hard full adder in the slice. Programmable interconnect is the other key element of an FPGA. It provides a ﬂexible network of wires to create connections between the slices. The inputs and outputs of the slice are connected to a routing channel. The routing channel contains a set conﬁguration bits can be programmed to connect or disconnect the inputs/outputs of the slice to the programmable interconnect. Routing channels are connected to switchboxes. A switchbox is a collection of switches that are implemented as pass transistors. These provide the ability to connect the routing tracks from one routing channels to another. Figure 1.2 provides an example of how a slice, routing channel, and switchbox are connected. Each input/output to the slice can be connected to one of many routing tracks that exist in a routing channel. You can think of routing tracks as single bit wires. The physical connections between the slice and the routing tracks in the routing channel are conﬁgured using a pass transistor that is programmed to perform a connect or disconnect from the input/output of the slice and the programmable interconnect. The switchboxes provides a connection matrix between routing tracks in adjacent routing chan- nels. Typically, an FPGA has a logical 2D representation. That is, the FPGA is designed in a manner that provides a 2D abstraction for computation. This is often called an “island-style” ar- chitecture where the slices represent “logic islands” that are connected using the routing channels and switchboxes. Here the switchbox connects to four routing channels to the north, east, south, 15"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 16,
            "refined_text": " I/O Block Routing Channel Slice Switchbox Figure 1.3: The two-dimensional structure of an FPGA showing an island style architecture. The logic and memory resources in the slices are interconnected using routing channels and switchboxes. The input/output (I/O) blocks provide an external interface, e.g., to a memory, microprocessor, sensor, and/or actuator. On some FPGAs, the I/O directly connects to the chip pins. Other FPGAs use the I/O to connect the programmable logic fabric to on-chip resources (e.g., a microprocessor bus or cache). and west directions. The exact programming of the switches in the routing channels and switch- boxes determines how the inputs and outputs of the programmable logic blocks are connected. The number of channels, the connectivity of the switchboxes, the structure of the slice, and other logic and circuit level FPGA architectural techniques are very well studied; we refer the interested reader to the following books and surveys on this topic for more information [12, 10, 30]. Generally, it is not necessary to understand all of the nitty-gritty details of the FPGA architecture in order to successfully use the HLS tools, rather it is more important to have a general understanding of the various FPGA resources and how the HLS optimizations eﬀect the resource usage. Figure 1.3 provides an even more abstract depiction of an FPGA programmable logic and interconnect. This provides a larger view of the 2D dimensional layout of the programmable logic (e.g., slices), routing channels, and switchboxes. The FPGA programmable logic uses I/O blocks to communicate with an external device. This may be a microcontroller (e.g., an on-chip ARM processor using an AXI interface), memory (e.g., an on-chip cache or an oﬀ-chip DRAM memory controller), a sensor (e.g., an antenna through an A/D interface), or a actuator (e.g., a motor through an D/A interface). More recently, FPGAs have integrated custom on-chip I/O handlers, e.g., memory controllers, transceivers, or analog-to-digital (and vice versa) controllers directly into 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 18,
            "refined_text": " HLS tool has many options that allow the designer to specify exactly where and how to store data. As on-chip transistors have become more plentiful, we have the ability to consider integrating even more complex hardened resources. On-chip microprocessors are a prime example of this. High- end modern FPGAs can include four or more on-chip microprocessors (e.g., ARM cores). While only the largest FPGAs include four microprocessors, it is very common to see one microprocessor included in even the smaller FPGA devices. This provides the ability to run an operating system (e.g., Linux) and quickly leverage all of its facilities, e.g., to communicate with devices through drivers, run larger software packages like OpenCV, and use more common high level programming languages like Python to get the system up and running quickly. The microprocessor is often the controller for the system. It orchestrates data movement between oﬀ-chip memories, sensors, and actuators to on-chip resources like the BRAMs. And the microprocessor can coordinate between the custom IP cores developed with the HLS tools, third party IP cores, and the board level resources. 18"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "refined_text": " Given the complexity and size of modern FPGA devices, designers have looked to impose a higher- level structure on building designs. As a result, FPGA designs are often composed of components or IP cores, structured something like Figure 1.6. At the periphery of the design, close to the I/O pins, is a relatively small amount of logic that implements timing-critical I/O functions or protocols, such as a memory controller block, video interface core or analog-to-digital converter. This logic, which we will refer to as an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "refined_text": " , is typically implemented as structural RTL, often with additional timing constraints that describe the timing relationships between signals and the variability of these signals. These constraints must also take into account interference of signals propagating through traces in a circuit board and connectors outside of the FPGA. In order to implement high speed interfaces, these cores typically make use of dedicated logic in the FPGA architecture that is close to the I/O pins for serializing and deserializing data, recovering and distributing clock signals, and delaying signals with picosecond accuracy in order to repeatably capture data in a register. The implementation of I/O interface cores is often highly customized for a particular FPGA architecture and hence are typically provided by FPGA vendors as reference designs or oﬀ-the-shelf components, so for the purposes of this book, we can ignore the detailed implementation of these blocks. Away from I/O pins, FPGA designs often contain"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 19,
            "refined_text": " , such as processor cores, on- chip memories, and interconnect switches. Other standard cores include generic, ﬁxed-function processing components, such as ﬁlters, FFTs, and codecs. Although instances of these cores are often parameterized and assembled in a wide variety of ways in a diﬀerent designs, they are not typically the diﬀerentiating element in a customers design. Instead, they represent commodity, hor- izontal technology that can be leveraged in designs in many diﬀerent application areas. As a result, they are often provided by an FPGA vendor or component provider and only rarely implemented by a system designer. Unlike interface I/O cores, standard cores are primarily synchronous circuits that require few constraints other than basic timing constraints specifying the clock period. As a 19"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " result, such cores are typically portable between FPGA families, although their circuit structure may still be highly optimized. Lastly, FPGA designs typically contain customized, application-speciﬁc"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " IP Integrator) along with I/O interface cores and standard cores to form a complete design. This"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " is similar to the way that FPGA designs are developed without the use of HLS. A newer methodology focuses on standard design templates or platforms, which combine a stable, veriﬁed composition of standard cores and I/O interface cores targeting a particular board. This"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " enables a high-level programmer to quickly integrate diﬀerent algorithms or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " within the interfaces provided by a single platform or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " . It can also make it easier to port an accelerator from one platform to another as long as the shells support the same standardized interfaces."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " HLS, and it is feasible to generate diﬀerent architectures for the same exact code by simply changing the target clock frequency. Thus, it is most appropriate to use seconds, which allows an apples-to-apples comparison between any HLS architecture. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " HLS tool reports the number of cycles and the clock frequency. These can be used to calculate the exact amount of time that some piece of code requires to compute. It is possible to optimize the design by changing the clock frequency. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " HLS tool takes as input a target clock frequency, and changing this frequency target will likely result in the tool generating diﬀerent implementations. We discuss this throughout the book. For example, Chapter 2.4 describes the constraints the are imposed on the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " HLS tool depending on the clock period. Chapter 2.5 discusses how increasing the clock period can increase the throughput by employing operation chaining. We use the term task to mean a fundamental atomic unit of behavior; this corresponds to a function invocation in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 20,
            "refined_text": " HLS. The task latency is the time between when a task starts and when it ﬁnishes. The task interval is the time between when one task starts and the next starts 20"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "refined_text": " Task Interval = 1 Task Interval = 13 Task Latency = 10 Task Latency = 13 Figure 1.7: The task interval and task latency for two diﬀerent designs. The left design is pipelined while the right one uses a more sequential implementation. or the diﬀerence between the start times of two consecutive tasks. All task input, output, and computation is bounded by the task latency, but the start of a task may not coincide with the reading of inputs and the end of a task may not coincide with writing of outputs, particularly if the task has state that is passed from one task to the next. In many designs, data rate is a key design goal, and depends on both the task interval and the size of the arguments to the function. Figure 1.7 shows two diﬀerent designs of some hypothetical application. The horizontal axis represents time (increasing to the right) and the vertical axis represents diﬀerent functional units in the design. Input operations are shaded red and and output operations are shaded orange. Active operators are represented in dark blue and inactive operators are represented in light blue. Each incoming arrow represents the start of a task and each outgoing arrow represents the completion of a task. The diagram on the left represents four executions of an architecture that starts a new task every cycle. This corresponds to a ‘fully-pipelined’ implementation. On the right, there is task with a very diﬀerent architecture, reading a block of four pieces of input data, processing it, and then producing a block of four output samples after some time. This architecture has the same latency and interval (13 cycles) and can only process one task at a time. This behavior is in contrast to the behavior of the pipelined design on the left, which has multiple tasks executing at any given instant of time. Pipelining in HLS is very similar to the concept of instruction pipelines in a microprocessor. However, instead of using a simple 5-stage pipeline where the results of an operation are usually written back to the register ﬁle before being executed on again, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "refined_text": " HLS tool constructs a circuit that is customized to run a particular program on a particular FPGA device. The tool optimizes the number of pipeline stages, the initiation interval (the time between successive data provided to the pipeline – similar to the task interval), the number and types of functional units and their interconnection based on a particular program and the device that is being targeted. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 21,
            "refined_text": " HLS tool counts cycles by determining the maximum number of registers between any input and output of a task. Thus, it is possible for a design to have a task latency of zero cycles, corresponding to a combinational circuit which has no registers in any path from input to output. Another convention is to count the input and/or output as a register and then ﬁnd the maximum 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "refined_text": " registers on any path. This would result in a larger number of cycles. We use the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 22,
            "refined_text": " HLS convention throughout this book. Note that many tools report the task interval as “throughput”. This terminology is some- what counterintuitive since a longer task interval almost inevitably results in fewer tasks being completed in a given time and thus lower data rates at the interfaces. Similarly, many tools use “latency” to describe a relationship between reading inputs and writing outputs. Unfor- tunately, in designs with complex behavior and multiple interfaces, it is hard to characterize tasks solely in terms of inputs and outputs, e.g., a task may require multiple reads or writes from a memory interface. 1.4.2 Area/Throughput Tradeoﬀs In order to better discuss some of the challenges that one faces when using an HLS tool, let’s consider a simple yet common hardware function – the ﬁnite impulse response (FIR) ﬁlter. An FIR performs a convolution on an input sequence with a ﬁxed set of coeﬃcients. An FIR is quite general – it can be used to perform diﬀerent types of ﬁlter (high pass ﬁlter, low pass, band pass, etc.). Perhaps the most simple example of an FIR is a moving average ﬁlter. We will talk more background on FIR in Chapter 2 and describe many speciﬁc optimizations that can be done using HLS. But in the meantime just consider its implementation at a high level. The C code in Figure 1.8 provides a functional or task description for HLS; this can be directly used as input to the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " #deﬁne NUM TAPS 4 void ﬁr( int input, int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " output, int taps[NUM TAPS])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " static int delay line[NUM TAPS] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " ; int result = 0; for ( int i = NUM TAPS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " delay line[i] = delay line[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " 1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " delay line[0] = input; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " NUM TAPS; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " result += delay line[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " taps[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " output = result;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " Figure 1.8: Code for a four tap FIR ﬁlter. hundreds or thousands of RISC-equivalent instructions per clock with pipelines that are hundreds of cycles deep. By default, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " . A function pipeline architecture is derived by considering the code within the function to be entirely part of a computational data path, with little control logic. Loops and branches in the code are converted into unconditional constructs. As a result, such architectures are relatively simple to characterize, analyze, and understand and are often used for simple, high data rate designs where data is pro- cessed continuously. Function pipeline architectures are beneﬁcial as components in a larger design since their simple behavior allows them to be resource shared like primitive functional units. One disadvantage of a function pipeline architecture is that not all code can be eﬀectively parallelized. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 23,
            "refined_text": " HLS tool can be directed to generate a function pipeline by placing the 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 24,
            "refined_text": " ﬁr: .frame r1,0,r15 # vars= 0, regs= 0, args= 0 .mask 0x00000000 addik r3,r0,delay line.1450 lwi r4,r3,8 # Unrolled loop to shift the delay line swi r4,r3,12 lwi r4,r3,4 swi r4,r3,8 lwi r4,r3,0 swi r4,r3,4 swi r5,r3,0 # Store the new input sample into the delay line addik r5,r0,4 # Initialize the loop counter addk r8,r0,r0 # Initialize accumulator to zero addk r4,r8,r0 # Initialize index expression to zero $L2: muli r3,r4,4 # Compute a byte oﬀset into the delay line array addik r9,r3,delay line.1450 lw r3,r3,r7 # Load ﬁlter tap lwi r9,r9,0 # Load value from delay line mul r3,r3,r9 # Filter Multiply addk r8,r8,r3 # Filter Accumulate addik r5,r5,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 24,
            "refined_text": " 1 # update the loop counter bneid r5,$L2 addik r4,r4,1 # branch delay slot, update index expression rtsd r15, 8 swi r8,r6,0 # branch delay slot, store the output .end ﬁr In Out load store branch Figure 1.9: RISC-style assembly generated from the C code in Figure 1.8, targetting the Xilinx Microblaze processor. This code is generated using microblazeel-xilinx-linux-gnu-gcc -O1 -mno-xl-soft-mul -S fir.c 24"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "refined_text": " input("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "refined_text": " ) To Register Resets and Clock Enables taps[] output("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "refined_text": " ) Task Interval = 4 Task Latency = 4 In Out Figure 1.10: A “one tap per clock” architecture for an FIR ﬁlter. This architecture can be imple- mented from the code in Figure 1.8. taps[0] taps[1] taps[2] taps[3] input("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "refined_text": " ) output("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 25,
            "refined_text": " ) Task Interval = 1 Task Latency = 1 In Out Figure 1.11: A “one sample per clock” architecture for an FIR ﬁlter. This architecture can be implemented from the code in Figure 1.8 using function pipeline. 25"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": " #pragma HLS pipeline directive in the body of a function. This directive takes a parameter that can be used to specify the initiation interval of the the pipeline, which is the same as a task interval for a function pipeline. Figure 1.10 shows one potential design – a “one tap per clock” architecture, consisting of a single multiplier and single adder to compute the ﬁlter. This implementation has a task interval of 4 and a task latency of 4. This architecture can take a new sample to ﬁlter once every 4 cycles and will generate a new output 4 cycles after the input is consumed. The implementation in Figure 1.11 shows a “one sample per clock” architecture, consisting of 4 multipliers and 3 adders. This implementation has a task interval of 1 and a task latency of 1, which in this case means that the implementation accept a new input value every cycle. Other implementations are also possible, such as architectures with “two taps per clock” or “two samples per clock”, which might be more appropriate for a particular application. We discuss more ways to optimize the FIR function in depth in Chapter 2. In practice, complex designs often include complicated tradeoﬀs between sequential architectures and parallel architectures, in order to achieve the best overall design. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": " HLS, these tradeoﬀs are largely controlled by the user, through various tool options and code annotations, such as #pragma directive. What would the task interval of a “two taps per clock” architecture for a 4 tap ﬁlter be? What about for a “two samples per clock” architecture? 1.4.3 Restrictions on Processing Rate As we have seen, the task interval of a design can be changed by selecting diﬀerent kinds of architectures, often resulting in a corresponding increase in the processing rate. However, it is important to realize that the task interval of any processing architecture is fundamentally limited in several ways. The most important limit arises from recurrences or feedback loops in a design. The other key limitation arises from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": " . A"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": " is any case where a computation by a component depends on a previous computa- tion by the same component. A key concept is that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 26,
            "refined_text": " , even in the presence of pipelining [56, 43]. As a result, analyzing recurrences in algo- rithms and generating hardware that is guaranteed to be correct is a key function of an HLS tool. Similarly, understanding algorithms and selecting those without tight recurrences is a important part of using HLS (and, in fact, parallel programming in general). Recurrences can arrive in diﬀerent coding constructs, such as static variables (Figure 1.8), se- quential loops (Figure 1.10). Recurrences can also appear in a sequential architecture and disappear when pipelining is applied (as in Figures 1.10 and 1.11). In other cases, recurrences can exist with- out limiting the throughput of a sequential architecture, but can become problematic when the design is pipelined. Another key factor that can limit processing rate are resource limitations. One form of resource limitation is associated with the wires at the boundary of a design, since a synchronous circuit can only capture or transmit one bit per wire per clock cycle. As a result, if a function with the signature int32 t f(int32 t x); is implemented as a single block at 100 MHz with a task interval of 1, then the most data that it can process is 3.2 Gbits/sec. Another form of resource limitation arises from memories since most memories only support a limited number of accesses per clock cycle. Yet another form of resource limitation comes from user constraints. If a designer limits the number of operators that can instantiated during synthesis, then this places a limit on the processing rate of the resulting design. 26"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " #deﬁne NUM TAPS 4 void block ﬁr( int input[256], int output[256], int taps[NUM TAPS], int delay line[NUM TAPS])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " int i, j; for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " 256; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " int result = 0; for (i = NUM TAPS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " #pragma HLS unroll delay line[i] = delay line[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " 1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " delay line[0] = input; for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " NUM TAPS; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " #pragma HLS pipeline result += delay line[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " taps[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": " output[j] = result;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 27,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": " Writing highly optimized synthesizable HLS code is often not a straightforward process. It involves a deep understanding of the application at hand, the ability to change the code such that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": " HLS tool creates optimized hardware structures and utilizes the directives in an eﬀective manner. Throughout the rest of the book, we walk through the synthesis of a number of diﬀerent appli- cation domains – including digital signal processing, sorting, compression, matrix operations, and video processing. In order to get the most eﬃcient architecture, it is important to have a deep understanding of the algorithm. This enables optimizations that require rewriting the code rather than just adding synthesis directives – a processing that we call code restructuring."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": " maps well into hardware, and often represents the eccentricities of the tool chain, which requires deep understanding of micro-architectural constructs in addition to the al- gorithmic functionality. Standard, oﬀ-the-shelf code typically yields very poor quality of results that are orders of magnitude slower than CPU designs, even when using HLS directives such as pipelining, unrolling, and data partitioning. Thus, it is important to understand how to write code that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 28,
            "refined_text": " We organized this book to teach by example. Each chapter presents an application (or application domain) and walks through its implementation using diﬀerent HLS optimizations. Generally, each 28"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "refined_text": " chapter focuses on a limited subset of optimization techniques. And the application complexity generally increases in the later chapters. We start with a relatively simple to understand ﬁnite impulse response (FIR) ﬁlter in Chapter 2 and move on to implement complete video processing systems in Chapter 9. There are of course beneﬁts and drawbacks to this approach. The beneﬁts are: 1) the reader can see how the optimizations are directly applicable to an application, 2) each application provides an exemplar of how to write HLS code, and 3) while simple to explain, toy examples can be hard to generalize and thus do not always make the best examples. The drawbacks to the teach by example approach are: 1) most applications requires some background to give the reader a better understanding of the computation being performed. Truly understanding the computation often necessitates an extensive discussion on the mathematical background on the application. For example, implementing the best architecture for the fast Fourier transform (FFT) requires that the designer have deep understanding of the mathematical concepts behind a discrete Fourier transform (DFT) and FFT. Thus, some chapters, e.g., Chapter 4 (DFT) and Chapter 5 (FFT), start with a non-trivial amount of mathematical discussion. This may be oﬀ-putting to a reader simply looking to understand the basics of HLS, but we believe that such a deep understanding is necessary to understand the code restructuring that is necessary to achieve the best design. 2) some times a concept could be better explained by a toy example that abstracts away some of the non-important application details. The organization for each chapter follows the same general pattern. A chapter begins by provid- ing a background on the application(s) under consideration. In many cases, this is straightforward, e.g., it is not too diﬃcult to explain matrix multiplication (as in Chapter 7) while the DFT requires a substantial amount of discussion (Chapter 4). Then, we provide a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "refined_text": " – a functionally correct but unoptimized implementation of the application using Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 29,
            "refined_text": " HLS. After that, we perform a number of diﬀerent optimizations. Some of the chapters focus on a small number of optimizations (e.g., Chapter 3 emphasizes bitwidth optimizations) while others look at a broad range of optimizations (e.g., Chapter 2 on FIR ﬁlters). The key optimizations and design meth- ods are typically introduced in-depth in one chapter and then used repeatedly in the subsequent chapters. The book is made to be read sequentially. For example, Chapter 2 introduces most of the optimizations and the later chapters provide more depth on using these optimizations. The ap- plications generally get more complex throughout the book. However, each chapter is relatively self-contained. Thus, a more advanced HLS user can read an individual chapter if she only cares to understand a particular application domain. For example, a reader interested in generating a hardware accelerated sorting engine can look at Chapter 10 without necessarily have to read all of the previous chapters. This is another beneﬁt of our teach by example approach. Table 1.1 provides an overview of the types of optimization and the chapters where they are covered in at least some level of detail. Chapter 2 provides a gentle introduction the HLS design process. It overviews several diﬀerent optimizations, and shows how they can be used in the optimization of a FIR ﬁlter. The later chapters go into much more detail on the beneﬁts and usage of these optimizations. The next set of chapters (Chapters 3 through 5) build digital signal processing blocks (CORDIC, DFT, and FFT). Each of these chapters generally focuses on one optimization: bitwidth optimiza- tion (Chapter 3), array optimizations (Chapter 4, and task pipelining (Chapter 5). For example, Chapter 3 gives an in-depth discussion on how to perform bitwidth optimizations on the CORDIC application. Chapter 4 provides an introduction to array optimizations, in particular, how to per- form array partitioning in order to increase the on-chip memory bandwidth. This chapter also talks about loop unrolling and pipelining, and the need to perform these three optimizations in concert. 29"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 30,
            "refined_text": " Table 1.1: A map describing the types of HLS optimizations and the chapters that discuss the concepts beyond them. Chapter FIR CORDIC DFT FFT SPMV MatMul Histogram Video Sorting Huﬀman 2 3 4 5 6 7 8 9 10 11 Loop Unrolling X X X X X X Loop Pipelining X X X X X X X X Bitwidth Optimization X X X Function Inlining X X Hierarchy X X X X X X Array Optimizations X X X X X X X X Task Pipelining X X X X X Testbench X X X X Co-simulation X Streaming X X X Interfacing X Chapter 5 describes the optimizations of the FFT, which itself is a major code restructuring of the DFT. Thus, the chapter gives a background on how the FFT works. The FFT is a staged algorithm, and thus highly amenable to task pipelining. The ﬁnal optimized FFT code requires a number of other optimizations including loop pipelining, unrolling, and array optimizations. Each of these chapters is paired with a project from the Appendix. These projects lead the design and optimization of the blocks, and the integration of these blocks into wireless communications systems. Chapters 6 through 11 provide a discussion on the optimization of more applications. Chapter 6 describes how to use a testbench and how to perform RTL co-simulation. It also describes array and loop optimizations; these optimizations are common and thus are used in the optimization of many applications. Chapter 7 introduces the streaming optimization for data ﬂow between tasks. Chapter 8 presents two applications (preﬁx sum and histogram) that are relatively simple, but requires careful code restructuring in order to create the optimal architecture. Chapter 9 talks extensively about how to perform diﬀerent types interfacing, e.g., with a video stream using diﬀerent bus and memory interfaces. As the name implies, the video streaming requires the use of the stream primitive, and extensive usage of loop and array optimizations. Chapter 10 goes through a couple of sorting algorithms. These require a large number of diﬀerent optimizations. The ﬁnal chapter creates a complex data compression architecture. It has a large number of complex blocks that work on a more complex data structure (trees). 30"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 31,
            "refined_text": " Finite Impulse Response (FIR) ﬁlters are commonplace in digital signal processing (DSP) applica- tions – they are perhaps the most widely used operation in this domain. They are well suited for hardware implementation since they can be implemented as a highly optimized architecture. A key property is that they are a linear transform on contiguous elements of a signal. This maps well to a data structures (e.g., FIFOs or tap delay lines) that can be implemented eﬃciently in hardware. In general, streaming applications tend to map well to FPGAs, e.g., most of the examples that we present throughout the book have some sort of streaming behavior. Two fundamental uses for a ﬁlter are signal restoration and signal separation. Signal separation is perhaps the more common use case: here one tries to isolate the input signal into diﬀerent parts. Typically, we think of these as diﬀerent frequency ranges, e.g., we may want perform a low pass ﬁlter in order remove high frequencies that are not of interest. Or we may wish to perform a band pass ﬁlter to determine the presence of a particular frequency in order to demodulate it, e.g., for isolating tones during frequency shift keying demodulation. Signal restoration relates to removing noise and other common distortion artifacts that may have been introduced into the signal, e.g., as data is being transmitted across the wireless channel. This includes smoothing the signal and removing the DC component. Digital FIR ﬁlters often deal with a discrete signal generated by sampling a continuous signal. The most familiar sampling is performed in time, i.e., the values from a signal are taken at discrete instances. These are most often sampled at regular intervals. For instance, we might sample the voltage across an antenna at a regular interval with an analog-to-digital converter. Alternatively we might sample the current created by a photo-diode to determine the light intensity. Alternatively, samples may be taken in space. For instance, we might sample the value of diﬀerent locations in an image sensor consisting of an array of photo-diodes to create a digital image. More in-depth descriptions of signals and sampling can be found in [41]. The format of the data in a sample changes depending upon the application. Digital communi- cations often uses complex numbers (in-phase and quadrature or I/Q values) to represent a sample. Later in this chapter we will describe how to design a complex FIR ﬁlter to handle such data. In image processing we often think of a pixel as a sample. A pixel can have multiple ﬁelds, e.g., red, green, and blue (RGB) color channels. We may wish to ﬁlter each of these channels in a diﬀerent way again depending upon the application. The goal of this chapter is to provide a basic understanding of the process of taking an algorithm and creating a good hardware design using high-level synthesis. The ﬁrst step in this process 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " is always to have a deep understanding of the algorithm itself. This allows us to make design optimizations like code restructuring much more easily. The next section provides an understanding of the FIR ﬁlter theory and computation. The remainder of the chapter introduces various HLS optimizations on the FIR ﬁlter. These are meant to provide an overview of these optimizations. Each of them will described in more depth in subsequent chapters."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " The output signal of a ﬁlter given an impulse input signal is its"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " . The impulse response of a linear, time invariant ﬁlter contains the complete information about the ﬁlter. As the name implies, the impulse response of an FIR ﬁlter (a restricted type of linear, time invariant ﬁlter) is ﬁnite, i.e., it is always zero far away from zero. Given the impulse response of an FIR ﬁlter, we can compute the output signal for any input signal through the process of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " . This process combines samples of the impulse response (also called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ) with samples of the input signal to compute samples of the output signal. The output of ﬁlter can be computed in other ways (for instance, in the frequency domain), but for the purposes of this chapter we will focus on computing in the time domain. The convolution of an N-tap FIR ﬁlter with coeﬃcients"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [] with an input signal"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [] is described by the general diﬀerence equation:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ] (2.1) Note that to compute a single value of the output of an N-tap ﬁlter requires N multiplies and N-1 additions."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " are a simple form of lowpass FIR ﬁlter where all the coeﬃcients are identical and sum to one. For instance in the case of the three point moving ﬁlter, the coeﬃcients are"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " = [ 1 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " 1 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " 1 3 ]. It is also called a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " due to the shape of its convolution kernel. Alternatively, you can think of a moving average ﬁlter as taking the average of several adjacent samples of the input signal and averaging them together. We can see that this equivalence by substituting 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ] in the convolution equation above and rearranging to arrive at the familiar equation for an average of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " elements:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ] = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ] (2.2) Each sample in the output signal can be computer by the above equation using"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " 1 additions and one ﬁnal multiplication by 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " . Even the ﬁnal multiplication can often be regrouped and merged with other operations. As a result, moving average ﬁlters are simpler to compute than a general FIR ﬁlter. Speciﬁcally, when"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " = 3 we perform this operation to calculate"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [12]:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [12] = 1 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [12] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [11] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [10]) (2.3) This ﬁlter is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " , meaning that the output is a function of no future values of the input. It is possible and common to change this, for example, so that the average is centered on the current sample, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [12] = 1 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [11] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [12] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 32,
            "refined_text": " [13]). While fundamentally causality is an important property for system analysis, it is less important for a hardware implementation as a ﬁnite non- causal ﬁlter can be made causal with buﬀering and/or reindexing of the data. 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "refined_text": " Moving average ﬁlters can be used to smooth out a signal, for example to remove random (mostly high frequency) noise. As the number of taps"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "refined_text": " gets larger, we average over a larger number of samples, and we correspondingly must perform more computations. For a moving average ﬁlter, larger values of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 33,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " #deﬁne N 11 #include ”ap int.h” typedef int coef t; typedef int data t; typedef int acc t; void ﬁr(data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " y, data t x)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " coef t c[N] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " 53, 0,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " 91, 0, 313, 500, 313, 0,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " 91, 0, 53"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " ; static data t shift reg[N]; acc t acc; int i; acc = 0; Shift Accum Loop: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " if (i == 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " acc += x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " c[0]; shift reg[0] = x;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " shift reg[i] = shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " 1]; acc += shift reg[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " c[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " y = acc;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 34,
            "refined_text": " Figure 2.1: A functionally correct, but highly unoptimized, implementation of an 11 tap FIR ﬁlter. 34"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " samples. This is the purpose of the shift reg[] array. This array is declared static since the data must be persistent across multiple calls to the function. The for loop is doing two fundamental tasks in each iteration. First, it performs the multiply and accumulate operation on the input samples (the current input sample x and the previous input samples stored in shift reg[] ). Each iteration of the loop performs a multiplication of one of the constants with one of the sample, and stores the running sum in the variable acc . The loop is also shifting values through shift array , which works as a FIFO. It stores the input sample x into shift array[0] , and moves the previous elements “up” through the shift array : shift array[10] = shift array[9] shift array[9] = shift array[8] shift array[8] = shift array[7]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " shift array[2] = shift array[1] shift array[1] = shift array[0] shift array[0] = x The label Shift Accum Loop: is not necessary. However it can be useful for debugging. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 35,
            "refined_text": " bits/second. Or that it can perform"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " important: a design that takes one cycle, but with a very low frequency is not necessary better than another design that takes 10 clock cycles but operates at a much higher frequency. The clock frequency is a complicated function that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS tool attempts to optimize alongside the number of cycles. Note that it is possible to specify a target frequency to the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS tool. This is done using the create clock tcl command. For example, the command create clock"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " period 5 directs the tool to target a clock period of 5 ns and equivalently a clock frequency of 200 MHz. Note that this is only a target clock frequency only and primarily aﬀects how much operation chaining is performed by the tool. After generating RTL, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " 10 ns is typically a good starting option. Once you optimize your design, you can vary the clock period and observe the results. We will describe operation chaining in more detail in the next section. Because Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " HLS deals with clock frequency estimates, it does include some margin to account for the fact that there is some error in the estimate. The goal of this margin is to ensure enough timing slack in the design that the generated RTL can be successfully placed and routed. This margin can be directly controlled using the set clock uncertainty TCL command. Note that this command only aﬀects the HLS generated RTL and is diﬀerent from the concept of clock uncertainty in RTL-level timing constraints. Timing constraints generated by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 36,
            "refined_text": " is an important optimization that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " 1 2 3 4 5 6 Cycle Number 1 2 3 Cycle Number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " 1 Cycle Number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " Clock Period = 1 ns Clock Period = 2 ns Clock Period = 5 ns a) b) c)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " HLS tool optimizes the design. This becomes even more complicated with all of the other optimizations that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " HLS tool performs. It is not that important to fully understand the entire process of the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " HLS tool. This is especially true since the tool is constantly being improved with each new release. However, it is important to have a good idea about how the tool may work. This will allow you to better comprehend the results, and even allow you to write more optimized code. Although the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 37,
            "refined_text": " HLS can generate diﬀerent diﬀerent hardware for diﬀerent target clock 37"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " Shift Accum Loop: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " shift reg[i] = shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " 1]; acc += shift reg[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " c[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " acc += x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 38,
            "refined_text": " The if / else statement inside of the for loop is ineﬃcient. For every control structure in the code, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " TDL: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " shift reg[i] = shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " 1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " shift reg[0] = x; acc = 0; MAC: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " acc += shift reg[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " c[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " Figure 2.4: A code snippet corresponding to splitting the for loop into two separate loops. change?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " We are doing two fundamental operations within the for loop. The ﬁrst part shifts the data through the shift reg array. The second part performs the multiply and accumulate operations in order to calculate the output sample."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 39,
            "refined_text": " takes these two operations and implements each of them in their own loop. While it may not intuitively seem like a good idea, it allows us to perform optimizations separately on each loop. This can be advantageous especially in cases when the resulting optimizations on the split loops are diﬀerent. The code in Figure 2.4 shows the result of manual loop ﬁssion optimization. The code snippet splits the loop from Figure 2.3 into two loops. Note the label names for the two loops. The ﬁrst is TDL and the second is MAC ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " TDL: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1; i = i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " shift reg[i] = shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1]; shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1] = shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 2];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " if (i == 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " shift reg[1] = shift reg[0];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " shift reg[0] = x; Figure 2.5: Manually unrolling the TDL loop in the ﬁr11 function."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " By default, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " HLS tool synthesizes for loops in a sequential manner. The tool creates a data path that implements one execution of the statements in the body of the loop. The data path executes sequentially for each iteration of the loop. This creates an area eﬃcient architecture; however, it limits the ability to exploit parallelism that may be present across loop iterations."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " replicates the body of the loop by some number of times (called the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " ). And it reduces the number of iterations of the loop by the same factor. In the best case, when none of the statements in the loop depend upon any of the data generated in the previous iterations, this can substantially increase the available parallelism, and thus enables an architecture that runs much faster. The ﬁrst for loop (with the label TDL ) in Figure 2.4 shifts the values up through the shift reg array. The loop iterates from largest value ( N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1 ) to the smallest value ( i = 1 ). By unrolling this loop, we can create a data path that executes a number of these shift operations in parallel. Figure 2.5 shows the result of unrolling the loop by a factor of two. This code replicates the loop body twice. Each iteration of the loop now performs two shift operations. Correspondingly, we must perform half of the number of iterations. Note that there is an additional if condition after the for loop. This is required in the case when the loop does not have an even number of iterations. In this case, we must perform the last “half” iteration by itself. The code in the if statement performs this last “half” iteration, i.e., moving the data from shift reg[0] into shift reg[1] . Also note the eﬀect of the loop unrolling on the for loop header. The decrement operation changes from i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " to i=i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 2 . This is due to the fact that we are doing two times the “work” in each iteration, thus we should decrement by 2 instead of 1. Finally, the condition for terminating the for loop changes from i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 0 to i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1 . This is related to the fact that we should make sure that the “last” iteration can fully complete without causing an error. If the last iteration of the for loop executes when i = 1 , then the second statement would try to read from shift reg["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 40,
            "refined_text": " 1] . Rather than perform this illegal operation, we do the ﬁnal shift in the if statement after the for loop. Write the code corresponding to manually unrolling this TDL for loop by a factor of three. How does this change the loop body? What changes are necessary to the loop header? Is the additional code in the if statement after the for loop still necessary? If so, how is it diﬀerent? 40"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "refined_text": " HLS tool to put all of the values in the shift reg array into registers using the directive #pragma HLS array partition variable=shift reg complete . This is an important optimization, thus we discuss the array partition directive in more detail later. A user can tell the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "refined_text": " HLS tool to automatically unroll the loop using the unroll directive. To automatically perform the unrolling done manually in Figure 2.5, we should put the directive #pragma HLS unroll factor=2 into the body of the code, right after the for loop header. While we can always manually perform loop unrolling, it is much easier to allow the tool to do it for us. It makes the code easier to read; and it will result in fewer coding errors. Unroll the TDL for loop automatically using the unroll directive. As you increase the unroll factor, how does this change the number of resources (FFs, LUTs, BRAMs, DSP48s, etc.)? How does it eﬀect the throughput? What happens when you use the array partition directive in conjunction with the unroll directive? What happens if you do not use the unroll directive? Now, consider the second for loop (with the label MAC ) in Figure 2.4. This loop multiplies a value from the array c[] with a value from the array shift array[] . In each iteration it accesses the i th value from both arrays. And then it adds the result of that multiplication into the acc variable. Each iteration of this loop performs one multiply and one add operation. Each iteration performs one read operation from array shift reg[] and array c[] . The result of the multiplication of these two values is accumulated into the variable acc . The load and multiplication operations are independent across all of the iterations of the for loop. The addition operation, depending on how it is implemented, may depend upon the values of the previous iterations. However, it is possible to unroll this loop and remove this dependency. Figure 2.6 shows the code corresponding to unrolling the MAC for loop by a factor of four. The ﬁrst for loop is the unrolled loop. The for loop header is modiﬁed in a similar manner to when we unrolled the TDL loop. The bound is changed to i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 41,
            "refined_text": " =3 , and i is decremented by a factor of 4 for each iteration of the unrolled loop. While there was loop carried dependency in the original, unrolled for , it is no longer present in the unrolled loop. The loop carried dependency came due to the acc variable; since the result of the multiply accumulate is written to this variable ever iteration, and we read from this register in every iteration (to perform the running sum), it creates a read-after-write (RAW) dependency across iterations. Note that there is not a dependency on the acc variable in the unrolled for loop due to the way this is written. Thus we are free to parallelize the four individual MAC operations in the unrolled for loop. There is an additional for loop after the unrolled for loop. This is necessary to perform any partial iterations. Just like we required the if statement in the TDL , this performs any computations 41"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " acc = 0; MAC: for (i = N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " = 3; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " = 4)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " acc += shift reg[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " c[i] + shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " c[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 1] + shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " c[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 2] + shift reg[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " c[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " 3];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " for (; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " acc += shift reg[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " c[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " Figure 2.6: Manually unrolling the MAC loop in the ﬁr11 function by a factor of four. on a potential last iteration. This occurs when the number of iterations in the original, unrolled for loop is not an even multiple of 4. Once again, we can tell the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool to automatically unroll the loop by a factor of 4 by inserting the code #pragma HLS unroll factor=4 into the MAC loop body. By specifying the optional argument skip exit check in that directive, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool will not add the ﬁnal for loop to check for partial iterations. This is useful in the case when you know that the loop will never require these ﬁnal partial iterations. Or perhaps performing this last few iterations does not have an (major) eﬀect on the results, and thus it can be skipped. By using this option, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool does not have to create that additional for loop. Thus the resulting hardware is simpler, and more area eﬃcient. The for loop is completely unrolled when no factor argument is speciﬁed. This is equivalent to unrolling by the maximum number of iterations; in this case a complete unrolling and unrolling by a factor of 11 is equivalent. In both cases, the loop body is replicated 11 times. And the loop header is unnecessary; there is no need to keep a counter or check if the loop exit condition is met. In order to perform a complete unrolling, the bounds of the loop must be statically determined, i.e., the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool must be able to know the number of iterations for the for loop at compile time. Complete loop unrolling exposes a maximal amount of parallelism at the cost of creating an implementation that requires a signiﬁcant amount of resources. Thus, it ok to perform a complete loop unroll on “smaller” for loops. But completely unrolling a loop with a large number of iterations (e.g., one that iterates a million times) is typically infeasible. Often times, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool will run for a very long time (and many times fail to complete after hours of synthesis) if the resulting loop unrolling creates code that is very large. If you design does not synthesize in under 15 minutes, you should carefully consider the eﬀect of your optimizations. It is certainly possible that large designs can take a signiﬁcant amount for the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 42,
            "refined_text": " HLS tool to synthesize them. But as a beginning user, your designs should synthesize relatively quickly. If they take a long time, that most likely means that you used some directives that signiﬁcantly expanded the code, perhaps in a way that you did not intend. 42"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " By default, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " HLS tool synthesizes for loops in a sequential manner. For example, the for loop in Figure 2.1 will perform each iteration of the loop one after the other. That is, all of the statements in the second iteration happen only when all of the statements from the ﬁrst iteration are complete; the same is true for the subsequent iterations. This happens even in cases when it is possible to perform statements from the iterations in parallel. In other cases, it is possible to start some of the statements in a later iteration before all of the statements in a former iteration are complete. This does not happen unless the designer speciﬁcally states that it should. This motivates the idea of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " , which allows for multiple iterations of the loop to execute concurrently. Consider the MAC for loop from Figure 2.4. This performs one multiply accumulate (MAC) operation per iteration. This MAC for loop has four operations in the loop body:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " Read c[] : Load the speciﬁed data from the C array."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " Read shift reg[] : Load the speciﬁed data from the shift reg array."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " : Multiply the values from the arrays c[] and shift reg[] ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " + : Accumulate this multiplied result into the acc variable. A schedule corresponding to one iteration of the MAC for loop is shown in Figure 2.7 a). The Read operations each require 2 cycles. This is due to the fact that the ﬁrst cycle provides the address to the memory, and the data from the memory is delivered during the second cycle. These two Read operations can be done in parallel since there are no dependencies between them. The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " is the number of cycles that it takes to perform one iteration of the loop body. The iteration latency for this MAC for loop is 4 cycles. The for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " is the number of cycles required to complete the entire execution of the loop. This includes time to calculate the initialization statement (e.g., i = 0 ), the condition statement (e.g., i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " = 0 ), and the increment statement (e.g., i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " ). Assuming that these three header statements can be done in parallel with the loop body execution, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " HLS tool reports the latency of this MAC for loop as 44 cycles. This is the number of iterations (11) multiplied by the iteration latency (4 cycles) plus one additional cycle to determine that the loop should stop iterating. And then you subtract one. Perhaps the only strange thing here is the “subtract 1”. We will get to that in a second. But ﬁrst, there is one additional cycle that is required at the beginning of the next iteration, which checks if the condition statement is satisﬁed (it is not) and then exits the loop. Now the “subtract 1”: Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 43,
            "refined_text": " HLS determines the latency as the cycle in which the output data is ready. In this case, the ﬁnal data is ready during Cycle 43. This would be written into a register at the end of Cycle 43 and correspondingly the 43"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " 1 2 3 4 5 Cycle Number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " a) b)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " Read shift_reg[] Read c[] 1 2 3 4 5 Cycle Number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " Read shift_reg[] Read c[]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " Read shift_reg[] Read c[] 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 44,
            "refined_text": " Read shift_reg[] Read c[] Iteration 1 Iteration 2 Iteration 3 Figure 2.7: Part a) shows a schedule for the body of the MAC for loop. Part b) shows the schedule for three iterations of a pipelined version of the MAC for loop. 44"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " beginning of Cycle 44. Another way to think of this is that the latency is equal to the maximum number of registers between the input data and the output data. Loop pipelining is an optimization that overlaps multiple iterations of a for loop. Figure 2.7 b) provides an example of pipelining for the MAC for loop. The ﬁgure shows three iterations of the for which are executed simultaneously. The ﬁrst iteration is equivalent the the non-pipelined version as depicted in Figure 2.7 a). The diﬀerence is the start times of the subsequent iterations. In the non-pipelined version, the second iteration begins after the ﬁrst iteration is completed, i.e., in Cycle 5. However, the pipelined version can start the subsequent iteration before the previous iterations complete. In the ﬁgure, Iteration 2 starts at Cycle 2, and Iteration 3 starts at Cycle 3. The remaining iterations start every consecutive cycle. Thus, the ﬁnal iteration, Iteration 11, would start at Cycle 11 and it would complete during Cycle 14. Thus, the loop latency is 14. The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool to attempt to set the II=2 . Note that this may not always be possible due to resource constraints and/or dependencies in the code. The output reports will tell you exact what the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool was able to achieve. Explicitly set the loop initiation interval starting at 1 and increasing in increments of 1 cycle. How does increasing the II eﬀect the loop latency? What are the trends? At some point setting the II to a larger value does not make sense. What is that value in this example? How do you describe that value for a general for loop? Any for loop can be pipelined, so let us now consider the TDL for loop. This for loop as a similar header to the MAC for loop. The body of the loop performs an element by element shift of data through the array as described in Section 2.3. There are two operations: one Read and one Write to the shift reg array. The iteration latency of this loop is 2 cycles. The Read operation takes two cycles, and the Write operation is performed at the end of Cycle 2. The for loop latency for this non-pipelined loop is 20 cycles. We can pipeline this loop by inserting the directive #pragma HLS pipeline II=1 after the loop header. The result of the synthesis is a loop initiation interval equal to 1 cycle. This means that we can start a loop iteration every cycle. By modifying the example slightly, we can demonstrate a scenario where the resource con- straints do not allow the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool to achieve an II=1. To do this, we explicitly set the type of memory for the shift reg array. By not specifying the resource, we leave it up to the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool to decide. But we can specify the memory using a directive, e.g., the direc- tive #pragma HLS resource variable=shift reg core=RAM 1P forces the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool to use a single port RAM. When using this directive in conjunction with the loop pipelining objective, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 45,
            "refined_text": " HLS tool will fail to pipeline this loop with an II=1. This is due to the fact that a pipelined version of this code requires both a Read and Write operation in the same cycle. This is not possible using a single port RAM. This is evident in Figure 2.8 b). Looking at Cycle 2, we re- quire a Write operation to the array shift reg in Iteration 1, and a Read operation to the same array in Iteration 2. We can modify the directive to allow HLS more scheduling freedom by removing the explicit request for II=1, e.g. #pragma HLS pipeline . In this case, HLS will automatically increase the initiation interval until it can ﬁnd a feasible schedule. 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 46,
            "refined_text": " 1 2 3 4 Cycle Number a) b) Read shift_reg[] Iteration 1 Iteration 2 Iteration 3 Write shift_reg[] Read shift_reg[] Write shift_reg[] 1 2 3 4 Cycle Number Read shift_reg[] Write shift_reg[] Read shift_reg[] Write shift_reg[] Read shift_reg[] Write shift_reg[] Figure 2.8: Part a) shows a schedule for two iterations of the body of the TDL for loop. Part b) shows the schedule for three iterations of a pipelined version of the TDL for loop with II=1. 46"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " The RESOURCE directive allows the user to force the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS tool to map an operation to a hardware core. This can be done on arrays (as shown above) and also for variables. Consider the code a = b + c; . We can use the RESOURCE directive #pragma HLS RESOURCE variable=a core=AddSub DSP to tell the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS tool that the add operation is implemented using a DSP48. There are a wide variety of cores described in the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS documentation [63]. In general, it is advised to let the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS decide the resources. If these are not satisfactory, then the designer can use directives."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " The C language provides many diﬀerent data types to describe diﬀerent kinds of behavior. Up until this point, we have focused on the int type, which Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS treats as a 32-bit signed integer. The C language also provides ﬂoating point data types, such as ﬂoat and double , and integer data types, such as char , short , long , and long long . Integer datatypes may be unsigned . All of these data types have a size which is a power of 2. The actual number of bits for these C data types may vary depending upon the processor architecture. For example, an int can be 16 bits on a micro controller and 32 bits on a general purpose processor. The C standard dictates minimum bit widths (e.g., an int is at least 16 bits) and relations between the types (e.g., a long is not smaller than an int which is not smaller than a short ). The C99 language standard eliminated this ambiguity with types such as int8 t , int16 t , int32 t , and int64 t . The primary beneﬁts of using these diﬀerent data types in software revolve around the amount of storage that the data type requires. For large arrays, using 8 bit values instead of 16 bit values can cut memory usage in half. The drawback is that the range of values that you can represent is reduced. An 8 bit signed value allows numbers in the range [-128,127] while the 16 bit signed data type has a range of [-32,768, 32,767]. Smaller operations may also require fewer clock cycles to execute, or may allow more instructions to be executed in parallel. The same beneﬁts are seen in an FPGA implementation, but they are even more pronounced. Since the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " HLS tool generates a custom data path, it will create an implementation matched to the speciﬁed data types. For example, the statement a = b"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " c will have diﬀerent latency and resource usage depending upon the data type. If all of the variables are 32 bits wide, then more primitive boolean operations need to be performed than if the variables are only 8 bits wide. As a result, more FPGA resources (or more complex resources) must be used. Additionally, more complex logic typically requires more pipelining in order to achieve the same frequency. A 32- bit multiplication might require 5 internal registers to meet the same frequency that an 8 bit multiplication can achieve with only one internal register. As a result, the latency of the operation will be larger (5 cycles instead of 1 cycle) and HLS must take this into account. Create a simple design that implements the code a = b"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 47,
            "refined_text": " c . Change the data type of the variables to char , short , int , long , and long long . How many cycles does the multiply operation take in each case? How many resources are used for the diﬀerent data types? 47"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " HLS provides"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " which allow for signed and unsigned data types of any bitwidth. There are two separate classes for unsigned and signed data types:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " Unsigned: ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " Signed: ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " where the width variable is an integer between 1 and 1024 1 . For example, ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " is an 8 bit signed value (same as char ), and ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " is a 32 bit unsigned value (same as unsigned int ). This provides a more powerful data type since it can do any bitwidth, e.g., ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " or ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 537"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " . To use these data types you must use C++ and include the ﬁle ap int.h , i.e., add the code #include ”ap int.h” in your project and use a ﬁlename ending in ‘.cpp’ 2 . Consider coeﬃcients array c[] from the ﬁr ﬁlter code in Figure 2.1. It is reprinted here for you convenience: coef t c[N] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 53, 0,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 91, 0, 313, 500, 313, 0,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 91, 0, 53"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " ; . The data type coef t is deﬁned as an int meaning that we have 32 bits of precision. This is unnecessary for these constants since they range from -91 to 500. Thus we could use a smaller data type for this. We will need a signed data type since we have positive and negative values. And the maximum absolute value for any of these 11 entries is 500, which requires"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " log 2 500"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " = 9 bits. Since we need negative numbers, we add an additional bit. Thus coef t can be declared as ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " . What is the appropriate data type for the variable i in the ﬁr function (see Figure 2.1)? We can also more accurately deﬁne the data types for the other variables in the ﬁr function, e.g., acc and shift reg . Consider the shift reg array ﬁrst. This is storing the last 11 values of the input variable x . So we know that the shift reg values can safely have the same data type as x . By “safe”, we mean that there will be no loss in precision, i.e., if shift reg had a data type with a smaller bitwidth, then some signiﬁcant bits of x would need to be eliminated to ﬁt them into a value in shift reg . For example, if x was deﬁned as 16 bits ( ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " ) and shift reg was deﬁned as 12 bits ( ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " ), then we would cut oﬀ the 4 most signiﬁcant bits of x when we stored it into shift reg . Deﬁning the appropriate data type for acc is a more diﬃcult task. The acc variable stores the multiply and accumulated sum over the shift reg and the coeﬃcient array c[] i.e., the output value of the ﬁlter. If we wish to be safe, then we calculate the largest possible value that could be stored in acc , and set the bitwidth as that. 1 1024 is the default maximum value, and this can be changed if needed. See the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 48,
            "refined_text": " HLS user manuals for more information on how to do this. 2 Similar capabilities are also available in C using the ﬁle ap cint.h 48"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " To accomplish this, we must understand how the bitwidth increases as we perform arithmetic operations. Consider the operation a = b + c where ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " b and ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " c . What is the data type for the variable a ? We can perform a worst case analysis here, and assume both a and b are the largest possible value 2 10 = 1024. Adding them together results in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " = 2024 which can be represented as an 11 bit unsigned number, i.e., ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " . In general we will need one more bit than the largest bitwidth of the two number being added. That is, when ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " b and ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " y"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " c , the data type for a is ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " z"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " = max("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ) + 1. This same is also true when adding signed integers. That handles one part of the question for assigning the appropriate data type to acc , but we must also deal with the multiply operation. Using the same terminology, we wish to determine the value the bitwidth"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " given the bitwidths"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " (i.e., ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " z"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " a , ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " b , ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " y"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " c ) for the operation a = b"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " c . While we will not go into the details, the formula is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " . Given these two formulas, determine the bitwidth of acc such that it is safe. Ultimately we are storing acc into the variable y which is an output port of the function. Therefore, if the bitwidth of acc is larger than the bitwidth of c , the value in acc will be truncated to be stored into y . Thus, is it even important to insure that the bitwidth of acc is large enough so that it can handle the full precision of the multiply and accumulate operations? The answer to the question lies in the tolerance of the application. In many digital signal pro- cessing applications, the data itself is noisy, meaning that the lower several bits may not have any signiﬁcance. In addition, in signal processing applications, we often perform numerical approxima- tions when processing data which can introduce additional error. Thus, it may not be important that we insure that the acc variable has enough precision to return a completely precise result. On the other hand, it may be desirable to keep more bits in the accumulation and then round the ﬁnal answer again to reduce the overall rounding error in the computation. Other applications, such as scientiﬁc computing, more dynamic range is often required, which may lead to the use of ﬂoating point numbers instead of integer or ﬁxed-point arithmetic. So what is the correct answer? Ultimately it is up to the tolerance of the application designer."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " To this point, we have solely looked at ﬁltering real numbers. Many digital wireless communi- cation systems deal with complex numbers using in-phase (I) and quadrature (Q) components. Fortunately, it is possible to create a complex FIR ﬁlter using real FIR ﬁlter as we describe in the following. To understand how to build a complex FIR ﬁlter from real FIR ﬁlters consider Equation 2.4. Assume that ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ) is one sample of the input data that we wish to ﬁlter. And one of the complex FIR ﬁlter coeﬃcients is denoted as ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ). There will be more than one input sample and complex coeﬃcient, but let us not worry about that for now. ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " )("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ) = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " ) (2.4) Equation 2.4 shows the multiplication of the input complex number by one coeﬃcient of the complex FIR ﬁlter. The right side of the equation shows that the real portion of the output of complex input ﬁltered by a complex FIR ﬁlter is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 49,
            "refined_text": " and the imaginary output is 49"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " fr"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " fr"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " fr"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " fr"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " out"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " out"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 50,
            "refined_text": " Figure 2.9: A complex FIR ﬁlter built from four real FIR ﬁlters. The input I and Q samples are feed into four diﬀerent real FIR ﬁlters. The FIR ﬁlters hold the in-phase (FIR I) and quadrature (FIR Q) complex coeﬃcients. 50"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " typedef int data t; void ﬁrI1(data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " y, data t x); void ﬁrQ1(data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " y, data t x); void ﬁrI2(data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " y, data t x); void ﬁrQ2(data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " y, data t x); void complexFIR(data t Iin, data t Qin, data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " Iout, data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " Qout)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " data t IinIﬁr, QinQﬁr, QinIﬁr, IinQﬁr; ﬁrI1(&IinIﬁr, Iin); ﬁrQ1(&QinQﬁr, Qin); ﬁrI2(&QinIﬁr, Qin); ﬁrQ2(&IinQﬁr, Iin);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " Iout = IinIﬁr + QinQﬁr;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " Qout = QinIﬁr"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " IinQﬁr;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " Figure 2.10: The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " HLS code to hierarchically implement a complex FIR ﬁlter using four real FIR ﬁlters."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " . This implies that we can separate the complex FIR ﬁlter operation into four real ﬁlters as shown in Figure 2.9. A complex FIR ﬁlter takes as input a complex number ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " ) and outputs a complex ﬁltered value ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " ). Figure 2.9 provides a block diagram of this complex ﬁlter using four real FIR ﬁlters (FIR I1, FIR Q1, FIR I2, FIR Q2). The ﬁlters FIR I1 and FIR I2 are equivalent, i.e., they have the exact same coeﬃcients. FIR Q1 and FIR Q2 are also equivalent. The output of each of these ﬁlters corresponds to a term from Equation 2.4. These output are then added or subtracted to provide the ﬁnal ﬁltered complex output ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " ). We used a hierarchical structure to deﬁne this complex FIR ﬁlter. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " HLS implements hierarchy using functions. Taking the previous real FIR function void ﬁr (data t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " y, data t x) we can create another function that encapsulates four versions of this ﬁr function to create the complex FIR ﬁlter. This code is shown in Figure 2.10. The code deﬁnes four functions ﬁrI1 , ﬁrQ1 , ﬁrI2 , and ﬁrQ2 . Each of these functions has the exact same code, e.g., that of the ﬁr function from Figure 2.1. Typically, we would not need to replicate the function; we could simply call the same function four times. However, this is not possible in this case due to the static keyword used within the ﬁr function for the shift reg . The function calls act as interfaces. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " HLS tool does not optimize across function boundaries. That is, each ﬁr function synthesized independently, and treated more or less as a black box in the complexFIR function. You can use the inline directive if you want the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 51,
            "refined_text": " 51"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " ﬂoat mul( int x, int y)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " return x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " y;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " ﬂoat top function( ﬂoat a, ﬂoat b, ﬂoat c, ﬂoat d)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " return mul(a, b) + mul(c, d) + mul(b, c) + mul(a, d);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " ﬂoat inlined top function( ﬂoat a, ﬂoat b, ﬂoat c, ﬂoat d)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " return a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " b + c"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " d + b"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " c + a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " d;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " Figure 2.11: A simple and trivial example to demonstrate the inline directive. The top function has four function calls to the function mul . If we placed an inline directive on the mul function, the result is similar to what you see in the function inlined top function . HLS tool may choose to inline functions on its own. These are typically functions with a small amount of code. The inline directive removes function boundaries, which may enable additional opportunities for the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " HLS tool at the cost of increasing the complexity of the synthesis problem, i.e., it will likely make the synthesis time longer. It also eliminates any overhead associated with performing the function call. It allows for diﬀerent implementations while maintaining the structure of the code, and making it hierarchical and more readable. The code in Figure 2.11 provides an example of how the inline directive works. The function inlined top function is the result of using the inline directive on the mul function. The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " HLS tool will sometimes choose to inline functions automatically. For exam- ple, it will very likely choose to inline the mul function from Figure 2.11 since it is small. You can force the tool to keep the function hierarchy by placing an inline directive in the function with the oﬀ argument. The inline directive also has a recursive argument that inlines all functions called within the inlined function to also be inlined. That is, it will recursively add the code into the parent functions from every child function. This could create a substantial code base, so use this function carefully. An inlined function will not have separate entries in the report since all of the logic will be associated with the parent function."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " This chapter describes the speciﬁcation and optimization of a FIR ﬁlter using the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " HLS tool. The goal is to provide an overview of the HLS process. The ﬁrst step in this process is understanding the basic concepts behind the computation of the FIR ﬁlter. This does not require a deep mathematical understanding, but certainly enough knowledge to write it in a manner that is synthesizable by the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 52,
            "refined_text": " HLS tool. This may require translating the code from a diﬀerent language (e.g., MATLAB, Java, C++, Python, etc.). Many times it requires rewriting to use 52"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 54,
            "refined_text": " 54"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 55,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " Target Angle φ 1 2 3 4 x = cos φ y = sin φ Figure 3.1: Using the CORDIC to calculate the functions sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " and cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " . Here, the CORDIC starts at the x-axis with a corresponding 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " angle. It then performs four iterative positive/negative rotations in increasingly smaller rotation angle with the ultimate goal of reaching the target angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " . Once we ﬁnish our rotations we are close to the target angle. We take the corresponding"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " values of the ﬁnal vector which correspond to cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " and sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " The core idea behind the CORDIC is to eﬃciently perform a set of vector rotations in a two- dimensional plane. By overlaying these rotations with some simple control decisions, we can perform a variety of fundamental operations, e.g., trigonometric, hyperbolic, and logarithmic functions, real and complex multiplication, and matrix decompositions and factorizations. CORDIC has been used in a wide range of applications including signal processing, robotics, communications, and many scientiﬁc computations. CORDIC is commonly used in FPGA design since it has a small resource usage. In the following, we walk through the process of how a CORDIC performs the sine and cosine of a given an input angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " . This is done using a series of vector rotations using only simple operations which are very eﬃcient to implement in hardware. At the high level, the algorithm works using a series of rotations with the goal of reaching the target input angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " . The key innovation that makes this eﬃcient is that the rotations can be done in a manner that requires minimal computation. In particular, we perform the rotations using multiplications by constant powers of two. This translates to simply moving bits around in hardware which is extremely eﬃcient as it does not require any sort of logic. Figure 3.1 provides a high level overview of the CORDIC procedure for calculating cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " and sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " . In this case, we start our initial rotating vector on the x-axis, i.e, at a 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 56,
            "refined_text": " angle. Then, 56"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " we perform an iterative series of rotations; in this example we only perform four rotations, but generally this is on the order of 40 rotations. Each of the subsequent rotation uses an increasingly smaller angle, which means that every iteration adds a bit more precision to the output value. At each iteration, we decide between doing a positive or negative rotation by that smaller angle. The angle values that we rotate are ﬁxed a priori; thus, we can easily store their values in a small memory and keep a running sum of the cumulative angle that we have rotated so far. If this cumulative angle is larger than our target angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " , then we perform a negative rotation. If it is smaller, then the rotation is positive. Once we have completed a suﬃcient number of rotations, we can determine the cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " and sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " by directly reading the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " values from the ﬁnal rotated vector. If our ﬁnal vector has a magnitude of 1, then"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " = cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " = sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " . We start with some terminology. The goal is to refresh your memory about some basic trigono- metric and vector concepts. Feel free to skim this if it is familiar. But keep in mind that one of the most important aspects of creating an eﬃcient hardware design is to truly understand the application; only then can the designer eﬀectively utilize the optimization directives and perform code refactoring which is required to get the most eﬃcient designs. The fundamental goal of the CORDIC algorithm is to perform a series of rotations in an eﬃcient manner. Let us start by thinking about how to generally perform a rotation. In two dimensions, the rotation matrix is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ) = � cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " � (3.1) The CORDIC uses an iterative algorithm that rotates a vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " to some target of angle which depends on the function that the CORDIC is performing. One rotation is a matrix vector mul- tiplications in the form of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 . Thus in each iteration of the CORDIC we perform the following operations to perform one rotation which is the matrix vector multiply: � cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " � (3.2) Writing out the linear equations, the coordinates of the newly rotated vector are:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " (3.3) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " (3.4) This is precisely the operation that we need to simplify. We want to perform these rotations without having to perform any multiplications. Consider ﬁrst a 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " rotation. In this case the rotation matrix is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " (90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ) = � cos 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " sin 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " cos 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " � = � 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 1 0 � (3.5) and thus we only have to perform the operations:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 cos 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 sin 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 (3.6) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 sin 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 cos 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 57,
            "refined_text": " 1 (3.7) 57"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " Putting this altogether we get � 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1 1 0 � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " � (3.8) You can see that this is requires a very minimal amount of calculation; the rotated vector simply negates the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " value, and then swaps the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " values. A two’s complement negation requires the hardware equivalent to an adder. Thus, we have achieved our goal of performing a 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " rotation eﬃciently. What if you wanted to rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ? What is the rotation matrix"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " )? What type of calculation is required for this rotation? How would one design the most eﬃcient circuit that could perform a positive and negative rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " , i.e., the direction of rotation is an input to the circuit? While it is great that we can rotate by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " , we also need to rotate by smaller angles if we wish to have any sort of good resolution in moving to the target angle. Perhaps the next natural angle that we might wish to rotate would be"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " . Using the rotation matrix from Equation 3.1, we get"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " (45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ) = � cos 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " sin 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " sin 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " cos 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2 � (3.9) Calculating out the computation for performing the rotation, we get"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1 cos 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1 sin 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2 (3.10) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1 sin 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1 cos 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2 (3.11) which when put back into matrix vector notation is �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2 � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " � (3.12) This certainly is not as eﬃcient of a computation as compared to rotating by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " . The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " rotation was ideal because the multiplication were by very simple constants (in this case 0, 1, and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 1). The key to the CORDIC is doing these rotations in an eﬃcient manner, i.e., deﬁning the rotation matrix in a way that their multiplication is trivial to compute. That is, we wish to be more like the previous"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " and less like the much more diﬃcult computation required for the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 58,
            "refined_text": " rotation that we just described. What if we “forced” the rotation matrix to be constants that were easy to multiply? For exam- ple, a multiplication by any power of two turns into a shift operation. If we set the constants in the rotation matrix to be powers of two, we could very easily perform rotations without multiplication. This is the key idea behind the CORDIC – ﬁnding rotations that are very eﬃcient to compute while minimizing any side eﬀects. We will discuss these “side eﬀects” in more detail, but there is an engineering decision that is being made here. In order to get eﬃcient computation, we have 58"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " to give up something; in this case we have to deal with the fact that the rotation also performs scaling, i.e., it changes the magnitude of the rotated vector – more on that later. To further explore the idea of “simple” rotation matrices, consider the matrix"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " () = � 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 1 1 � (3.13) with the corresponding computation for the transformation"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 (3.14) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 (3.15) with the matrix vector form of � 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 1 1 � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " � (3.16) This is certainly easy to compute and does not require any “diﬃcult” multiplications. But what is the consequence of this operation? It turns out that this performs a rotation by 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " which is perfect; we now have an eﬃcient way to perform a 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " rotation. But, this transform also scales the vector by a factor of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 2. The square root of the determinant of this matrix tells us how much the transformation scales the vector, i.e., how the length of the vector has changed. The determinant of this matrix here is 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 = 2. Thus, this operation rotates by 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " and scales by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 2. This is the tradeoﬀ that the CORDIC makes; we can make the computation for the rotation easy to compute but it has the side eﬀect that scales the length of the vector. This may or may not be a problem depending on the application. But for now, we put aside the scaling issue and focus on how to generalize the idea of performing rotations that are computationally eﬃcient to perform. Now we generalize the notion of performing eﬃcient matrix rotations, i.e., performing rota- tions by only performing addition/subtraction and multiplication by a power of two (i.e., by shift operations). Consider again the rotation matrix"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) = � cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) � (3.17) By using the following trigonometric identities, cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) = 1 � 1 + tan 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) (3.18) sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) = tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) � 1 + tan 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) (3.19) we can rewrite the rotation matrix as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " = 1 � 1 + tan 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) � 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) 1 � (3.20) If we restrict the values of tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) to be a multiplication by a factor of two, the rotation can be performed using a shifts (for the multiplication) and additions. More speciﬁcally, we use let tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ) = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " . The rotation then becomes"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " � 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 59,
            "refined_text": " 1 � (3.21) 59"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 + 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " (3.22) A few things to note here. The 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " is equivalent to a right shift by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " bits, i.e., a division by a power of two. This is essentially just a simple rewiring which does not require any sort of logical resources, i.e., it is essentially “free” to compute in hardware. This is a huge beneﬁt, but it does not come without some drawbacks. First, we are limited to rotate by angles"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " such that tan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ) = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " . We will show that this is not much of a problem. Second, we are only showing rotation in one direction; the CORDIC requires the ability to rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " . This is simple to correct by adding in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " which can have a value of 1 or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1, which corresponds to performing a positive or negative rotation. We can have a diﬀerent"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " at every iteration/rotation. Thus the rotation operation generalizes to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " � 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 � �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 � (3.23) Finally, the rotation requires a multiplication by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " is typically ignored in the iterative process and then adjusted for after the series of rotations is completed. The cumulative scaling factor is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ) ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " =0 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 + 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " (3.24) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = lim"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 6072529350088812561694 (3.25) The scaling factors for diﬀerent iterations can be calculated in advance and stored in a table. If we always perform a ﬁxed number of rotations, this is simply one constant. This correction could also be made in advance by scaling"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 0 appropriately before performing the rotations. Sometimes it is ok to ignore this scaling, which results in a processing gain"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = lim"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " =0 � 1 + 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 64676025812107 (3.26) At each iteration, we need to know the angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " of the rotation that was just performed. This is derived as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = arctan 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " . We can precompute these values for each value of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " and store them in an on-chip memory and use them as a lookup table. Additionally, we have a control decision that determines whether the rotation is clockwise or counterclockwise, i.e., we must determine if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " is 1 or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1. This decision depends on the desired CORDIC mode. For example, for calculating cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " and sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " , we keep a running sum of the cumulative angle that we have rotated so far. We compare this to the target angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " and perform a positive rotation if our current angle is less than"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " and a negative rotation is our current angle is greater than"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " . Table 3.1 provides the statistics for the ﬁrst seven iterations of a CORDIC. The ﬁrst row is the “zeroth” rotation (i.e., when"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = 0), which is a 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " rotation. It performs a scaling of the vector by a factor of 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 41421. The second row is the does a rotation by 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 5. This results in a rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " = arctan 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1 = 26"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 565"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " . This rotation scales the vector by 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 11803. The CORDIC gain is the overall scaling of the vector. In this case, it is the scaling factor of the ﬁrst two rotations, i.e., 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 58114 = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 41421"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 11803. This process continues by incrementing"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " which results in smaller and smaller rotating angles and scaling factors. Note that the CORDIC gain starts to stabilize to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 60,
            "refined_text": " 64676025812107 as described in Equation 3.26. Also, note as the angles get smaller, they have less eﬀect on the most signiﬁcant digits. 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " Describe the eﬀect if the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " th iteration on the precision of the results? That is, what bits does it change? How does more iterations change the precision of the ﬁnal result, i.e., how do the values of sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " change as the CORDIC performs more iterations? Table 3.1: The rotating angle, scaling factor, and CORDIC gain for the ﬁrst seven iterations of a CORDIC. Note that the angle decreases by approximately half each time. The scaling factor indicates how much the length the the vector increases during that rotation. The CORDIC gain is the overall increase in the length of the vector which is the product of all of the scaling factors for the current and previous rotations. i 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " Rotating Angle Scaling Factor CORDIC Gain 0 1.0 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 000"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.41421 1.41421 1 0.5 26"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 565"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.11803 1.58114 2 0.25 14"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 036"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.03078 1.62980 3 0.125 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 125"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.00778 1.64248 4 0.0625 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 576"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.00195 1.64569 5 0.03125 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 790"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.00049 1.64649 6 0.015625 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 895"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1.00012 1.64669"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " Now we describe more precisely our running example of using a CORDIC to calculate the sine and cosine of some given angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " . In order to do this, we start with a vector on the positive"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " -axis (i.e., with an initial angle of 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " ) and perform a series of rotations until we are approximately at the given angle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " . Then we can simply read the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " values of the resulting rotated vector to get the values cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " , respectively. This assumes that the amplitude of the ﬁnal vector is equal to 1, which as you will see is not too diﬃcult to achieve. Let us illustrate this with an example: calculating cos 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and sin 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " , i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " = 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " . This process is depicted graphically in Figure 3.2. Here we perform ﬁve rotations in order to give a ﬁnal vector with an angle approximately equal to 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " . Our initial vector has a 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " angle, i.e., it starts on the positive"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " -axis. The ﬁrst rotation corresponds to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " = 0 which has a 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " angle (see Table 3.1). Since we want to get to 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " , we rotate in the positive direction. The resulting rotated vector has a 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " angle; also note that its amplitude is scaled by approximately 1.414. Now, we move on to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " = 1. As we wish to get to a 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " angle, we rotate again in the positive direction. This rotation results in a vector that has an angle of 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " + 26"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 565"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " = 71"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 565"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and is scaled by a factor of 1.118; the total scaling resulting from the two rotations is 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 414"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 118 = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 581. This is the CORDIC gain. Moving on to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " = 2, we now determine that our current angle is larger than the 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " target, so we rotate by a negative angle resulting in a vector with a 57"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 529"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " angle and scaled by a factor of 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " 630. This process continues by rotating the vector with incrementally larger"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " values, resulting in smaller and smaller rotations that will eventually (approximately) reach the desired angle. Also, note that the CORDIC gain begins to stabilize as the number of rotation increases. After we perform a suﬃcient number of rotations, which is a function of the desired accuracy, we get a vector with an angle close to the desired input angle. The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 61,
            "refined_text": " values of that vector 61"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 1 2 3 4 5 1) 0°+45°=45° 2) 45°+26.565°=71.565° 3) 71.565°-14.036°=57.529° 4) 57.529°+7.125°=64.654° 5) 64.64°-3.576°=61.078° Figure 3.2: Calculating cos 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " and sin 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " using the CORDIC algorithm. Five rotations are per- formed using incrementally larger"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " values (0,1,2,3,4). The result is a vector with an angle of 61"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 078"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " . The corresponding"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " values of that vector give the approximate desired cosine and sine values. correspond to approximately"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " cos 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " sin 60"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " , which is exactly what we want if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " = 1. Since we typically know a priori the number of rotations that we will perform, we can insure that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " = 1 by setting the magnitude of the initial vector to the reciprocal of the CORDIC gain. In the case of our example, assuming that we perform ﬁve rotations as shown in Figure 3.2, this value is 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 64649"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 1 = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 60735 (the reciprocal of the CORDIC gain when"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " = 5; see Table 3.1). We can easily set the amplitude of the initial vector by starting at a vector (0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 60735"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 62,
            "refined_text": " 0). How would the answer change if we performed one more rotation? How about two (three, four, etc.) more rotations? What is the accuracy (e.g., compared to MATLAB implementation) as we perform more rotations? How many rotations do you think is suﬃcient in the general case? Is it possible to get worse accuracy by performing more rotations? Provide an example when this would occur. Figure 3.3 provides code that implements sine and cosine calculation using the CORDIC algo- rithm. It takes as input a target angle, and outputs the sine and cosine values corresponding to that angle. The code uses an array cordic phase as a lookup table that holds the angle of rotation for each iteration. This corresponds to the values in the “Rotating Angle” column in Table 3.1. We assume that the cordic.h ﬁle deﬁnes the diﬀerent data types (i.e., COS SIN TYPE and THETA TYPE ) and sets NUM ITERATIONS to some constant value. The data types can be changed to diﬀerent ﬁxed 62"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " #include ”cordic.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " THETA TYPE cordic phase[NUM ITERATIONS] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " 45, 26.565, 14.036, 7.125, 3.576, 1.790, 0.895, ..."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " ; void cordic(THETA TYPE theta, COS SIN TYPE &s, COS SIN TYPE &c)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " COS SIN TYPE current cos = 0.60735; COS SIN TYPE current sin = 0.0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " COS SIN TYPE factor = 1.0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " NUM ITERATIONS; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " int sigma = (theta"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " 0) ?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " 1 : 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " COS SIN TYPE temp cos = current cos;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " current cos = current cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " current sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " sigma"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " factor; current sin = temp cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " sigma"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " factor + current sin;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " theta = theta"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " sigma"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " cordic phase[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " factor = factor"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " s = current sin; c = current cos;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 63,
            "refined_text": " Figure 3.3: CORDIC code implementing the sine and cosine of a given angle. 63"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " θ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " x = r cos θ y = r sin θ (x,y) Figure 3.4: The ﬁgure shows a two-dimensional plane and a vector represented in both the Cartesian form ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " ) and the polar form ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " ) and provides the relationship between those two coordinate systems. or ﬂoating point types, and NUM ITERATIONS set depending on our desired accuracy, area, and throughput. Notice that the variable sigma is set as a two bit integer. Since we know that this will only take the value of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " With some modiﬁcations, the CORDIC can perform other functions. For example, it can convert between Cartesian and polar representations; we describe that in more detail in this section. The CORDIC can also do many other functions, which we will leave as an exercise to the reader. A two-dimensional vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " can be represented using a Cartesian coordinate system ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " ) or in the polar coordinate system ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " ) where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " is the radial coordinate (length of the vector) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 64,
            "refined_text": " is the angular coordinate. Both of these coordinate systems have their beneﬁts and drawbacks. For example, if we want to do a rotation, then it is easier to think about the polar form while a linear transform is more easily described using the Cartesian system. The relationship between these coordinates is shown in the following equations: 64"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " cos"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " (3.27)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " sin"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " (3.28)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 2 (3.29)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = atan2("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ) (3.30) where atan2 is a common variation on the arctangent function deﬁned as atan2("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ) =                      arctan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ) if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0 arctan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0 arctan("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 2 if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 2 if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 0 undeﬁned if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = 0 (3.31) This provides a way to translate between the two coordinate systems. However, these operations are not easy to implement in hardware. For example, sine, cosine, square root, and arctan are not simple operations and they require signiﬁcant amount of resources. But we can use the CORDIC to perform these operations using a series of simple iterative rotation operations. Given a number in Cartesian form ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ), we can calculates its radial and amplitude coordinate (i.e., convert it to polar form) using the CORDIC. To do this, we rotate the given Cartesian number to 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " . Once this rotation is complete, the amplitude is the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " value of the ﬁnal rotated vector. To determine the radial coordinate, we simply keep track of the cumulative angle of the rotations that the CORDIC performs. The angles of the rotating vector (for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ) are known and can be stored in a lookup table as done for calculating sine/cosine. Therefore, we simply need to keep track of the total rotation angle by performing an addition or subtraction of these angles, which depends on the direction of rotation. The algorithm is similar to that of calculating the sine and cosine of a given angle. We perform a set of rotations with increasing values of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " such that the ﬁnal vector resides on (close to) the positive"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " -axis (i.e., an angle of 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " ). This can be done using positive or negative rotations which is predicated on the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " value of the vector whose amplitude and phase we wish to determine. The ﬁrst step of the algorithm performs a rotation to get the initial vector into either Quadrant I or IV. This rotates the vector by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " depending on the sign of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " value of the initial vector. If the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " value is positive, we know that we are in either Quadrant I or II. A rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " will put us into Quadrant IV or I, respectively. Once we are in either of those quadrants, we can guarantee that we will be able to asymptotically approach the target 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " angle. If we are in Quadrant III or IV, the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " value of the initial vector will be negative. And a rotation by 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " will put us into Quadrant IV or I, respectively. Recall that a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " rotation is done by negating either the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " values of the vector and then swapping those values. The concept of these"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 65,
            "refined_text": " is shown in Figure 3.5. There is an issue with the ﬁnal radial value of the rotated vector; its magnitude is not the same as the initial magnitude before the rotations; it is scaled by the CORDIC gain. Or course, one could calculate the precise radial value of the vector by multiplying by the reciprocal of the 65"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " Q I 90° b) Q I 90° a) 90° Q I 90° c) Q I d) Figure 3.5: The ﬁrst step in performing a Cartesian to polar conversion is to perform a rotation by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " in order to get the initial vector into either Quadrant I or IV. Once it is in either of these two quadrants, subsequent rotations will allow the vector to reach a ﬁnal angle of 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " . At this point, the radial value of the initial vector is the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " value of the ﬁnal rotated vector and the phase of the initial vector is the summation of all the angles that the CORDIC performed. Parts a) and b) show an example with the initial"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " value is positive, which means that the vector resides in either Quadrant I or II. Rotating by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " puts them into the appropriate quadrant. Parts c) and d) show a similar situation when the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " value of the initial vector is negative. Here we wish to rotate by 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 66,
            "refined_text": " to get the vector into Quadrant I or IV. 66"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " appropriate CORDIC gain (approximately 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 647 = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 607) 1 . However, this defeats the purpose of having a CORDIC, which eliminates the need for costly multiplication. And unfortunately this multiplication cannot be performed trivially using shifts and adds. Fortunately, this factor is often not important. e.g., in amplitude shift keying used in modulation in wireless communications, you only need to know a relative magnitude. Or in other times, this amplitude gain can be compensated by other parts of the system."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " The cordic function uses currently uses common types for the variables. For example, the variable sigma is deﬁned as an int and other variables use custom data types (e.g., THETA TYPE and COS SIN TYPE ). In many cases, HLS tools are able to further optimize the representation of these values to simplify the generated hardware. For instance, in Figure 3.3, the variable sigma is restricted to be either 1 or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " HLS. The next section starts with a fundamental background on number representation, and then proceeds to discuss the arbitrary precision variables available in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " HLS. 3.5.1 Binary and Hexadecimal Numbers Computers and FPGAs typically represent numbers using"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " , which enables numbers to be eﬃciently represented using on-oﬀ signals called binary digits, or simply"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " HLS on how to declare arbitrary data types. This is a key idea for optimizing the number representation of the cordic function and any HLS code. When we write a normal integer, such as 4062, what we really mean is implicitly (4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 1000) + (0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 100) + (6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 10) + (2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 67,
            "refined_text": " 1) = 4062, or written in columns: 1 Recall that the CORDIC gain is a function of the number of rotations as show in Table 3.1. 67"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 10 3 10 2 10 1 10 0 unsigned 4 0 6 2 = 4062 A binary number is similar, except instead of using digits from zero to nine and powers of ten, we use numbers from zero to one and powers of 2: 2 3 2 2 2 1 2 0 unsigned 1 0 1 1 = 11 since (1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 8) + (0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 4) + (1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 2) + (1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 1) = 11. To avoid ambiguity, binary numbers are often preﬁxed with ”0b”. This makes it obvious that 0b1011 is the number decimal 11 and not the number 1011. The bit associated with the highest power of two is the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " , and the bit associated with the lowest power of two is the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " . Hexadecimal numbers use the digits representing numbers from zero to 15 and powers of 16: 16 3 16 2 16 1 16 0 unsigned 8 0 3 15 = 32831 In order to avoid ambiguity, the digits from 10 to 15 are represented by the letters ”A” through ”F”, and hexadecimal numbers are preﬁxed with ”0x”. So the number above would normally be written in C code as 0x803F . Note that binary representation can also represent fractional numbers, usually called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " numbers, by simply extending the pattern to include negative exponents, so that ”0b1011.01” is equivalent to: 2 3 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 2 unsigned 1 0 1 1 0 1 = 11.25 since 8 + 2 + 1 + 1 4 = 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 25. Unfortunately, the C standard doesn’t provide a way of specifying constants in binary representation, although gcc and many other compilers allow integer constants (without a decimal point) to be speciﬁed with the ”0b” preﬁx. The C99 standard does provide a way to describe ﬂoating-point constants with hexadecimal digits and a decimal exponent, however. Note that the decimal exponent is required, even if it is zero. ﬂoat p1 = 0xB.4p0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " ﬂoat p2 = 0xB4p"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 4;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " Notice that in general, it is only necessary to write non-zero digits and any digits not shown can be assumed to be zero without changing the represented value of an unsigned number. As a result, it is easy to represent the same value with more digits: simply add as many zero digits as necessary. This process is often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " . Note that each additional digit increases the amount of numbers that can be represented. Adding an additional bit to a binary number doubles the amount of numbers that can be represented, while an additional hexadecimal digit increases the amount of numbers by a factor of 16. 2 7 2 6 2 5 2 4 2 3 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 2 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 3 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " 4 unsigned 0 0 0 0 1 0 1 1 0 1 0 0 = 11.25 Note that it is possible to have any number of bits in a binary number, not just 8, 16, or 32. SystemC [2], for instance, deﬁnes several template classes for handling arbitrary precision integers and ﬁxed-point numbers (including sc int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " , sc uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " , sc bigint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " , sc ubigint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 68,
            "refined_text": " , 68"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " sc ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " , and sc uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " ). These classes can be commonly used in HLS tools, although they were originally deﬁned for system modeling and not necessarily synthesis. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " HLS, for in- stance, includes similar template classes ( ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " , ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " , ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " , and ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " ) that typically work better than the SystemC template classes, both in simulation and synthesis. Arbitrary precision numbers are even well deﬁned (although not terribly useful) with zero digits. List all the numbers that are representable with zero digits. 3.5.2 Negative numbers Negative numbers are slightly more complicated than positive numbers, partly because there are several common ways to do it. One simple way is represent negative numbers with a sign bit, often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " representation. This representation just includes an additional bit to the front of the number to indicate whether it is signed or not. One somewhat odd thing about signed-magnitude representation is that there is more than one way to represent zero. This tends to make even apparently simple operations, like operator ==() , more complex to implement. +/- 2 1 2 0 signed magnitude 0 1 1 = 3 0 1 0 = 2 0 0 1 = 1 0 0 0 = 0 1 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 0 1 0 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 1 1 1 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 2 1 1 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 3 Another way to represent negative numbers is with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " representation. This representation adds a constant oﬀset (usually equal in magnitude to the value of the largest bit) to the value, which are otherwise treated as positive numbers: 2 2 2 1 2 0 biased 1 1 1 = 3 1 1 0 = 2 1 0 1 = 1 1 0 0 = 0 0 1 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 1 0 1 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 2 0 0 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 3 0 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " 4 However by far the most common technique for implementing negative numbers is known as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " . In two’s complement representation, the most signiﬁcant bit represents the sign of the number (as in signed-magnitude representation), and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 69,
            "refined_text": " whether or not an oﬀset is applied. One way of thinking about this situation is that the high order bit represents a negative contribution to the overall number. 69"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 2 2 2 1 2 0 two’s complement 0 1 1 = 3 0 1 0 = 2 0 0 1 = 1 0 0 0 = 0 1 1 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 1 1 1 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 2 1 0 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 3 1 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 2 4 2 3 2 2 2 1 2 0 two’s complement 0 0 0 1 1 = 3 0 0 0 1 0 = 2 0 0 0 0 1 = 1 0 0 0 0 0 = 0 1 1 1 1 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 1 1 1 1 1 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 2 1 1 1 0 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 3 1 1 1 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 4 One signiﬁcant diﬀerence between unsigned numbers and two’s complement numbers is that we need to know exactly how many bits are used to represent the number, since the most signiﬁcant bit is treated diﬀerently than the remaining bits. Furthermore, when widening a signed two’s complement number with more bits, the sign bit is replicated to all the new most signiﬁcant bits. This process is normally called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " . For the rest of the book, we will generally assume that all signed numbers are represented in two’s complement unless otherwise mentioned. What is the largest positive number representable with N bits in two’s complement? What is the largest negative number? Given a positive number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " , how can you ﬁnd the two’s complement representation of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " ? What is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 0 in two’s complement? if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " is the largest negative number representable with N bits in two’s complement, what is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " ? 3.5.3 Overﬂow, Underﬂow, and Rounding"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " occurs when a number is larger than the largest number that can be represented in a given number of bits. Similarly,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " occurs when a number is smaller than the smallest number that can be represented. One common way of handling overﬂow or underﬂow is to simply drop the most signiﬁcant bits of the original number, often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " . 2 5 2 4 2 3 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 2 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 3 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 4 0 0 1 0 1 1 0 1 0 0 = 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 25 0 1 0 1 1 0 1 0 0 = 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 25 1 0 1 1 0 1 0 0 = 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 25 0 1 1 0 1 0 0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 70,
            "refined_text": " 25 70"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " Handling overﬂow and underﬂow by wrapping two’s complement numbers can even cause a positive number to become negative, or a negative number to become positive."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 2 3 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 2 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 3 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4 two’s complement 1 0 1 1 0 1 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 75"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 2 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 3 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4 two’s complement 0 1 1 0 1 0 0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 25 Similarly, when a number cannot be represented precisely in a given number of fractional bits, it is necessary to apply"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " . Again, there are several common ways to round numbers. The simplest way is to just drop the extra fractional bits, which tends to result in numbers that are more negative. This method of rounding is often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " . When rounding down to the nearest integer, this corresponds to the ﬂoor() function, although it’s possible to round to other bit positions as well. 0b0100.00 = 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.11 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 75 0b0011.10 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b0011.01 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 25 0b0011.00 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1100.00 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.11 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 25 0b1011.10 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b1011.01 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 75 0b1011.00 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " Round to Negative Inﬁnity"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0b0100.0 = 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.1 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b0011.1 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b0011.0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1100.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b1011.1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b1011.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 It is also possible to handle rounding in other similar ways which force rounding to a more positive numbers (called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " and corresponding to the ceil() function), to smaller absolute values (called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " and corresponding to the trunc() function), or to larger absolute values (called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " and corresponding to the round() function)). None of these operations always minimizes the error caused by rounding, however. A better approach is called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " , or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " and is implemented in the lrint() function. As you might expect, this approach to rounding always picks the nearest representable number. In addition, If there are two numbers equally distant, then the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " one is always picked. An arbitrary-precision number is even if the last digit is zero. This approach is the default handling of rounding with IEEE ﬂoating point, as it not only minimizes rounding errors but also ensures that the rounding error tends to cancel out when computing sums of random numbers. 0b0100.00 = 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.11 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 75 0b0011.10 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b0011.01 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 25 0b0011.00 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1100.00 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.11 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 25 0b1011.10 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b1011.01 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 75 0b1011.00 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " Round to Nearest Even"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0b0100.0 = 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0100.0 = 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.1 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b0011.0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b0011.0 = 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1100.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1100.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5 0b1011.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 0b1011.0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 71,
            "refined_text": " 0 71"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "refined_text": " 3.5.4 Binary arithmetic Binary addition is very similar to decimal addition, simply align the binary points and add digits, taking care to correctly handle bits carried from one column to the next. Note that the result of adding or subtracting two N-bit numbers generally takes N+1 bits to represent correctly without overﬂow. The added bit is always an additional most signiﬁcant bit for fractional numbers 2 3 2 2 2 1 2 0 unsigned 0 1 1 = 3 + 0 1 1 = 3 = 0 1 1 0 = 6 2 3 2 2 2 1 2 0 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "refined_text": " 1 unsigned 1 1 1 1 = 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "refined_text": " 5 + 1 1 1 1 = 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "refined_text": " 5 = 1 1 1 1 0 = 15 Note that since the result of subtraction can be negative, the ’extra bit’ becomes the sign-bit of a two’s complement number. 2 3 2 2 2 1 2 0 unsigned 0 0 1 1 = 3 - 0 0 1 1 = 3 = 0 0 0 0 = 0 -2 4 2 3 2 2 2 1 2 0 unsigned 0 0 1 1 = 3 - 1 1 1 1 = 15 = 1 0 1 0 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 72,
            "refined_text": " 12 (two’s complement) Multiplication for binary numbers also works similarly to familiar decimal multiplication. In general, multiplying 2 N-bit numbers results in a 2*N bit result. 2 6 2 5 2 4 2 3 2 2 2 1 2 0 two’s complement 1 0 0 1 = 9 * 1 0 0 1 = 9 1 0 0 1 = 9 0 0 0 0 = 0 0 0 0 0 = 0 + 1 0 0 1 = 72 1 0 1 0 0 0 1 = 81 Operations on signed numbers are somewhat more complex because of the sign-bit handling and won’t be covered in detail. However, the observations regarding the width of the result still applies: adding or subtracting two N-bit signed numbers results in an N+1-bit result, and Multiplying two N-bit signed numbers results in an 2*N-bit result. 72"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " What about division? Can the number of bits necessary to exactly represent the result a division operation of 2 N-bit numbers be computed? 3.5.5 Representing Arbitrary Precision Integers in C and C++ According to the C99 language standard, the precision of many standard types, such as int and long are implementation deﬁned. Although many programs can be written with these types in a way that does not have implementation-deﬁned behavior, many cannot. One small improvement is the inttypes.h header in C99, which deﬁnes the types int8 t , int16 t , int32 t , and int64 t repre- senting signed numbers of a given width and the corresponding types uint8 t , uint16 t , uint32 t , and uint64 t representing unsigned numbers. Although these types are deﬁned to have exactly the given bitwidths, they can still be somewhat awkward to use. For instance, even relatively simple programs like the code below can have unexpected behavior. #include ”inttypes.h” uint16 t a =0x4000; uint16 t b = 0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " uint32 t p = a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " b; Although the values of a and b can be represented in 16 bits and their product ( 0x10000000 ) can be represented exactly in 32 bits, the behavior of this code by the conversion rules in C99 is to ﬁrst convert a and b to type int , compute an integer result, and then to extend the result to 32 bits. Although uncommon, it is correct for a C99 compiler to only have integers with only 16 bits of precision. Furthermore, the C99 standard only deﬁnes 4 bitwidths for integer numbers, while FPGA systems often use a wide variety of bitwidths for arithmetic. Also, printing these datatypes using printf() is awkward, requiring the use of additional macros to write portable code. The situation is even worse if we consider a ﬁxed-point arithmetic example. In the code below, we consider a and b to be ﬁxed point numbers, and perform normalization correctly to generate a result in the same format. #include ”inttypes.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " uint16 t a =0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " uint16 t b = 0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " uint32 t p = (a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " b)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " 12; The correct code in both cases requires casting the input variables to the width of the result before multiplying. #include ”inttypes.h” uint16 t a = 0x4000; uint16 t b = 0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " uint32 t p = (uint32 t) a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 73,
            "refined_text": " (uint32 t) b; #include ”inttypes.h” 73"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " uint16 t a =0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " uint16 t b = 0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " uint32 t p = ( (uint32 t) a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " (uint32 t) b )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 12; When using integers to represent ﬁxed-point numbers, it is very important to document the ﬁxed point format used, so that normalization can be performed correctly after multiplication. Usually this is described using ”Q” formats that give the number of fractional bits. For instance, ”Q15” format uses 15 fractional bits and usually applies to 16 bit signed variables. Such a variable has values in the interval ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 1). Similarly ”Q31” format uses 31 fractional bits. For these reasons, it’s usually preferable to use C++ and the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " HLS template classes ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " , ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " , ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " , and ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " to represent arbitrary precision numbers. The ap int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " and ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " template classes require a single integer template parameter that deﬁnes their width. Arithmetic functions generally produce a result that is wide enough to contain a correct result, following the rules in section 3.5.4. Only if the result is assigned to a narrower bitwidth does overﬂow or underﬂow occur. #include ”ap int.h” ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 15"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " a =0x4000; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 15"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " b = 0x4000;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 30"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " p = a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " b; The ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " and ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " template classes are similar, except that they require two integer template arguments that deﬁne the overall width (the total number of bits) and the number of integer bits. #include ”ap ﬁxed.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 15,12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " a = 4.0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 15,12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " b = 4.0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 18,12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " p = a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " b; Note that the ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " and ap uﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " template classes require the overall width of the number to be positive, but the number of integer bits can be arbitrary. In particular, the number of integer bits can be 0 (indicating a number that is purely fractional) or can be the same as the overall width (indicating a number that has no fractional part). However, the number of integer bits can also be negative or greater than the overall width! What do such formats describe? What are the largest and smallest numbers that can be represented by an ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 8,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ? ap ﬁxed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " 8,12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 74,
            "refined_text": " ? 74"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "refined_text": " 3.5.6 Floating Point Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "refined_text": " In this section, we provide some brief thoughts and suggestions on the best way to optimize the CORDIC function. We focus on how the diﬀerent optimizations change the precision of the result while providing the ability tradeoﬀ between throughput, precision, and area. Ultimately, CORDIC produces an approximation. The error on that approximation generally decreases as the number of iterations increases. This corresponds to the number of times that we execute the for loop in the cordic function, which is set by NUM ITERATIONS . Even if we perform a very large number of iterations, we may still have an approximation. One reason for this is that we may approach but never exactly match the desired target angle. We can, however, tune precision by choosing to perform greater or fewer iterations. All that needs to change in the algorithm is to modify the value of NUM ITERATIONS . The choice of NUM ITERATIONS depends on the number of digits of precision required by application using this CORDIC core. How do the area, throughput, and precision of the sine and cosine results change as you vary the data type? How does the constant NUM ITERATIONS aﬀect the area, throughput, and precision? How does this aﬀect the initial values of current cos and current sin ? Do you need to modify the array cordic phase ? Can you optimize the data types depending on the value of NUM ITERATIONS ? The computations in the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 75,
            "refined_text": " loop occupy most of the overall time. How do you best perform code transforms and/or use pragmas to optimize it? 75"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " Setting the variable"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " can be eﬃcient in hardware using a two input multiplexer. Can you transform the code so that the high level synthesis tool implements it in this manner? The current code assumes that the given angle is between"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " . Can you add code to allow it to handle any angle between"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " 180"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " ?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 76,
            "refined_text": " HLS provides a method to speciﬁcally generate a large number of data types. We provide a background on number representation and introduce these custom data types. In general, there is a complex relationship between precision, resource utilization, and perfor- mance. We touch on some of these tradeoﬀs, and provide some insights on how to best optimize the cordic function. We leave many of the optimization as well as the analysis of these tradeoﬀs, as an exercise to the reader. 76"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " The Discrete Fourier Transform (DFT) plays a fundamental role in digital signal processing systems. It is a method to change a discrete signal in the time domain to the same signal in the frequency domain. By describing the signal as the sum of sinusoids, we can more easily compute some functions on the signal, e.g., ﬁltering and other linear time invariant functions. Therefore, it plays an important role in many wireless communications, image processing, and other digital signal processing applications. This chapter provides an introduction to the DFT with a focus on its optimization for an FPGA implementation. At its core, the DFT performs a matrix-vector multiplication where the matrix is a ﬁxed set of coeﬃcients. The initial optimizations in Chapter 4.6 treat the DFT operation as a simpliﬁed matrix-vector multiplication. Then, Chapter 4.6 introduces a complete implementation of the DFT in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " HLS code. Additionally, we describe how to best optimize the DFT computation to increase the throughput. We focus our optimization eﬀorts on array partitioning optimizations in Chapter 4.5. There is a lot of math in the ﬁrst two sections of this chapter. This may seem superﬂuous, but is necessary to fully comprehend the code restructuring optimizations, particularly for understanding the computational symmetries that are utilized by the Fast Fourier Transform (FFT) in the next chapter. That being said, if you are more interested in the HLS optimizations, you can skip to Chapter 4.6."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " In order to explain the discrete Fourier transform, we must ﬁrst understand the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " . The Fourier series provides an alternative way to look at a real valued, continuous, periodic signal where the signal runs over one period from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " . The seminal result from Jean Baptiste Joseph Fourier states that any continuous, periodic signal over a period of 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " can be represented by a sum of cosines and sines with a period of 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " . Formally, the Fourier Series is given as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 0 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 1 cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 2 cos(2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 3 cos(3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 1 sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 2 sin(2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 3 sin(3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 0 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " =1 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " )) (4.1) where the coeﬃcients"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 77,
            "refined_text": " are computed as 77"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.2) There are several things to note. First, the coeﬃcients"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " in Equation 4.2 are called the Fourier coeﬃcients. The coeﬃcient"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 is often called the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " term (a reference to early electrical current analysis), the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1 frequency is called the fundamental, while the other frequencies ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 2) are called higher harmonics. The notions of fundamental and harmonic frequencies originate from acoustics and music. Second, the function"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " , and the cos() and sin() functions all have a period of 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ; changing this period to some other value is straightforward as we will show shortly. The DC value"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 is equivalent to the coeﬃcient of cos(0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) = 1, hence the use of symbol"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " . The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 value is not needed since sin(0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) = 0. Finally, the relation between the function"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " and its Fourier series is approximate in some cases when there are discontinuities in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (known as Gibbs phenomenon). This is a minor issue, and only relevant for the Fourier series, and not other Fourier Transforms. Therefore, going forward we will disregard this “approximation” ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) for “equality” (=). Representing functions that are periodic on something other than"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " requires a simple change in variables. Assume a function is periodic on ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ] rather than ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ]. Let"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.3) and d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.4) which is a simple linear translation from the old ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ] interval to the desired ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ] interval. Solving for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " and substituting"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " into Equation 4.1 gives"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " =1 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " )) (4.5) Solving for the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " coeﬃcients is similar:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " 0 = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.6) We can use Euler’s formula"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) to give a more concise formulation"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.7) In this case, the Fourier coeﬃcients"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " are a complex exponential given by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " = 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " d"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " (4.8) which assumes that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " ) is a periodic function with a period of 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 78,
            "refined_text": " , i.e., this equation is equivalent to Equation 4.1. 78"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " The Fourier coeﬃcients"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " , and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " are related as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ) for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " =    1 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 0 1 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " = 0 1 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 0 (4.9) Note that the equations for deriving"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " , and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " introduce the notion of a “negative” fre- quency. While this physically does not make much sense, mathematically we can think about as a “negative” rotation on the complex plane. A “positive” frequency indicates that the complex number rotates in a counterclockwise direction in the complex plane. A negative frequency simply means that we are rotating in the opposite (clockwise) direction on the complex plane. This idea is further illustrated by the relationship of cosine, sine, and the complex exponential. Cosine can be viewed as the real part of the complex exponential and it can also be derived as the sum of two complex exponentials – one with a positive frequency and the other with a negative frequency as shown in Equation 4.10. cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ) = Re"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 2 (4.10) The relationship between sine and the complex exponential is similar as shown in Equation 4.11. Here we subtract the negative frequency and divide by 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " . sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ) = Im"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " (4.11) Both of these relationships can be visualized as vectors in the complex plane as shown in Figure 4.1. Part a) shows the cosine derivation. Here we add the two complex vectors"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " . Note that the sum of these two vectors results in a vector on the real (in-phase or I) axis. The magnitude of that vector is 2 cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ). Thus, by dividing the sum of these two complex exponentials by 2, we get the value cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ) as shown in Equation 4.10. Figure 4.1 b) shows the similar derivation for sine. Here we are adding the complex vectors"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " . The result of this is a vector on the imaginary (quadrature or Q) axis with a magnitude of 2 sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ). Therefore, we must divide by 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " in order to get sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " ). Therefore, this validates the relationship as described in Equation 4.11."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " The previous section provided a mathematical foundation for the Fourier series, which works on signals that are continuous and periodic. The Discrete Fourier Transform requires"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " periodic signals. The DFT converts a ﬁnite number of equally spaced samples into a ﬁnite number of complex sinusoids. In other words, it converts a sampled function from one domain (most often the time domain) to the frequency domain. The frequencies of the complex sinusoids are integer multiples of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 79,
            "refined_text": " which is deﬁned as the frequency related to the sampling period of the input function. Perhaps the most important consequence of the discrete and periodic signal is that it can be represented by a ﬁnite set of numbers. Thus, a digital system can be used to implement the DFT. The DFT works on input functions that uses both real and complex numbers. Intuitively, it is easier to ﬁrst understand how the real DFT works, so we will ignore complex numbers for the time being and start with real signals in order to gain ease into the mathematics a bit. 79"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " Q I a) Q I x b) j sin(x) e jx -e -jx 2j sin(x) x e jx e -jx cos(x) 2 cos(x) Figure 4.1: A visualization of the relationship between the cosine, sine, and the complex exponential. Part a) shows the sum of two complex vectors,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " . The result of this summation lands exactly on the real axis with the value 2 cos("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " ). Part b) shows a similar summation except this time summing the vectors"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " . This summation lands on the imaginary axis with the value 2 sin("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " ). A quick note on terminology: We use lower case function variables to denote signals in the time domain. Upper case function variables are signals in the frequency domain. We use () for continuous functions and [] for discrete functions. For example,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " () is a continuous time domain function and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " () is its continuous frequency domain representation. Similarly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " [] is a discrete function in the time domain and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " [] is that function transformed into the frequency domain. To start consider Figure 4.2. The ﬁgure shows on the left a real valued time domain signal"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " [] with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " samples or points running from 0 to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " 1. The DFT is performed resulting in the frequency domain signals corresponding to the cosine and sine amplitudes for the various frequencies. These can be viewed as a complex number with the cosine amplitudes corresponding to the real value of the complex number and the sine amplitudes providing the imaginary portion of the complex number. There are"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " 2 + 1 cosine (real) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " 2 + 1 sine (imaginary) values. We will call this resulting complex valued frequency domain function"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " []. Note that the number of samples in frequency domain ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " 2 + 1) is due to the fact that we are considering a real valued time domain signal; a complex valued time domain signal results in a frequency domain signal with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " samples. An"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " point DFT can be determined through a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " matrix multiplied by a vector of size"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 80,
            "refined_text": " , 80"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " Real G[ ]: Cosine Amplitudes Imaginary G[ ]: Sine Amplitudes 0 0 N/2 N/2 0 N-1 g[ ] Time Domain Frequency Domain Figure 4.2: A real valued discrete function"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [] in the time domain with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " points has a frequency domain representation with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2 + 1 samples. Each of these frequency domain samples has one cosine and one sine amplitude value. Collectively these two amplitude values can be represented by a complex number with the cosine amplitude representing the real part and the sine amplitude the imaginary part."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " =   1 1 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1) 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 3("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1) ... ... ... ... ... 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1)("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1)   (4.12) and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " . Thus the samples in frequency domain are derived as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 1 (4.13) Figure 4.3 provides a visualization of the DFT coeﬃcients for an 8 point DFT operation. The eight frequency domain samples are derived by multiplying the 8 time domain samples with the corresponding rows of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " matrix. Row 0 of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " matrix corresponds to the DC component which is proportional to the average of the time domain samples. Multiplying Row 1 of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " matrix with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " provides the cosine and sine amplitudes values for when there is one rotation around the unit circle. Since this is an 8 point DFT, this means that each phasor is oﬀset by 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " . Performing eight 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " rotations does one full rotation around the unit circle. Row 2 is similar except is performs two rotations around the unit circle, i.e., each rotation is 90"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " . This is a higher frequency. Row 3 does three rotations; Row 4 four rotations and so on. Each of these row times column multiplications gives the appropriate frequency domain sample. Notice that the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " matrix is diagonally symmetric, that is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]. In addition,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ) . There is also interesting symmetry around Row 4. The phasors in Rows 3 and 5 are complex conjugates of each other, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [3]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [5]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " . Similarly, Rows 2 and 6 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [2]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [6]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ), and Rows 1 and 7 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [1]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " [7]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " ) are each related by the complex conjugate operation. It is for this reason that the DFT of a real valued input signal with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " samples has only"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2 + 1 cosine and sine values in the frequency domain. The remaining"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " 2 frequency domain values provide redundant information so they are not needed. However, this is not true when the input signal is complex. In this case, the frequency domain will have"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 81,
            "refined_text": " + 1 cosine and sine values. 81"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " Figure 4.3: The elements of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " shown as a complex vectors. #deﬁne SIZE 8 typedef int BaseType; void matrix vector(BaseType M[SIZE][SIZE], BaseType V In[SIZE], BaseType V Out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " BaseType i, j; data loop: for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " BaseType sum = 0; dot product loop: for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " sum += V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " M[i][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " V Out[i] = sum;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " Figure 4.4: Simple code implementing a matrix-vector multiplication."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 82,
            "refined_text": " Matrix-vector multiplication is the core computation of a DFT. The input time domain vector is multiplied by a matrix with ﬁxed special values. The result is a vector that corresponds to the frequency domain representation of the input time domain signal. In this section, we look at the hardware implementation of matrix-vector multiplication. We break this operation down into its most basic form (see Figure 4.4). This allows us to better focus the discussion on the optimizations rather than deal with all the complexities of using functionally correct DFT code. We will build a DFT core in the next section. The code in Figure 4.4 provides an initial starting point for synthesizing this operation into hardware. We use a custom data type called BaseType that is currently mapped as a ﬂoat . This may seem superﬂuous at the time, but this will allow us in the future to easily experiment with diﬀerent number representations for our variables (e.g., signed or unsigned ﬁxed point with diﬀerent precision). The matrix vector function has three arguments. The ﬁrst two arguments 82"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": " M V_In * + V_Out V in[i] V out[i] Latency = 4*SIZE*SIZE Figure 4.5: A possible implementation of matrix-vector multiplication from the code in Figure 4.4. BaseType M[SIZE][SIZE] and BaseType V In[SIZE] are the input matrix and vector to be multiplied. The third argument BaseType V Out[SIZE] is the resultant vector. By setting M = S and V In to a sampled time domain signal, the V Out will contain the DFT. SIZE is a constant that determines the number of samples in the input signal and correspondingly the size of the DFT. The algorithm itself is simply a nested for loop. The inner loop ( dot product loop ) computes the DFT coeﬃcients starting from 0 and going to SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": " 1 . However, this relatively simple code has many design choices that can be performed when mapping to hardware. Whenever you perform HLS, you should think about the architecture that you wish to synthe- size. Memory organization is one of the more important decisions. The question boils down to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 83,
            "refined_text": " M[i][j]; is executed in each 83"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " #deﬁne SIZE 8 typedef int BaseType; void matrix vector(BaseType M[SIZE][SIZE], BaseType V In[SIZE], BaseType V Out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " BaseType i, j; data loop: for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " BaseType sum = 0; V Out[i] = V In[0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][0] + V In[1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][1] + V In[2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][2] + V In[3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][3] + V In[4]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][4] + V In[5]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][5] + V In[6]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][6] + V In[7]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][7];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " Figure 4.6: The matrix-vector multiplication example with a manually unrolled inner loop. iteration of the loop. The variable sum , which is keeping a running tally of the multiplications, is being reused in each iteration and takes on a new value. This inner loop can be rewritten as shown Figure 4.6. In this case, the sum variable has been completely eliminated and replaced with multiple intermediate values in the larger expression. Loop unrolling is performed automatically by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " HLS in a pipelined context. Loop unrolling can also be requested by using #pragma HLS unroll or the equivalent directive outside of a pipelined context. It should be clear that the new expression replacing the inner loop has signiﬁcant amount of parallelism. Each one of the multiplications can be performed simultaneously, and the summation can be performed using an adder tree. The data ﬂow graph of this computation is shown in Figure 4.7. If we wish to achieve the minimum task latency for the expression resulting from the unrolled inner loop, all eight of the multiplications should be executed in parallel. Assuming that the multiplication has a latency of 3 cycles and addition has a latency of 1 cycle, then all of the V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][j] operations are completed by the third time step. The summation of these eight intermediate results using an adder tree takes log 8 = 3 cycles. Hence, the body of data loop now has a latency of 6 cycles for each iteration and requires 8 multipliers and 7 adders. This behavior is shown in the left side of Figure 4.8. Note that the adders could be reused across Cycle 4-6, which would reduce the number of adders to 4. However, adders are typically not shared when targeting FPGAs since an adder and a multiplexer require the same amount of FPGA resources (approximately 1 LUT per bit for a 2-input operator). If we are not willing to use 8 multipliers, there is an opportunity to reduce resource usage in exchange for increasing the number of cycles to execute the function. For example, using 4 multipliers would result in a latency of 6 cycles for the multiplication of the eight V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 84,
            "refined_text": " M[i][j] operations, and an overall latency of 9 cycles to ﬁnish the body of data loop . This behavior is shown in the right side of Figure 4.8. You could even use fewer multipliers at the cost of taking more cycles to complete the inner loop. Looking at Figure 4.8, it is apparent that there are signiﬁcant periods where the operators 84"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 85,
            "refined_text": " V In[0] M[i][0] V In[1] M[i][1] V In[2] M[i][2] V In[3] M[i][3] V In[4] M[i][4] V In[5] M[i][5] V In[6] M[i][6] V In[7] M[i][7] V Out[i] Figure 4.7: A data ﬂow graph of the expression resulting from the unrolled inner loop from Figure 4.6. Interval = 6 Latency = 6 V in[] V out[i] Interval = 9 Latency = 9 V in[] V out[i] Figure 4.8: Possible sequential implementations resulting from the unrolled inner loop from Figure 4.6. 85"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "refined_text": " Interval = 6 Latency = 9 V in[] V out[i] Interval = 3 Latency = 6 V in[] V out[i] Figure 4.9: Possible pipelined implementations resulting from the unrolled inner loop from Figure 4.6. are not performing useful work, reducing the overall eﬃciency of the design. It would be nice if we could reduce these periods. In this case we can observe that each iteration of data loop is, in fact completely independent, which means that they can be executed concurrently. Just as we unrolled dot product loop , it’s also possible to unroll data loop and perform all of the multiplications concurrently. However, this would require a very large amount of FPGA resources. A better choice is to enable each iteration of the loop to start as soon as possible, while the previous execution of the loop is still executing. This process is called loop pipelining and is achieved in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "refined_text": " HLS using #pragma HLS pipeline . In most cases, loop pipelining reduces the interval of a loop to be reduced, but does not aﬀect the latency. Loop pipelined behavior of this design is shown in Figure 4.9. Until now, we have only focused on operator latency. It is common for functional units to be also be pipelined and most functional units in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "refined_text": " HLS are fully pipelined with an interval of one. Even though it might take 3 cycles for a single multiply operation to complete, a new multiply operation could start every clock cycle on a pipelined multiplier. In this way, a single functional unit may be able to simultaneously execute many multiply operations at the same time. For instance, a multiplier with a latency of 3 and an interval of 1 could be simultaneously executing three multiply operations. By taking advantage of pipelined multipliers, we can reduce the latency of the unrolled inner loop without adding additional operators. One possible implementation using three pipelined mul- tipliers is shown on the left in Figure 4.10. In this case, the multiplication operations can execute concurrently (because they have no data dependencies), while the addition operations cannot be- gin until the ﬁrst multiplication has completed. In the ﬁgure on the right, a pipelined version of this design is shown, with an interval of 3, which is similar to the results of Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 86,
            "refined_text": " HLS if #pragma HLS pipeline II=3 is applied to the data loop . In this case, not only are individual opera- tions executing concurrently on the same operators, but those operations may come from diﬀerent iterations of data loop . At this point you may have observed that pipelining is possible at diﬀerent levels of hierarchy, including the operator level, loop level, and function level. Furthermore, pipelining at diﬀerent levels are largely independent! We can use pipelined operators in a sequential loop, or we can use sequential operators to build a pipelined loop. It’s also possible to build pipelined implementations 86"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "refined_text": " Latency = 8 Interval = 3 Latency = 8 Interval = 8 V in[] V out[i] V in[] V out[i] Figure 4.10: Possible implementations resulting from the unrolled inner loop from Figure 4.6 using pipelined multipliers. of large functions which can be shared in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "refined_text": " HLS just like primitive operators. In the end, what matters most is how many operators are being instantiated, their individual costs, and how often they are used."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 87,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "refined_text": " HLS will perform some array partitioning automatically, but as array partitioning tends to be rather design-speciﬁc it is often necessary to guide the tool for best results. Global conﬁguration of array partitioning is available in the conﬁg array partition project option. In- dividual arrays can be explicitly partitioned using the array partition directive. The directive array partition complete will split each element of an array into its own register, resulting in a ﬂip-ﬂop based memory. As with many other directive-based optimizations, the same result can also be achieved by rewriting the code manually. In general, it is preferred to use the tool directives since it avoids introducing bugs and keeps the code easy to maintain. Returning to the matrix-vector multiplication code in Figure 4.4, we can achieve a highly parallel implementation with the addition of only a few directives, as shown in Figure 4.11. The resulting architecture is shown in Figure 4.12. Notice that the inner j loop is automatically unrolled by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "refined_text": " HLS and hence every use of j is replaced with constants in the implementation. This design demonstrates the most common use of array partitioning where the array dimensions that are partitioned (in this case, V In[] and the second dimension of M[][] ) are indexed with the constants (in this case the loop index j of the unrolled loop). This enables an architecture where multiplexers are not required to access the partitioned arrays. It’s also possible to achieve other designs which use fewer multipliers and have lower perfor- mance. For instance, in Figure 4.10, these designs use only three multipliers, hence we need only need to read three elements of matrix M[][] and vector V in[] each clock cycle. Completely parti- tioning these arrays would result in extra multiplexing as shown in Figure 4.13. In actuality the arrays only need to be partitioned into three physical memories. Again, this partitioning could be implemented manually by rewriting code or in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 88,
            "refined_text": " HLS using the array partition cyclic directive. Beginning with an array x containing the values � 1 2 3 4 5 6 7 8 9 � The directive array partition variable=x factor=2 cyclic on the array would split it into two arrays which are � 1 3 5 7 9 � and � 2 4 6 8 � 88"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " #deﬁne SIZE 8 typedef int BaseType; void matrix vector(BaseType M[SIZE][SIZE], BaseType V In[SIZE], BaseType V Out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " #pragma HLS array partition variable=M dim=2 complete #pragma HLS array partition variable=V In complete BaseType i, j; data loop: for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " #pragma HLS pipeline II=1 BaseType sum = 0; dot product loop: for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " sum += V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " M[i][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " V Out[i] = sum;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 89,
            "refined_text": " Figure 4.11: Matrix-vector multiplication with a particular choice of array partitioning and pipelin- ing. V In[1] V In[2] V In[3] V In[4] V In[5] V In[6] V In[7] V Out[] V In[0] M[][0] M[][2] M[][1] M[][3] M[][4] M[][5] M[][6] M[][7] i Loop Interval = 1 Loop Latency = 6 V in[] V out[i] Function Latency = 13 Function Interval = 13 Figure 4.12: Matrix-vector multiplication architecture with a particular choice of array partitioning and pipelining. The pipelining registers have been elided and the behavior is shown at right. 89"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " #deﬁne SIZE 8 typedef int BaseType; void matrix vector(BaseType M[SIZE][SIZE], BaseType V In[SIZE], BaseType V Out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " #pragma HLS array partition variable=M dim=2 cyclic factor=2 #pragma HLS array partition variable=V In cyclic factor=2 BaseType i, j; data loop: for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " BaseType sum = 0; dot product loop: for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " SIZE; j+=2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " #pragma HLS pipeline II=1 sum += V In[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " M[i][j]; sum += V In[j+1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " M[i][j+1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": " V Out[i] = sum;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 91,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " We just discussed some optimizations for matrix-vector multiplication. This is a core computation in performing a DFT. However, there are some additionally intricacies that we must consider to move from the matrix-vector multiplication in the previous section to a functionally complete DFT hardware implementation. We move our focus to the DFT in this section, and describe how to optimize it to make it execute most eﬃciently. One signiﬁcant change that is required is that we must be able to handle complex numbers. As noted in Section 4.2 because the elements of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " matrix are complex numbers, the DFT of a real-valued signal is almost always a complex-valued signal. It is also common to perform the DFT of a complex-valued signal, to produce a complex-valued result. Additionally, we need to handle fractional or possibly ﬂoating point data, rather than integers. This can increase the cost of the implementation, particularly if ﬂoating point operations need to be performed. In addition, ﬂoating point operators, particularly addition, have much larger latency than integer addition. This can make it more diﬃcult to achieve II=1 loops. A second change is that we’d like to be able to scale our design up to large input vector sizes, perhaps N=1024 input samples. Unfortunately, if we directly use matrix-vector multiplication, then we must store the entire"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " matrix with the input signal. Instead of reading the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " matrix as an input, this code computes an element of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " in each each iteration of the inner loop, based on the current loop indices. This phasor is converted to Cartesian coordinates (a real part and an imaginary part) using the cos() and sin() functions. The code then performs a complex multiplication of the phasor with the appropriate sample of the input signal and accumulates the result. After"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " iterations of this inner loop, one for each column of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " , one frequency domain sample is calculated. The outer loop also iterates"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " times, once for each row of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " . As a result, the code computes an expression for w"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " times, but computes the cos() and sin() functions and a complex multiply-add"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " 2 times. This code uses a function call to calculate cos() and sin() values. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 92,
            "refined_text": " HLS is capable of synthesizing these functions using its built-in math library. There are several possible algorithms [22] for implementing trigonometric functions including CORDIC, covered in Chapter 3. However, generating precise results for these functions can be expensive. There are several possibilities for 92"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " math.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " typedef double IN TYPE;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " typedef double TEMP TYPE;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " #deﬁne N 256"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " void dft(IN TYPE sample real[N], IN TYPE sample imag[N])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " int i, j; TEMP TYPE w; TEMP TYPE c, s;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " TEMP TYPE temp real[N]; TEMP TYPE temp imag[N];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " N; i += 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " temp real[i] = 0; temp imag[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " w = (2.0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " 3.141592653589 / N)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " (TEMP TYPE)i;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " N; j += 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " c = cos(j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " w); s = sin(j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " w);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " temp real[i] += (sample real[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " c"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " sample imag[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " s); temp imag[i] += (sample real[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " s + sample imag[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " c);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " N; i += 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " sample real[i] = temp real[i]; sample imag[i] = temp imag[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 93,
            "refined_text": " Figure 4.15: Baseline code for the DFT. 93"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " ? Or from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 94,
            "refined_text": " matrix is diagonally symmetric, and hence i and j can be exchanged in the computation of w . The result 94"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " sin/cos double int to double sample[i] sample[i] double double Loop Interval = 4 double double temp real[0] temp real[1] temp real[2] temp real[3] temp real[4] temp real[5] temp real[6] temp real[7] j i Figure 4.17: Pipelined version of the behavior in Figure 4.16. In this case, the initiation interval of the loop is limited to 4, since each ﬂoating point addition takes 4 clock cycles to complete and the result is required before the next loop iteration begins (the dependence shown in red). The dependencies for all iterations are summarized in the diagram on the right. is that we can now achieve an II of 1 for the inner loop. The tradeoﬀ is additional storage for the temp real and temp imag arrays to store the intermediate values until they are needed again. Reorder the loops of the code in Figure 4.15 and show that you can pipeline the inner loop with an II of 1. There are other optimizations that we can apply based on the structure of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " matrix in the DFT to eliminate the trigonometric operations entirely. Recall that the complex vectors for each element of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " matrix are calculated based upon a ﬁxed integer rotation around the unit circle. Row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " [0][] of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " matrix corresponds to zero rotations around the unit circle, row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " [1][] corresponds to a single rotation, and the following rows correspond to more rotations around the unit circle. It turns out that the vectors corresponding to the second row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " [1][], which is one rotation around the unit circle (divided into 360"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " 8 = 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " individual rotations), cover all of the vectors from every other row. This can be visually conﬁrmed by studying Figure 9.11. Thus it is possible to store only the sine and cosine values from this one rotation, and then index into this memory to calculate the requisite values for the corresponding rows. This requires only 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ) elements of storage. This results in a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ) reduction in storage, which for the 1024 point DFT would reduce the memory storage requirements to 1024"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " 2 entries. Assuming 32 bit ﬁxed or ﬂoating point values, this would require only 8 KB of on-chip memory. Obviously, this is a signiﬁcant reduction compared to storing the entire"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " matrix explicitly. We denote this one dimensional storage of the matrix"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " [1]["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ] = (1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " 1 ) (4.14) Derive a formula for the access pattern for the 1D array"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " given as input the row number"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " and column element"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " corresponding to the array"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " . That is, how do we index into the 1D"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " array to access element"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " ) from the 2D"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " matrix using the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " means that there is no longer an eﬀective way to partition"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 96,
            "refined_text": " to increase the amount of data that we can 96"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " read on each clock. Every odd row and column of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " includes every element of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " . As a result, there is no way to partition the values of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " like were able to do with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " . The only way to increase the number of read ports from the memory that stores"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " is to replicate the storage. Fortunately, unlike with a memory that must be read and written, it is relatively easy to replicate the storage for an array that is only read. In fact, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " HLS will perform this optimization automatically when instantiates a Read-only Memory (ROM) for an array which is initialized and then never modiﬁed. One advantage of this capability is that we can simply move the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " () and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " () calls into an array initialization. In most cases, if this code is at the beginning of a function and only initializes the array, then Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " HLS is able to optimize away the trigonometric computation entirely and compute the contents of the ROM automatically. Devise an architecture that utilizes"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " – the 1D version of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": " matrix. How does this aﬀect the required storage space? Does this change the logic utilization compared to an imple- mentation using the 2D"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 97,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 98,
            "refined_text": " problem of dividing the coeﬃcient array into diﬀerent memories in order to increase the throughput. Array partitioning optimization are often key to achieving the highest performing architectures. 98"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " Performing the Discrete Fourier Transform (DFT) directly using matrix-vector multiply requires"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " 2 ) multiply and add operations, for an input signal with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " samples. It is possible to reduce the complexity by exploiting the structure of the constant coeﬃcients in the matrix. This"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " matrix encodes the coeﬃcients of the DFT; each row of this matrix corresponds to a ﬁxed number of rotations around the complex unit circle (please refer to Chapter 4.2 for more detailed information). These values have a signiﬁcant amount of redundancy, and that can be exploited to reduce the complexity of the algorithm. The ’Big O’ notation used here describes the general order of complexity of an algorithm based on the size of the input data. For a complete description of Big O notation and its use in analyzing algorithms, see [17]. The Fast Fourier Transform (FFT) uses a divide-and-conquer approach based on the symmetry of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " matrix. The FFT was made popular by the Cooley-Tukey algorithm [16], which requires"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " ) operations to compute the same function as the DFT. This can provide a substantial speedup, especially when performing the Fourier transform on large signals. The divide-and-conquer approach to computing the DFT was initially developed by Karl Friedrich Gauss in the early 19th century. However, since Gauss’ work on this was not published during his lifetime and only appeared in a collected works after his death, it was relegated to obscurity. Heideman et al. [32] provide a nice background on the history of the FFT. The focus of this chapter is to provide the reader with a good understanding of the FFT algorithm since that is an important part of creating an optimized hardware design. Thus, we start by giving a mathematical treatment of the FFT. This discussion focuses on small FFT sizes to give some basic intuition on the core ideas. After that, we focus on diﬀerent hardware implementation strategies."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 99,
            "refined_text": " The FFT brings about a reduction in complexity by taking advantage of symmetries in the DFT calculation. To better understand how to do this, let us look at DFT with a small number of points, 99"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " starting with the 2 point DFT. Recall that the DFT performs a matrix vector multiplication, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [][]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [], where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [] is the input data,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [] is the frequency domain output data, and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [][] are the DFT coeﬃcients. We follow the same notation for the coeﬃcient matrix, and the input and output vectors as described in Chapter 4.2. For a 2 point DFT, the values of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " are:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 00 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 01 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 10 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 11 2 � (5.1) Here we use the notation"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " . The superscript on"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " denotes values that are added to the numerator and the subscript on the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " indicates those values added in the denominator of the complex exponential. For example,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 23 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 3 4 . This is similar to the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " value used in the DFT discussion (Chapter 4.2) where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " . The relationship between"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " . The"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " terms are often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " . This term has its origin in the 1966 paper by Gentleman and Sande [27]. �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1] � = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 00 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 01 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 10 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 11 2 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1] � (5.2) Expanding the two equations for a 2 point DFT gives us:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1] (5.3) due to the fact that since"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0 = 1. The second frequency term"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " [1] (5.4) since"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 1. Figure 5.1 provides two diﬀerent representations for this computation. Part a) is the data ﬂow graph for the 2 point DFT. It is the familiar view that we have used to represent computation throughout this book. Part b) shows a butterﬂy structure for the same computation. This is a typically structure used in digital signal processing, in particular, to represent the computations in an FFT. The butterﬂy structure is a more compact representation that is useful to represent large data ﬂow graphs. When two lines come together this indicates an addition operation. Any label on the line itself indicates a multiplication of that label by the value on that line. There are two labels in this ﬁgure. The ‘"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " ’ sign on the bottom horizontal line indicates that this value should be negated. This followed by the addition denoted by the two lines intersecting is the same as subtraction. The second label is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0 2 . While this is a multiplication is unnecessary (since"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 0 2 = 1 this means it is multiplying by the value ‘1’), we show it here since it is a common structure that appears in higher point FFTs. Now let us consider a slightly larger DFT – a 4 point DFT, i.e., one that has 4 inputs, 4 outputs, and a 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " matrix. The values of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " for a 4 point DFT are:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " =  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 00 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 01 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 02 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 03 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 10 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 11 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 12 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 13 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 20 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 21 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 22 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 23 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 30 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 31 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 32 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 100,
            "refined_text": " 33 4   (5.5) 100"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " -"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0 2 Figure 5.1: Part a) is a data ﬂow graph for a 2 point DFT/FFT. Part b) shows the same compu- tation, but viewed as a butterﬂy structure. This is a common representation for the computation of an FFT in the digital signal processing domain. And the DFT equation to compute the frequency output terms are:  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]   =  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 00 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 01 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 02 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 03 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 10 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 11 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 12 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 13 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 20 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 21 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 22 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 23 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 30 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 31 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 32 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 33 4  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": "  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]   (5.6) Now we write out the equations for each of the frequency domain values in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [] one-by-one. The equation for G[0] is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 3 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3] (5.7) since"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0 = 1. The equation for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1] is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 3 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 (5.8) The reductions were done based upon the fact that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1. The equation for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2] is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 0 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 3 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " [3] (5.9) The reductions were done by simpliﬁcations based upon rotations. E.g.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 = 1 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 1 since in both cases use the fact that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " is equal to 1. In other words, any complex exponential with a rotation by 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 101,
            "refined_text": " is equal. 101"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " Finally, the equation for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3] is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 0 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 18"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 (5.10) Most of the reductions that we have not seen yet deal with the last term. It starts out as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 18"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 . It is reduced to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 since these are equivalent based upon a 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " rotation, or, equivalently,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 and the second term"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 = 1. Finally, a rotation of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " , which is equal to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1, brings it to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 . Another way of viewing this is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1. We leave this term in this unreduced state in order to demonstrate symmetries in the following equations. With a bit of reordering, we can view these four equations as:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 0 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]) (5.11) Several diﬀerent symmetries are starting to emerge. First, the input data can be partitioned into even and odd elements, i.e., similar operations are done on the elements"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2], and the same is true for the odd elements"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]. Furthermore we can see that there are addition and subtraction symmetries on these even and odd elements. During the calculations of the output frequencies"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2], the even and odd elements are summed together. The even and odd input elements are subtracted when calculating the frequencies"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]. Finally, the odd elements in every frequency term are multiplied by a constant complex exponential"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 4 where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " denotes the index for the frequency output, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " ]. Looking at the terms in the parentheses, we see that they are 2 point FFT. For example, consider the terms corresponding to the even input values"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]. If we perform a 2 point FFT on these even terms, the lower frequency (DC value) is"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2] (see Equation 5.3), and the higher frequency is calculated as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2] (see Equation 5.4). The same is true for the odd input values"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]. We perform one more transformation on these equations."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 0 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2]) +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 0 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1] +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3] = ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [2])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1 4 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " [3]) (5.12) The twiddle factors in the last two equations are modiﬁed from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 0 4 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 3 4 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 102,
            "refined_text": " 1 4 . This allows for a reduction in the complexity of the multiplications since we can share multiplications across two terms. Figure 5.2 shows the butterﬂy diagram for the four point FFT. We can see that the ﬁrst stage is two 2 point FFT operations performed on the even (top butterﬂy) and odd (bottom butterﬂy) input values. The output of the odd 2 point FFTs are multiplied by the appropriate twiddle factor. We can use two twiddle factors for all four output terms by using the reduction shown in Equation 5.12. 102"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " g[0] g[2] g[1] g[3] W 0 4 W 1 4 - - - G[0] G[1] G[2] G[3] - 2 point FFT 2 point FFT Stage 1 Stage 2 Figure 5.2: A four point FFT divided into two stages. Stage 1 has uses two 2 point FFTs – one 2 point FFT for the even input values and the other 2 point FFT for the odd input values. Stage 2 performs the remaining operations to complete the FFT computation as detailed in Equation 5.12. We are seeing the beginning of trend that allows the a reduction in complexity from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2 ) operations for the DFT to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ) operations for the FFT. The key idea is building the compu- tation through recursion. The 4 point FFT uses two 2 point FFTs. This extends to larger FFT sizes. For example, an 8 point FFT uses two 4 point FFTs, which in turn each use two 2 point FFTs (for a total of four 2 point FFTs). An 16 point FFT uses two 8 point FFTs, and so on. How many 2 point FFTs are used in a 32 point FFT? How many are there in a 64 point FFT? How many 4 point FFTs are required for a 64 point FFT? How about a 128 point FFT? What is the general formula for 2 point, 4 point, and 8 point FFTs in an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " point FFT (where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 8)? Now let us formally derive the relationship, which provides a general way to describe the re- cursive structure of the FFT. Assume that we are calculating an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " point FFT. The formula for calculating the frequency domain values"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [] given the input values"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [] is:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 (5.13) We can divide this equation into two parts, one that sums the even components and one that sums the odd components."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " (2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " + 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " (2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " +1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " (5.14) The ﬁrst part of this equation deals with the even inputs, hence the 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " terms in both"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [] and in the exponent of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " . The second part corresponds to the odd inputs with 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " + 1 in both places. Also note that the sums now go to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 in both cases which should make sense since we have divided them into two halves. We transform Equation 5.14 to the following:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " + 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " (2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 103,
            "refined_text": " (5.15) 103"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " In the ﬁrst summation (even inputs), we simply move the 2 into the denominator so that it is now"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2. The second summation (odd inputs) uses the power rule to separate the +1 leaving two complex exponentials. We can further modify this equation to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " + 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 (5.16) Here we only modify the second summation. First we pull one of the complex exponentials outside of the summation since it does not depend upon"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " . And we also move the 2 into the denominator as we did before in the ﬁrst summation. Note that both summations now have the same complex exponential"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 . Finally, we simplify this to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " (5.17) where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " are the ﬁrst and second summations, respectively. And recall that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " . This completely describes an N point FFT by separating even and odd terms into two summations. For reasons that will become clear soon, let us assume that we only want to use Equation 5.17 to calculate the ﬁrst"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 terms, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " [0] through"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1]. And we will derive the remaining"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 terms, i.e., those from"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2] to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1] using a diﬀerent equation. While this may seem counterintuitive or even foolish (why do more math than necessary?), you will see that this will allow us to take advantage of even more symmetry, and derive a pattern as we have seen in the 4 point FFT. In order to calculate the higher frequencies"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2] to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1], let us derive the same equations but this time using"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 + 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1. Thus, we wish to calculate"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 (5.18) This is similar to Equation 5.13 with diﬀerent indices, i.e., we replace"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " from Equation 5.13 with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2. Using the same set of transformations that we did previously, we can move directly to the equivalent to Equation 5.16, but replacing all instances of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 which yields"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " + 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 (5.19) We can reduce the complex exponential in the summations as follows:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1 (5.20) The ﬁrst reduction uses the power rule to split the exponential. The second reduction cancels the term"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2 in the second exponential. The ﬁnal reduction uses that fact that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " is a non-negative integer, and thus"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " will always be a rotation of multiple of 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " . This means that this term is always equal to 1. Now let us tackle the second complex exponential"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " (5.21) The ﬁrst reduction splits the exponential using the power rule. The second reduction does some simpliﬁcations on the second exponential. We get the ﬁnal term by realizing that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 104,
            "refined_text": " 1. 104"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 0 N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 1 N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 N"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " N/2-1 N - - - -"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " . . . . . . . . . . . . . . ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " . . . . . . . . . . . . Figure 5.3: Building an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " point FFT from two"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFTs. The upper"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFT is performed on the even inputs; the lower"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 FFT uses the odd inputs. By substituting Equations 5.20 and 5.21 into Equation 5.19, we get"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 1 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " =0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " + 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 (5.22) Note the similarity to Equation 5.16. We can put it in terms of Equation 5.17 as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " (5.23) We can use Equations 5.17 and 5.23 to create an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " point FFT from two"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFTs. Remember that"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " corresponds to the even input values, and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " is a function of the odd input values. Equation 5.17 covers the ﬁrst"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 terms, and Equation 5.23 corresponds to the higher"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 frequencies. Figure 5.3 shows an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " point FFT derived from two"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFTs."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " corresponds to the top"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 FFT, and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " is the bottom"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 FFT. The output terms"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " [0] through"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 1] are multiplied by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " while the output terms"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2] through"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 1] are multiplied by"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " . Note that the inputs"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " [] are divided into even and odd elements feeding into the top and bottom"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFTs, respectively. We can use the general formula for creating the FFT that was just derived to recursively create the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFT. That is, each of the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 2 point FFTs can be implemented using two"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 4 point FFTs. And each"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 4 point FFT uses two"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 105,
            "refined_text": " 8 point FFTs, and so on until we reach the base case, a 2 point FFT. Figure 5.4 shows an 8 point FFT and highlights this recursive structure. The boxes with the dotted lines indicate diﬀerent sizes of FFT. The outermost box indicates an 8 point FFT. This is composed by two 4 point FFTs. Each of these 4 point FFTs have two 2 point FFTs for a total of four 2 point FFTs. 105"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 2 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 2 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 0 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 1 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 2 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " 3 8 - - - - - - - - - - - -"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 106,
            "refined_text": " Figure 5.4: An 8 point FFT built recursively. There are two 4 point FFTs, which each use two 2 point FFTs. The inputs must be reordered to even and odd elements twice. This results in reordering based upon the bit reversal of the indices. 106"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " Also note that the inputs must be reordered before they are feed into the 8 point FFT. This is due to the fact that the diﬀerent"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " 2 point FFTs take even and odd inputs. The upper four inputs correspond to even inputs and the lower four inputs have odd indices. However, they are reordered twice. If we separate the even and odd inputs once we have the even set"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [4]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [6]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " and the odd set"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [5]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [7]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " . Now let us reorder the even set once again. In the even set"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [0] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [4] are the even elements, and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [2] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [6] are the odd elements. Thus reordering it results in the set"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [0]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [4]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [6]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " . The same can be done for the initial odd set yielding the reordered set"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [5]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [3]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [7]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " . The ﬁnal reordering is done by swapping values whose indices are in bit reversed order. Table 5.1 shows the indices and their three bit binary values. The table shows the eight indices for the 8 point FFT, and the corresponding binary value for each of those indices in the second column. The third column is the bit reversed binary value of the second column. And the last column is the decimal number corresponding the reversed binary number. Table 5.1: The index, three bit binary value for that index, bit reversed binary value, and the resulting bit reversed index. Index Binary Reversed Reversed Binary Index 0 000 000 0 1 001 100 4 2 010 010 2 3 011 110 6 4 100 001 1 5 101 101 5 6 110 011 3 7 111 111 7 Looking at the ﬁrst row, the initial index 0, has a binary value of 000, which when reversed remains 000. Thus this index does not need to be swapped. Looking at Figure 5.4 we see that this is true."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [0] remains in the same location. In the second row, the index 1 has a binary value 001. When reversed this is 100 or 4. Thus, the data that initially started at index 1, i.e.,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [1] should end up in the fourth location. And looking at index 4, we see the bit reversed value is 1. Thus"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [1] and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 107,
            "refined_text": " [4] are swapped. This bit reversal process works regardless of the input size of the FFT, assuming that the FFT is a power of two. FFT are commonly a power of two since this allows them to be recursively implemented. In an 32 point FFT, index 1 is swapped with which index? Which index is index 2 is swapped with? This completes our mathematical treatment of the FFT. There are plenty of more details about the FFT, and how to optimize it. You may think that we spent too much time already discussing the ﬁner details of the FFT; this is a book on parallel programming for FPGAs and not on digital signal processing. This highlights an important part of creating an optimum hardware implementation – the designer must have a good understanding of the algorithm under development. Without that, 107"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " it is diﬃcult to create a good implementation. The next section deals with how to create a good FFT implementation."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " In the remainder of this chapter, we discuss diﬀerent methods to implement the Cooley-Tukey FFT [16] algorithm using the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " HLS tool. This is the same algorithm that we described in the previous section. We start with a common version of the code, and then describe how to restructure it to achieve a better hardware design. When performed sequentially, the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " ) operations in the FFT require"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " ) time steps. Typically, a parallel implementation will perform some portion of the FFT in parallel. One common way of parallelizing the FFT is to organize the computation into log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " stages, as shown in Figure 5.8. The operations in each stage are dependent on the operations of the previous stage, naturally leading to a pipelining across the tasks. Such an architecture allows log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " FFTs to be computed simultaneously with a task interval determined by the architecture of each stage. We discuss task pipelining using the dataﬂow directive in Section 5.4. Each stage in the FFT also contains signiﬁcant parallelism, since each butterﬂy computation is independent of other butterﬂy computations in the same stage. In the limit, performing"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " 2 butterﬂy computations every clock cycle with a Task Interval of 1 can allow the entire stage to be computed with a Task Interval of 1. When combined with a dataﬂow architecture, all of the parallelism in the FFT algorithm can be exploited. Note, however that although such an architecture can be constructed, it is almost never used except for very small signals, since an entire new block of SIZE samples must be provided every clock cycle to keep the pipeline fully utilized. For instance, a 1024-point FFT of complex 32-bit ﬂoating point values, running at 250 MHz would require 1024 points*(8 bytes/point)*250*10 9 Hz = 1Terabyte/second of data into the FPGA. In practice, a designer must match the computation architecture to the data rate required in a system. Assuming a clock rate of 250 MHz and one sample received every clock cycle, approximately how many butterﬂy computations must be implemented to process every sample with a 1024- point FFT? What about for a 16384-point FFT? In the remainder of this section, we describe the optimization of an FFT with the function prototype void ﬀt(DTYPE X R[SIZE], DTYPE X I[SIZE]) where DTYPE is a user customizable data type for the representation of the input data. This may be int , ﬂoat , or a ﬁxed point type. For example, #deﬁne DTYPE int deﬁnes DTYPE as an int . Note that we choose to implement the real and imaginary parts of the complex numbers in two separate arrays. The X R array holds the real input values, and the X I array holds the imaginary values. X R[i] and X I[i] hold the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 108,
            "refined_text": " th complex number in separate real and imaginary parts. There is one change in the FFT implementation that we describe in this section. Here we perform an FFT on complex numbers. The previous section uses only real numbers. While this may seem like a major change, the core ideas stay the same. The only diﬀerences are that the data has two values (corresponding to the real and imaginary part of the complex number), and the operations (add, multiply, etc.) are complex operations. 108"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " ) stages where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " is the number of input samples. The stages are clearly labeled in Figure 5.4; this 8 point FFT has"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " 2 (8) = 3 stages. You can see that each stage performs the same amount of computation, or the same number of butterﬂy operations. In the 8 point FFT, each stage has four butterﬂy operations. For an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " point FFT, how many butterﬂy operations are there in each stage? How many total butterﬂy operations are there for the entire FFT? The second for loop, labeled butterﬂy loop , performs all of the butterﬂy operations for the current stage. butterﬂy loop has another nested for loop, labeled dft loop . Each iteration of dft loop performs one butterﬂy operation. Remember that we are dealing with complex numbers and must perform complex additions and multiplications. The ﬁrst line in dft loop determines the oﬀset of the butterﬂy. Note that the “width” of the butterﬂy operations changes depending upon the stage. Looking at Figure 5.4, Stage 1 performs butterﬂy operations on adjacent elements, Stage 2 performs butterﬂy operations on elements with index diﬀering by two, and Stage 3 performs butterﬂy operations on elements with index diﬀering by four. This diﬀerence is computed and stored in the i lower variable. Notice that this oﬀset, stored in the variable numBF , is diﬀerent in every stage. The remaining operations in dft loop perform multiplication by the twiddle factor and an ad- dition or subtraction operation. The variables temp R and temp I hold the real and imaginary portions of the data after multiplication by the twiddle factor"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " . The variables c and s are the real and imaginary parts of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " , which is calculated using the sin() and cos() builtin functions. We could also use the CORDIC, such as the one developed in Chapter 3, to have more control over the implementation. Lastly, elements of the X R[] and X I[] arrays are updated with the result of the butterﬂy computation. dft loop and butterﬂy loop each execute a diﬀerent number of times depending upon the stage. However the total number of times that the body of dft loop is executed in one stage is constant. The number of iterations for the butterﬂy for loop depends upon the number of unique"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " twiddle factors in that stage. Referring again to Figure 5.4, we can see that Stage 1 uses only one twiddle factor, in this case"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " 0 8 . Stage 2 uses two unique twiddle factors and Stage 3 uses four diﬀerent"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 109,
            "refined_text": " values. Thus, butterﬂy loop has only one iteration in Stage 1, 2 iterations in stage 2, and four iterations in stage 3. Similarly, the number of iterations of dft loop changes. It iterates four times for an 8 point FFT in Stage 1, two times in Stage 2, and only one time in stage 3. However in every stage, the body of dft loop is executed the same number of times in total, executing a total of four butterﬂy operations for each stage an 8 point FFT. 109"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " void ﬀt(DTYPE X R[SIZE], DTYPE X I[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " DTYPE temp R;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " DTYPE temp I;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " int i, j, k;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " int i lower;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " int step, stage, DFTpts; int numBF;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " int N2 = SIZE2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " bit reverse(X R, X I); step = N2; DTYPE a, e, c, s; stage loop: for (stage = 1; stage"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " = M; stage++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " DFTpts = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " stage;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " numBF = DFTpts / 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " k = 0; e ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " 6.283185307178 / DFTpts; a = 0.0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " butterﬂy loop: for (j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " numBF; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " c = cos(a); s = sin(a); a = a + e;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " dft loop: for (i = j; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " SIZE; i += DFTpts)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " i lower = i + numBF;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " temp R = X R[i lower]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " c"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " X I[i lower]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " s; temp I = X I[i lower]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " c + X R[i lower]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " s; X R[i lower] = X R[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " temp R; X I[i lower] = X I[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " temp I; X R[i] = X R[i] + temp R; X I[i] = X I[i] + temp I;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " k += step;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " step = step / 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 110,
            "refined_text": " Figure 5.5: A common implementation for the FFT using three nested for loops. While this may work well running as software on a processor, it is far from optimal for a hardware implementation. 110"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS performs signiﬁcant static analysis on each synthesized function, including computing bounds on the number of times each loop can execute. This information comes from many sources, including variable bitwidths, ranges, and assert() functions in the code. When combined with the loop II, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS can compute bounds on the latency or interval of the FFT function. In some cases (usually when loop bounds are variable or contain conditional constructs), the tool is unable to compute the latency or interval of the code and returns ‘’?’. When synthesizing the code in Figure 5.5, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS may not be able to determine the number of times that butterﬂy loop and dft loop iterate because these loops have variable bounds. The tripcount directive enables the user to specify to the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS tool can calculate bounds on the latency and interval value for the loop and the overall design. Note that since the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS tool uses the numbers that you provide, if you give the tool an incorrect tripcount then the reported task latency and task interval will be incorrect – garbage in, garbage out. What is the appropriate way to use the trip count directive for the FFT in Figure 5.5? Should you set the max , min , and/or average arguments? Would you need to modify the tripcount arguments if the size of the FFT changes?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " We have not talked about the bit reverse function, which swaps the input data values so that we can perform an in-place FFT. This means that the inputs values are mixed, and the result is that the output data is in the correct order. We discuss that function in some detail now. Figure 5.6 shows one possible implementation of the bit reverse function. It divides the code into two functions. The ﬁrst is the bit reversal function ( bit reverse ), which reorders data in the given arrays so that each data is in located at a diﬀerent index in the array. This function calls another function, reverse bits , which takes an input integer and returns the bit reversed value of that input. Let us start with a brief overview of the reverse bits function. The function goes bit by bit through the input variable and shifts it into the rev variable. The for loop body consists of a few bitwise operations that reorder the bits of the input. Although these operations are individually not terribly complex, the intention of this code is that the for loop is completely unrolled and Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " HLS can identify that the bits of the input can simply be wired to the output. As a result, the implementation of the reverse bits function should require no logic resources at all, but only wires. This is a case where unrolling loops greatly simpliﬁes the operations that must be performed. Without unrolling the loop, the individual ‘or’ operations must be performed sequentially. Although this loop can be pipelined, the ‘or’ operation would still be implemented in logic resources in the FPGA and executing the the loop would have a latency determined by the number of bits being reversed ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " gls"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " ﬀt"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 111,
            "refined_text": " BITS in this case). 111"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " #deﬁne FFT BITS 10"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " #deﬁne SIZE 1024"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " #deﬁne SIZE2 SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " #deﬁne DTYPE int unsigned int reverse bits( unsigned int input)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " int i, rev = 0; for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " FFT BITS; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " rev = (rev"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " (input & 1); input = input"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " return rev;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " void bit reverse(DTYPE X R[SIZE], DTYPE X I[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " unsigned int reversed; unsigned int i; DTYPE temp; for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " reversed = reverse bits(i);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " if (i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " reversed)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " temp = X R[i]; X R[i] = X R[reversed]; X R[reversed] = temp;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " temp = X I[i]; X I[i] = X I[reversed]; X I[reversed] = temp;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " Figure 5.6: The ﬁrst stage in our FFT implementation reorders the input data. This is done by swapping the value at index"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " in the input array with the value at the bit reversed index corresponding to"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 112,
            "refined_text": " . The function reverse bits gives the bit reversed value corresponding to the input argument. And the function bit reverse swaps the values in the input array. 112"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " void ﬀt(DTYPE X R[SIZE], DTYPE X I[SIZE], DTYPE OUT R[SIZE], DTYPE OUT I[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " #pragma HLS dataﬂow DTYPE Stage1 R[SIZE], Stage1 I[SIZE]; DTYPE Stage2 R[SIZE], Stage2 I[SIZE]; DTYPE Stage3 R[SIZE], Stage3 I[SIZE]; bit reverse(X R, X I, Stage1 R, Stage1 I); ﬀt stage one(Stage1 R, Stage1 I, Stage2 R, Stage2 I); ﬀt stages two(Stage2 R, Stage2 I, Stage3 R, Stage3 R); ﬀt stage three(Stage3 R, Stage3 I, OUT R, OUT I);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " Figure 5.7: The code divides an 8 point FFT into four stages, each of which is a separate function. The bit reverse function is the ﬁrst stages. And there are three stages for the 8 point FFT. What is the latency of the reverse bits function when no directives are applied? What is the latency when the loop is pipelined? What is the latency when the whole function is pipelined? It is tempting to “blindly” apply directives in order to achieve a better design. However, this can be counterproductive. The best designer has a deep understanding of both the application and the available optimizations and carefully considers these together to achieve the best results. Now let us optimize the parent bit reverse function. This function has a single for loop that iterates through each index of the input arrays. Note that there are two input arrays X R[] and X I[] . Since we are dealing with complex numbers, we must store both the real portion (in the array X R[] ), and the imaginary portion (in the array X I[] ). X R[i] and X I[i] holds the real and imaginary values of the i-th input. In each iteration of the for loop, we ﬁnd the index reversed value by calling the reverse bits function. Then we swap both the real and imaginary values stored in the index i and the index returned by the function reverse bits . Note that as we go through all SIZE indices, we will eventually hit the reversed index for every value. Thus, the code only swaps values the ﬁrst time based on the condition if (i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " reversed) ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " Dividing the FFT algorithm into stages enables Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " HLS to generate an implementation where diﬀerent stages of the algorithm are operating on diﬀerent data sets. This optimization, called task pipelining is enabled using the dataﬂow directive. This is a common hardware optimization, and thus is relevant across a range of applications. We can naturally divide the FFT algorithm into log 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " + 1) stages where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " is the number of points of the FFT. The ﬁrst stage swaps each element in the input array with the element located at the bit reversed address in the array. After this bit reverse stage, we perform log 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 113,
            "refined_text": " ) stages of butterﬂy operations. Each of these butterﬂy stages has the same computational complexity. Figure 113"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 114,
            "refined_text": " bit reverse ﬀt stage one ﬀt stage two ﬀt stage three Stage1 R[] Stage1 I[] Stage2 R[] Stage2 I[] X R[] X I[] OUT R[] OUT I[] Stage3 R[] Stage3 I[] input output bit reverse ﬀt stage one ﬀt stage two ﬀt stage three Figure 5.8: Dividing the FFT into diﬀerent stages allows for task pipelining across each of these stages. The ﬁgure shows an example with three FFT stages (i.e., an 8 point FFT). The ﬁgure shows four 8 point FFT executing at the same time. 5.7 describes how to devide an 8 point FFT into four separate tasks. The code has separate functions for each of the tasks: bit reverse , ﬀt stage one , ﬀt stage two , and ﬀt stage three . Each stage has two input arrays and two output arrays: one for the real portion and one for the imaginary portion of the complex numbers. Assume that the DTYPE is deﬁned elsewhere, e.g., as an int , ﬂoat or a ﬁxed point data type. Refactoring the FFT code allows us to perform task pipelining. Figure 5.8 gives an example of this. In this execution, rather than wait for the ﬁrst task to complete all four four functions in the code before the second task can begin, we allow the second task to start after the ﬁrst task has only completed the ﬁrst function bit reverse . The ﬁrst task continues to execute each stage in the pipeline in order, followed by the remaining tasks in order. Once the pipeline is full, all four subfunctions are executing concurrently, but each one is operating on diﬀerent input data. Similarly, there are four 8 point FFTs being computed simultaneously, each one executing on a diﬀerent component of the hardware. This shown in the middle portion of Figure 5.8. Each of the vertical four stages represents one 8 point FFT. And the horizontal denotes increasing time. Thus, once we start the fourth 8 point FFT, we have four FFTs running simultaneously. The dataﬂow directive can construct separate pipeline stages (often called processes) from both functions and loops. The code in Figure 5.7 uses functions only, but we could achieve a similar result with four loops instead of four functions. In fact, this result could be achieved by unrolling the outer stage loop in the original code either explicitly or using #pragma HLS unroll . The dataﬂow directive and the pipeline directive both generate circuits capable of pipelined execution. The key diﬀerence is in the granularity of the pipeline. The pipeline directive constructs an architecture that is eﬃciently pipelined at the cycle level and is characterized by the II of the pipeline. Operators are statically scheduled and if the II is greater than one, then operations can be shared on the same operator. The dataﬂow directive constructs an architecture that is eﬃciently pipelined for operations that take a (possibly unknown) number of clock cycles, such as the the 114"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "refined_text": " behavior of a loop operating on a block of data. These coarse-grained operations are not statically scheduled and the behavior is controlled dyanmically by the handshake of data through the pipeline. In the case of the FFT, each stage is an operation on a block of data (the whole array) which takes a large number of cycles. Within each stage, loops execute individual operations on the data in a block. Hence, this is a case where it often makes sense to use the dataﬂow directive at the toplevel to form a coarse-grained pipeline, combined with the pipeline directive within each loop to form ﬁne-grained pipelines of the operations on each individual data element. The dataﬂow directive must implement memories to pass data between diﬀerent processes. In the case when Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 115,
            "refined_text": " HLS can determine that processes access data in sequential order, it implements the memory using a FIFO. This requires that data is written into an array in the same order that it is read from the array. If the is not the case, or if Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "refined_text": " The overall goal is to create the most optimal design, which is a function of your application needs. This may be to create the smallest implementation. Or the goal could be creating something that can perform the highest throughput implementation regardless of the size of the FPGA or the power/energy constraints. Or the latency of delivering the results may matter if the application has real-time constraints. All of the optimizations change these factors in diﬀerent ways. In general, there is no one algorithm on how to optimize your design. It is a complex function of the application, design constraints, and the inherent abilities of the designer himself. Yet, it is important that the designer have a deep understanding of the application itself, the design constraints, and the abilities of the synthesis tool. We attempted to illustrate these bits of wisdom in this chapter. While the FFT is a well studied algorithm, with a large number of known hardware implementation tricks, it still serves as a good exemplar for high-level synthesis. We certainly did not give all of the tricks for optimization. Regardless, we attempted to provide some insight into the key optimizations here, which we hope serve as a guide to how to optimize the FFT using the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "refined_text": " HLS tool. First and foremost, understand the algorithm. We spent a lot of time explaining the basics of the FFT, and how it relates to the DFT. We hope that the reader understands that this is the most important part of building optimal hardware. Certainly, the designer could translate C/MATLAB/Java/Python code into Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 116,
            "refined_text": " HLS and get an working implementation. And that same designer could somewhat blindly apply directives to achieve better results. But that designer is not going to get anywhere close to optimal results without a deep understanding of the algorithm itself. Second, we provide an introduction to task level pipelining using the dataﬂow directive. This is a powerful optimization that is not possible through code restructuring. I.e., the designer must use this optimization to get such a design. Thus, it is important that the designer understand its power, drawbacks, and usage. Additionally, we give build upon some of the optimizations from previous chapters, e.g., loop unrolling and pipelining. All of these are important to get an optimized FFT hardware design. While we did not spend too much time on these optimizations, they are extremely important. Finally, we tried to impress on the reader that these optimizations cannot be done in isolation. Sometimes the optimizations are independent, and they can be done in isolation. For example, we can focus on one of the tasks (e.g., in the bit reverse function as we did in Section 5.3). But many times diﬀerent optimizations will eﬀect another. For example, the inline directive will eﬀect the way the pipelining of a function. And in particular, the way that we optimize tasks/functions can propagate itself up through the hierarchy of functions. The takeaway is that it is extremely important that the designer understand the eﬀects of the optimizations on the algorithm, both locally and globally. 116"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": " Sparse matrix vector multiplication (SpMV) takes a sparse matrix, i.e., one in which most of its elements are zero, and multiplies it by a vector. The vector itself may be sparse as well, but often it is dense. This is a common operation in scientiﬁc applications, economic modeling, data mining, and information retrieval. For example, it is used as an iterative method for solving sparse linear systems and eigenvalue problems. It is an operation in PageRank and it is also used in computer vision, e.g., image reconstruction. This chapter introduces several new HLS concepts, and reinforces some previously discussed optimization. One goal of the chapter is to introduce a more complex data structure. We use a compressed row storage (CRS) representation to hold the sparse matrix. Another goal is to show how to perform testing. We build a simple structure for a testbench that can be used to help determine if the code is functionally correct. This is an important aspect of hardware design, and Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": " HLS makes it easy to test many aspects of the generated RTL with the same high-level C testbench. This is one of the big advantages of HLS over RTL design. We also show how you can perform C/RTL cosimulation using the testbench and Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": " Figure 6.1 shows an example of a 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 117,
            "refined_text": " 4 matrix M represented in two diﬀerent ways. Figure 6.1 a) shows the normal representation of the matrix as a two-dimensional array of 16 elements. Each element is store in its own location in the array. Figure 6.1 b) shows the same matrix represented in CRS format. The CRS representation is a data structure consisting of three arrays. The values array holds the value of each non-zero element in the matrix. The columnIndex and rowPtr arrays encode information about the location of these non-zero elements in the matrix. columnIndex stores the column of each element, while rowPtr contains the index in values of the ﬁrst element in each row. The CRS format avoids storing values in the matrix that are zero, although there is nothing to prevent a zero from being explicitly represented in the values array. In the example, however, we see that the values array does not, in fact, contain any zero elements. The tradeoﬀ is that some additional book-keeping information (the columnIndex and rowPtr arrays) in order to properly interpret and manipulate the matrix. The CRS form is commonly used when large matrices contain only a small number of non-zero elements (typically 10 percent or less), enabling these matrices to be stored with less memory and manipulated with fewer operations. However, the 117"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " values columnIndex rowPtr Matrix M a) b) Figure 6.1: A 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " 4 matrix M represented in two diﬀerent ways: as a ‘dense’ matrix stored in a two-dimensional array, and as a sparse matrix stored in the compressed row storage (CRS) form, a data structure consisting of three arrays. CRS form has no requirements about the sparsity of the matrix and can be used for any matrix. This makes it a general approach that can be used for any matrix, but not necessarily the most eﬃcient. The CRS form is also not the only eﬃcient representation of sparse matrices. Depending on the characteristics of the matrix and the types of operations to be performed, other sparse representations can also be used. More precisely, the CRS format uses a data structure consisting of three arrays: values , colIndex , and rowPtr . The values array and the columnIndex has an entry for each of the non-zero elements in the sparse matrix M . These arrays represent the matrix M stored in a row-wise fashion, i.e., left to right, and top to bottom. The data in the matrix is stored in the values array, while the columnIndex array contains the horizontal location of the data in the matrix. If values[k] represents"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " then colIndex[k] = j. The array rowPtr has size"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " + 1 for an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " -row matrix. rowPtr[k] contains the total number of elements in all the rows in the matrix prior to row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " , with the ﬁrst element rowPtr[0] = 0 and the last element rowPtr[n] always giving the total number of non-zero elements the matrix. As a result, if values[k] represents"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " , then rowPtr[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " rowPtr[i+1] . If row k contains any non-zero elements, then rowPtr[k] will contain the index of the ﬁrst element in the row. Note that if there are rows in the matrix without a non-zero element, then values in the rowPtr array will repeat. Looking at Figure 6.1 a), we can scan the matrix in row-major order to determine the values array in CRS form. Whenever we ﬁnd a non-zero element, its value is stored at the next available index"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " in the values array and its column is stored at columnIndex[i] . In addition, whenever we start scanning a new row, we store the next available index"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " in the rowPtr array. As a result, the ﬁrst element in the rowPtr array is always zero. Looking at Figure 6.1 b), we can also convert the matrix back to a two-dimensional array representation. The ﬁrst step is to determine the number of elements in each row of the matrix from the rowPtr array. The number of elements in row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " is the diﬀerence rowPtr[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " rowPtr[i+1] . Then the row can be reconstructed by iterating through the values array starting at values[rowPtr[i]] . In our example matrix, the because the ﬁrst two elements of the rowPtr array are 0 and 2, then we know that there are 2 elements in the ﬁrst row, i.e., values[0] and values[1] . The ﬁrst non-zero element in the values data structure, values[0] , is 3. This value is in column 0, since columnIndex[0] = 0. Similarly, the second non-zero value is the value 4 in column 1. The second row of the matrix has elements with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " [2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " 4), the third row has elements with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " [4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 118,
            "refined_text": " 7), and so on. In this case, there are 9 non-zero entries, thus that last entry in the rowPtr data structure is 9. 118"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " #include ”spmv.h” void spmv( int rowPtr[NUM ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " L1: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " NUM ROWS; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " DTYPE y0 = 0; L2: for ( int k = rowPtr[i]; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " rowPtr[i+1]; k++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " #pragma HLS unroll factor=8 #pragma HLS pipeline y0 += values[k]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " x[columnIndex[k]];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " y[i] = y0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " Figure 6.2: The baseline code for sparse matrix vector (SpMV) multiplication, which performs the operation"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " = M"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " . The variables rowPtr , columnIndex , and values hold M in CRS format. The ﬁrst for loop iterates across the rows while the second nested for loop iterates across the columns of M by multiplying each non-zero element by the corresponding element in the vector x which results in one element in the resulting vector y . Given a 2-dimensional array representing a matrix, write the C code to convert the matrix to CRS form. Write the corresponding C code to convert the matrix in CRS form back to a 2-dimensional array. It turns out that using the CRS form, we can multiply a sparse matrix with a vector relatively eﬃciently without explicitly converting the matrix back to a 2-dimensional array. In fact, for large matrices with a small number of non-zero elements, sparse matrix-vector multiply is much more eﬃcient than the dense matrix-vector multiply we discussed in chapter 4. This is because we can compute the non-zero elements of the result by only looking at the non-zero elements of the operands."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " Figure 6.2 provides a baseline code for sparse matrix vector multiplication. The spmv function has ﬁve arguments. The arguments rowPtr , columnIndex , and values correspond to the input matrix M in CRS format. These are equivalent to the data structures shown in Figure 6.1. The argument y holds the output result"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " and the argument x holds the input vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " to be multiplied by the matrix. The variable NUM ROWS indicates the number of rows in the matrix M . The variable NNZ is the number of non-zero elements in the matrix M . Finally, the variable SIZE is the number of elements in the arrays x and y . The outer for loop, labeled L1 , iterates across each row of the matrix. Multiplying this row of the matrix with the vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " will produce one element of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " . The inner loop labeled L2 loop across the elements in the columns of the matrix M . The L2 loop iterates rowPtr[i+1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 119,
            "refined_text": " rowPtr[i] times, 119"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " #ifndef SPMV H #deﬁne SPMV H const static int SIZE = 4;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " const static int NNZ = 9;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " const static int NUM ROWS = 4;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " typedef ﬂoat DTYPE; void spmv( int rowPtr[NUM ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE]); #endif"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " Figure 6.3: The header ﬁle for spmv function and testbench. corresponding to the number of non-zero entries in that row. For each entry, we read the value of the non-zero element of the M matrix from the values array and multiply it by the corresponding value of the vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " read from the x array. That value is located at columnIndex[k] since the data structure columnIndex holds the column for the value k ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " Figure 6.4 shows a simple testbench for the spmv function. The testbench starts by deﬁning the matrixvector function. This is a straightforward implementation of matrix vector multiplication. This does not assume a sparse matrix and does not use the CRS format. We will compare the output results from this function with the results from our spmv function. A common testbench will implement a “golden” reference implementation of the function that the designer wishes to synthesis. The testbench will then compare the results of the golden reference with those generated from the code that is synthesized by the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " HLS code. A best practice for the testbench is to use alternative implementations for the golden reference and the synthesizable code. This provides more assurance that both implementations are correct. The testbench continues in the main function. Here we set the fail variable equal to 0 (later code sets this to 1 if the output data from spmv does not match that from the function matrixvector ). Then we deﬁne a set of variables that correspond to the matrix M , the input vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " and the output vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " . In case of M , we have both the “normal” form and the CSR form (stored in the variables values , columnIndex , and rowPtr ). The values of the M matrix are the same as shown in Figure 6.1. We have two versions of the output vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 120,
            "refined_text": " . The y sw array stores the output from the function matrixvector and the y array has the output from the function spmv . After deﬁning all of the input and output variables, we call the spmv and matrixvector functions using the appropriate data. The following for loop compares the output results from both of the functions by comparing the elements from y sw with those in y . If any of them are diﬀerent, we set the fail ﬂag equal to 1. Lastly, we print out the results of the test and then return the fail variable. This testbench is relatively simple and probably insuﬃcient to ensure that the implementation is correct. Primarily, it only tests one example matrix, whereas a better testbench would test 120"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " #include ”spmv.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " stdio.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " void matrixvector(DTYPE A[SIZE][SIZE], DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " y, DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " x)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " DTYPE y0 = 0; for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " SIZE; j++) y0 += A[i][j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " x[j]; y[i] = y0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " int main()"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " int fail = 0; DTYPE M[SIZE][SIZE] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 3,4,0,0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 0,5,9,0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 2,0,3,1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 0,4,0,6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ; DTYPE x[SIZE] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 1,2,3,4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ; DTYPE y sw[SIZE]; DTYPE values[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 3,4,5,9,2,3,1,4,6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ; int columnIndex[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 0,1,1,2,0,2,3,1,3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ; int rowPtr[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " 0,2,4,7,9"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " ; DTYPE y[SIZE]; spmv(rowPtr, columnIndex, values, y, x); matrixvector(M, y sw, x); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " SIZE; i++) if (y sw[i] != y[i]) fail = 1; if (fail == 1) printf(”FAILED"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " n”); else printf(”PASS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " n”); return fail;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 121,
            "refined_text": " Figure 6.4: A simple testbench for our spmv function. The testbench generates one example and computes the matrix vector multiplication using a sparse ( spmv ) and non-sparse function ( matrixvector ). 121"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " multiple matrices. It is common, for instance, to randomly generate inputs for testing, in addition to explicitly verifying important corner-cases. In this case, we need to make sure to vary not only the values being operated on, which which will be passed to our accelerator when it is executing, but also to vary the compile-time parameters which might be used to create diﬀerent accelerators with diﬀerent tradeoﬀs. The key diﬀerence is that we can randomly generate multiple data values to operate on and test them all in the same execution of the program, using multiple function calls. Compile-time parameters, on the other hand, require the code to be recompiled every time parameters change. Create a more sophisticated testbench which generates multiple sets of test data using a random number generator. The compile-time parameters of the sparse matrix should be modiﬁable (e.g., SIZE , NNZ , etc.). Create an HLS synthesis script which executes the same code multiple times for diﬀerent reasonable compile-time parameters."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " HLS tool additional information about the loop bounds. This can be done using the loop tripcount directive, which enables the designer to specify a minimum, maximum, and/or average number of iterations for each particular loop. By providing these values, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " HLS tool is capable of providing an estimate on the number of clock cycles. Use the loop tripcount directive to specify minimum, maximum, and/or average number of iterations for a loop with a variable bound. This enables the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 122,
            "refined_text": " HLS tool to provide an estimate on the number of clock cycles for the design. This does not impact the results of the synthesis; it only eﬀects the synthesis report. 122"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " C/RTL cosimulation performs automatic testing of the register-transfer level (RTL) designs that are generated by the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " HLS tool. It does this by executing the synthesized code together with the provided testbench. The execution is instrumented to record the input and output values for each execution of the synthesized code. The input values are converted to cycle-by-cycle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " . The input vectors are used in an RTL-level simulation of the generated RTL design and the resulting"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 123,
            "refined_text": " are captured. The testbench code can then be executed again replacing the synthesized code with the captured input and output values. The testbench code can then return a zero value (indicating success) or a non-zero value (indicating failure). The C/RTL cosimulation ﬂow combines the cycle-accurate RTL design generated from the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "refined_text": " L2 (II = 3) columnIndex[] y[] L1 Iteration 1 L1 Iteration 3 columnIndex[] x[] k values[] y[] i values[] x[] L1 Iteration 2 L1 Iteration 4 Figure 6.5: Architecture and behavior of the spmv code with a pipelined inner loop. What are the minimum, maximum, and average clock cycles for the spmv function latency and function interval when using the testbench provided in Figure 6.4?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 124,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 125,
            "refined_text": " HLS, we can build a mental model of the most critical aspects. 125"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "refined_text": " One of the options we considered in cases 3 and 4 above was to increase pipeline outer loops, such as the L1 loop in this code, rather than inner loops. This transformation has the eﬀect of increasing the potential parallelism within one task. In order to perform this optimization, the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "refined_text": " HLS tool must fully unroll inner loops, like the L2 loop in this code. If full unrolling is possible, this can reduce the cost of calculating the loop bounds and can also eliminate recurrences in the code. However, in this code, the inner loop cannot be unrolled by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "refined_text": " HLS to instantiate more operators when pipelining the inner loop. However, in this case it is still diﬃcult to improve the II of the inner loop because of the recurrence through the inner loop. However, in this case, because we have an II greater than 1, many of those operations can be shared on the same operators. An partially unrolled version of the code is shown in Figure 6.6. In this code, the L2 loop has been split into two loops labeled L2 1 and L2 2 . The innermost L2 2 executes a parameterized number of times, given by the compile-time parameter S . The body of the inner loop contains the body of the original L2 loop, along with a condition that arises from the loop bound of the original L2 loop. In this code, we now have an arbitrary number of multiply and add operations to execute in the body of the L2 1 loop, given by the parameter S , and a single recurrence through the accumulation y0 += yt . Note that the code in Figure 6.6 is slightly diﬀerent from the code that is generated from automatic loop unrolling. Automatic loop unrolling duplicates operations, but must also preserve the order of each operation (additions in this case). This results in a long chain of operation dependencies in the inner loop shown on the left side of Figure 6.7. Reordering the operations results in operation dependencies show on the right side of the ﬁgure. In this case, only the ﬁnal accumulation results in a recurrence. When using ﬂoating-point data types, this reordering of operations can slightly change the behavior of the program, so Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 126,
            "refined_text": " HLS does not apply this kind of operation reordering automatically. A possible implementation of this design is shown in Figure 6.8. In this case, S = 3 to match the best achievable II where there is a latency of 3 through the adder. In this case, we see that all the operations have been successfully shared on a single multiplier and adder. Comparing this behavior to the behavior in Figure 6.5, we see that there are some disadvantages. In particular, the depth of the pipeline of the inner loop is much longer, which implies that the number of cycles to ﬂush the pipeline to start a new iterations of the outer L1 loop is much larger. Processing of the non-zero elements in a row also occurs in blocks of size S . A row with 3 elements takes exactly the same time to compute as a row with one element. The remaining operations which are still scheduled in the loop pipeline must still ‘execute’ even though their results are discarded. In order to rigorously compare the characteristics of the two designs, we need to understand the expected number of non-zero elements in each row of the matrix. Fewer non-zero elements in each line would 126"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " #include ”spmv.h” const static int S = 7; void spmv( int rowPtr[NUM ROWS+1], int columnIndex[NNZ], DTYPE values[NNZ], DTYPE y[SIZE], DTYPE x[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " L1: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " NUM ROWS; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " DTYPE y0 = 0; L2 1: for ( int k = rowPtr[i]; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " rowPtr[i+1]; k += S)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " #pragma HLS pipeline II=S DTYPE yt = values[k]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " x[columnIndex[k]]; L2 2: for ( int j = 1; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " S; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " if (k+j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " rowPtr[i+1])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " yt += values[k+j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " x[columnIndex[k+j]];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " y0 += yt;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " y[i] = y0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 127,
            "refined_text": " Figure 6.6: A partially unrolled version of the spmv code from Figure 6.2. 0 0 Figure 6.7: Two diﬀerent partially unrolled versions of an accumulation. The version on the left has a recurrence with three additions, whereas the version on right only has one addition in the recurrence. 127"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": " L2 1 II = 3 columnIndex[] y[] L1 Iteration 1 values[] x[] L1 Iteration 2 Figure 6.8: Architecture and behavior of the spmv code based on the partially unrolled and pipelined inner loop shown in Figure 6.6. favor the ﬁrst implementation, while more non-zero elements in each line would favor the second implementation. Notice that there is, to some extent a chicken-and-egg problem here. We need to know the target device and clock period to determine the number of pipeline stages required for the adder to meet timing. Only after we know the number of pipeline stages (perhaps by running with S=1 and investigating the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": " In this chapter, we looked at sparse matrix-vector multiplication (SpMV). This continues our study of matrix operations. This operation is particularly interesting because it uses a unique data structure. In order to reduce the amount of storage, the matrix is stored in a compressed row storage format. This requires a design that uses some indirect references to ﬁnd the appropriate entry in the matrix. This chapter is the ﬁrst to discuss at length the testing and simulation abilities of the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 128,
            "refined_text": " HLS tool. We provide a simple testbench for SpMV and describe how it can be integrated into the HLS work-ﬂow. Additionally, we describe the C/RTL cosimulation features of the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " This chapter looks at a bit more complex design – matrix multiplication. We consider two diﬀerent versions. We start with a “straightforward” implementation, i.e., one that takes two matrices as inputs and outputs the result of their multiplication. We call this complete matrix multiplication. Then, we look at a block matrix multiplication. Here the input matrices are feed into the function in portions, and the function computes partial results."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " Matrix multiplication is a binary operation that combines two matrices into a third. The operation itself can be described as a linear operation on the vectors that compose the two matrices. The most common form of matrix multiplication is call the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " . The matrix product AB creates an"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " matrix when matrix A has dimensions"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " and matrix B has dimensions"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " . More precisely, we deﬁne the following: A =  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ... ... ... ..."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": "  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " B =  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ... ... ... ..."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": "   (7.1) AB =   ( AB ) 11 ( AB ) 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ( AB ) 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ( AB ) 21 ( AB ) 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ( AB ) 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ... ... ... ... ( AB )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 1 ( AB )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " ( AB )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": "   (7.2) where the operation ( AB )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " is deﬁned as ( AB )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " =1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " . Now we provide a simple example. Let A = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 13"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 23 �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " B =  "
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 32   (7.3) The result of the matrix product is AB = �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 13"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 13"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 11 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 21"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 12 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 22 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 129,
            "refined_text": " 32 � (7.4) 129"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " void matrixmul( int A[N][M], int B[M][P], int AB[N][P])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " #pragma HLS ARRAY RESHAPE variable=A complete dim=2 #pragma HLS ARRAY RESHAPE variable=B complete dim=1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " row: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " N; ++i)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " col: for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " P; ++j)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " #pragma HLS PIPELINE II=1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " int ABij = 0; product: for ( int k = 0; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " M; ++k)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " ABij += A[i][k]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " B[k][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " AB[i][j] = ABij;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " We start our optimization process with perhaps the most common method to compute a matrix multiplication – using three nested for loops. Figure 7.1 provides the code for such an implementa- tion. The outer for loops, labeled rows and cols , iterate across the rows and columns of the output matrix AB . The innermost for loop computes a dot product of one row of A and one column of B . Each dot product is a completely independent set of computations that results in one element of AB . Conceptually, we are performing P matrix-vector multiplications, one for each column of B . In this case, we’ve applied a pipeline directive to the col loop with a target initiation interval of 1. The result is that the innermost for loop is fully unrolled, and we expect the resulting circuit include roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " multiply-add operators and to have an interval of roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 130,
            "refined_text": " cycles. As discussed in Chapter 4, this is only one reasonable choice. We could choose to place the pipeline directive in 130"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": " diﬀerent locations in the function with the goal of achieving diﬀerent resource-throughput tradeoﬀs. For instance, placing the same directive at the top of the function (outside all of the for loops) will result in all of the loops being completely unrolled, which would take roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": " multiply-add operators and would have an interval of 1 cycle. Placing it inside the row loop would result in roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 131,
            "refined_text": " multiply-add operators and an interval of roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " A[i][k] i,k N*M elements 32 bits log 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " ) 32 A[i][0] i N elements 32 bits log 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " ) 32 A[i][1] i A[i][M-1] i A[i][M-2] i M memories A[i][] i N elements log 2 ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " ) 32*M 32*M bits Figure 7.2: Three diﬀerent implementations of a two-dimensional array. On the left is the original array consisting of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " elements. In the middle, the array has been transformed using the array partition directive, resulting in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " memories, each with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " elements. On the right, the array has been transformed using the array reshape directive, resulting in one memory with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " locations and each location contains"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " 2 or 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " 32, this approach quickly become infeasible because of the resource limits available in a single device. There will simply not be enough DSP resources to implement that many multiplications every clock cycle or enough external bandwidth to get get data on and oﬀ the chip. Many FPGA designs are often coupled to the data rates of other components in a system, such as an Analog to Digital (A/D) converter, or the symbol rate in a communication system. In these designs it is common to instead apply the pipeline directive on inner loops with the goal of matching the interval of the computation with the data rate in a system. In such cases, we often need to explore diﬀerent resource-throughput tradeoﬀs by moving the pipeline directive into an inner loop or partially unrolling loops. When dealing with very large matrices containing thousands or millions of elements, we often need to take into account more complex architectural considerations. The next section discusses a common approach to scaling matrix multiply to larger designs, called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 132,
            "refined_text": " . 132"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " Optimize your design for the 128"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " 128 matrix multiplication. Then start increasing the size of the matrices by a factor of two (to 512"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " 512, 1024"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " 1024, 2048"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " A"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " is interpreted as being partitioned into diﬀerent submatrices. This can be visualized by drawing diﬀerent horizontal and vertical lines across the elements of the matrix. The resulting “blocks” can be viewed as submatrices of the original matrix. Alternatively, we can view the original matrix as a matrix of blocks. This naturally leads to many hierarchical algorithms in Linear Algebra where we compute matrix operations, such as matrix multiply, on large block matrices by decomposing them into smaller matrix operations on the blocks themselves. For instance, when we talk about the matrix multiplication operation between matrix A and B in Equations 7.3 and 7.4, we might normally think of each element of the matrices A 11 or B 23 as a single number or perhaps a complex number. Alternatively, we can consider each element in these matrix operations as a block of the original matrix. In this case, as long as the sizes of the individual blocks are compatible, we simply have to perform the correct matrix operations instead of the original scalar operations. For instance, to compute AB 11 , we would need to compute two matrix products and two matrix sums to compute A 11 B 11 + A 12 B 21 + A 13 B 31 . Matrix blocking turns out to be a very useful technique for a number of reasons. One reason is that blocking is an easy way to ﬁnd more structure in the algorithm that we can explore. In fact, some of the optimizations that we have already seen as loop transformations, such as loop unrolling, can be viewed as speciﬁc simple forms of blocking. Another reason is that we can choose to block a matrix according to the natural structure of the matrix. If a matrix has a large block of zeros, then many individual products may be zero. If we want to skip these individual products then this can be diﬃcult in a statically schedule pipeline, whereas it may be easier to skip a large block of zeros. Many matrices are"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 133,
            "refined_text": " since we transfer the input data (and potentially the output data) one portion at a time rather than all at once. Streaming architectures are common in many applications. In some cases this is because of a conscious design choice that we make to decompose a large computation into multiple smaller computations. For instance, we may design a matrix multiplication system that reads and processes one block of data at a time from external memory. In other cases, we might process a stream of data because the data is being sampled in real time from the physical world, for instance, from an 133"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " A/D converter. In other cases, the data we are processing may simply be created in sequence from a previous computation or accelerator. In fact, we’ve already seen an instance of this in Section 5.4. One potential advantage of streaming is a reduction in the memory that we can use to store the input and output data. The assumption here is that we can operate on the data in portions, create partial results, and then we are done with that data, thus we do not need to store it. When the next data arrives, we can overwrite the old data resulting in smaller memories. In the following, we develop a streaming architecture for matrix multiplication. We divide the input arrays A and B into blocks, which are a contiguous set of rows and columns, respectively. Using these blocks, we compute a portion of the product AB . Then we stream the next set of blocks, compute another portion of AB until the entire matrix multiplication is complete. Figure 7.3 provides the a description of the streaming architecture that we create. Our archi- tecture has a variable BLOCK SIZE that indicates the number of rows that we take from the A matrix on each execution, the number of columns taken from the B matrix, and the BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " BLOCK SIZE result matrix corresponding to the data that we compute each time for the AB matrix. The example in Figure 7.3 uses a BLOCK SIZE = 2 . Thus we take two rows from A , and two columns from B on each execution of the streaming architecture that we deﬁne. The result of each call to the blockmatmul function is a 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " 2 matrix for the AB architecture. Since we are dealing with 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " 4 matrices in the example, we need to do this process four times. Each time we get a 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " 2 set of results for the AB matrix. The ﬁgure shows a progression of the rows and columns that we send. In Figure 7.3 a) we send the ﬁrst two rows of A and the ﬁrst two columns of B . The function will compute a 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 134,
            "refined_text": " 2 matrix corresponding to the ﬁrst two elements in the rows and columns of the resulting matrix AB . In Figure 7.3 b), we use again the ﬁrst two rows of A , but this time we send the last two columns of B . We do not need to resend the data from the rows of A since they are the same as the previous data from the previous execution. And we get the results for the 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " A 12 A 11 A 14 A 13 A 22 A 21 A 24 A 23 A 32 A 31 A 34 A 33 A 42 A 41 A 44 A 43 B 12 B 11 B 14 B 13 B 22 B 21 B 24 B 23 B 32 B 31 B 34 B 33 B 42 B 41 B 44 B 43 AB 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " A 12 A 11 A 14 A 13 A 22 A 21 A 24 A 23 A 32 A 31 A 34 A 33 A 42 A 41 A 44 A 43 B 12 B 11 B 14 B 13 B 22 B 21 B 24 B 23 B 32 B 31 B 34 B 33 B 42 B 41 B 44 B 43"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " A 12 A 11 A 14 A 13 A 22 A 21 A 24 A 23 A 32 A 31 A 34 A 33 A 42 A 41 A 44 A 43 B 12 B 11 B 14 B 13 B 22 B 21 B 24 B 23 B 32 B 31 B 34 B 33 B 42 B 41 B 44 B 43"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " A 12 A 11 A 14 A 13 A 22 A 21 A 24 A 23 A 32 A 31 A 34 A 33 A 42 A 41 A 44 A 43 B 12 B 11 B 14 B 13 B 22 B 21 B 24 B 23 B 32 B 31 B 34 B 33 B 42 B 41 B 44 B 43"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " AB 12 AB 13 AB 14 AB 21 AB 22 AB 23 AB 24 AB 31 AB 32 AB 33 AB 34 AB 41 AB 42 AB 43 AB 44 AB 11 AB 12 AB 13 AB 14 AB 21 AB 22 AB 23 AB 24 AB 31 AB 32 AB 33 AB 34 AB 41 AB 42 AB 43 AB 44 AB 11 AB 12 AB 13 AB 14 AB 21 AB 22 AB 23 AB 24 AB 31 AB 32 AB 33 AB 34 AB 41 AB 42 AB 43 AB 44 AB 11 AB 12 AB 13 AB 14 AB 21 AB 22 AB 23 AB 24 AB 31 AB 32 AB 33 AB 34 AB 41 AB 42 AB 43 AB 44 Figure 7.3: One possible blocked decomposition of the matrix multiplication of two 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " 4 matrices. The entire AB product is decomposed into four matrix multiply operations operating on a 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " 4 block of A and a 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 135,
            "refined_text": " 2 block of B . 135"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " #ifndef BLOCK MM H #deﬁne BLOCK MM H #include ”hls stream.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " iostream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " iomanip"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " vector"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " using namespace std; typedef int DTYPE; const int SIZE = 8; const int BLOCK SIZE = 4; typedef struct"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " DTYPE a[BLOCK SIZE];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " blockvec; typedef struct"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " DTYPE out[BLOCK SIZE][BLOCK SIZE];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " blockmat; void blockmatmul(hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " &Arows, hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 136,
            "refined_text": " &Bcols, blockmat & ABpartial, DTYPE iteration); #endif Figure 7.4: The header ﬁle for the block matrix multiplication architecture. The ﬁle deﬁnes the data types used within the function, the key constants, and the blockmatmul function interface. 136"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " BLOCK SIZE portion of the AB matrix. The blockvec data type is used to transfer the BLOCK SIZE rows of A and columns of B to the function on each execution. The blockmat data type is where we store the partial results for the AB matrix. Finally, the blockmat data type is a structure consisting of an BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " BLOCK SIZE array. This holds the resulting values from one execution of the matrmatmul function. The function prototype itself takes the two inputs which are both of the type hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " & . These are a sequence of blockvec data. Remember that a blockvec is a data type that consists of an array with BLOCK SIZE elements. The hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " template class is one way in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " HLS of creating a FIFO data structure that works well in simulation and synthesis. The samples are sent in sequential order using the write() function, and retrieved using the read() function. This library was developed since streaming is a common methodology for passing data in hardware design, yet this same operation can be modeled in many diﬀerent ways using the C programming language, for instance, by using arrays. In particular, it can be diﬃcult for the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 137,
            "refined_text": " HLS tool to infer streaming behaviors when dealing complex access patterns or multi-dimensional arrays. The built-in stream library enables the programmer to explicitly specify the order of stream accesses, avoiding any limitations of this inference. The hls::stream class must always be passed by reference between functions, e.g., as we have done in the blockmatmul function in Figure 7.5. The code for executing one part of the streaming block matrix multiplication is shown in Figure 7.5. The code has three portions denoted by the labels loadA , partialsum , and writeoutput . The ﬁrst part of the code, denoted by the loadA label, is only executed on certain conditions, more precisely when it % (SIZE/BLOCK SIZE) == 0 . This is done to save some time in the cases when we can reuse the data from the A matrix from the previous execution of the function. Remember that in each execution of this blockmatmul function we send BLOCK SIZE rows from the A matrix and BLOCK SIZE columns from the B matrix. We send multiple BLOCK SIZE of columns for each BLOCK SIZE of rows from A . The variable it keeps track of the number of times that we have called the blockmatmul function. Thus, we do a check on each execution of the function to determine if we need to load the rows from A . When we do not, this saves us some 137"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " #include ”block mm.h” void blockmatmul(hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " &Arows, hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " &Bcols, blockmat &ABpartial, int it)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " #pragma HLS DATAFLOW int counter = it % (SIZE/BLOCK SIZE); static DTYPE A[BLOCK SIZE][SIZE]; if (counter == 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " loadA: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " blockvec tempA = Arows.read(); for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " #pragma HLS PIPELINE II=1 A[j][i] = tempA.a[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " DTYPE AB[BLOCK SIZE][BLOCK SIZE] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " ; partialsum: for ( int k=0; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " SIZE; k++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " blockvec tempB = Bcols.read(); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " AB[i][j] = AB[i][j] + A[i][k]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " tempB.a[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " writeoutput: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " ABpartial.out[i][j] = AB[i][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " Figure 7.5: The blockmatmul function takes a BLOCK SIZE set of rows from A matrix, a BLOCK SIZE set of columns from the B matrix, and creates a BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 138,
            "refined_text": " BLOCK SIZE partial result for the AB matrix. The ﬁrst part of the code (denoted by the label loadA ) stores the rows from A into a local memory, the second part in the nested partialsum for performs the computation for the partial results, and the ﬁnal part (with the writeoutput label) takes these results and puts them the proper form to return from the function. 138"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " time. When it is executed, it simply pulls data from the Arows stream and puts it into a static local two-dimensional matrix A[BLOCK SIZE][SIZE] . Fully understanding this code requires some explanation about the stream class, and how we are using it. The stream variable Arows has elements of the type blockvec . A blockvec is a matrix of size BLOCK SIZE . We use this in the following manner; each element in the Arows stream has an array that holds one element from each of the BLOCK SIZE rows of the A matrix. Thus, in each call the the blockmatmul function, the Arows stream will have SIZE elements in it, each of those holding one of each of the BLOCK SIZE rows. The statement tempA = Arows.read() takes one element from the Arows stream. Then we load each of these elements into the appropriate index in the local A matrix. The stream class overloads the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " operator to be equivalent to the read() function. Thus, the statements tempA = Arows.read() and tempA"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " Arows perform the same operation. The next part of the computation calculates the partial sums. This is the bulk of the compu- tation in the blockmatmul function. The Bcols stream variable is utilized in a very similar manner to the Arows variable. However, instead of storing rows of A , it stores the data corresponding the columns of B that the current execution of the function is computing upon. Every call of the blockmatmul function will provide new data for the columns of the B matrix. Thus, we do not need to conditionally load this data as we do with the A matrix. The function itself works in a very similar manner to that from the matmul in Figure 7.1 except that we are only calculating BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE results from the AB matrix. Thus we only have to iterate across BLOCK SIZE rows of A and BLOCK SIZE columns of B . But each row and column has SIZE elements, hence the bounds on the outer for loop. The ﬁnal portion of the function moves the data from the local AB array, which has dimensions of BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE ; this holds the partial results of the AB output matrix. Of the three parts of the function, the middle part, which calculates the partial sum, requires the most computation. By inspecting the code, we can see that this part has three nested for loops with a total of SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE iterations. The ﬁrst part has SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 139,
            "refined_text": " BLOCK SIZE iterations; and the last part has BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " Using this directive will decrease the interval of the blockmatmul function. However, this is limited by the largest interval of all three of the portions of the code. That is, the maximum interval for the blockmatmul function – let us call it interval( blockmatmul ) – is greater than or equal to the the interval of the three parts which are deﬁned as interval( loadA ), interval( partialsum ), and interval( writeoutput ). More formally,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " ( blockmatmul )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " max("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " ( loadA )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " ( partialsum )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " variables that hold the rows and columns of the A and B matrices, respectively. Each element of these stream variables is a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " . Referring back at the block mm.h ﬁle in Figure 7.4, we recall that a blockvec is deﬁned as an array of data; we will use each blockvec to store one row or column of data. The stream variable resides in the hls namespace. Thus, we can use that namespace and forgo the hls::stream and instead simply use stream . However, the preferred usage is to keep the hls:: in front of the stream to insure code readers that the stream is relevant to Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 140,
            "refined_text": " HLS and not C construct from another library. Also, it avoids having to deal with any potential conﬂicts that may occur by introducing a new namespace. 140"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " The next deﬁnitions in this beginning block of code are the variables strm matrix1 element and strm matrix2 element . These two variables are used as placeholders to populate each blockvec variable that we write into the strm matrix1 and strm matrix2 stream variables. The block out variable is used to store the output results from the blockmatmul function. Note that this variable uses the data type blockmat which is a two-dimensional array of BLOCK SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " BLOCK SIZE as deﬁned in the block mm.h header ﬁle (see Figure 7.4). The ﬁnal deﬁnitions are A , B , matrix swout , and matrix hwout . These are all SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " SIZE two-dimensional arrays with the DTYPE data type. You can name the streams using an initializer. This is good practice as it gives bet- ter error messages. Without the name, the error message provides a generic reference to the stream with the data type. If you have multiple stream declarations with the same data type, then you will have to ﬁgure out which stream the error is referring to. Nam- ing the stream variable is done by giving the variable an argument which is the name, e.g., hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " strm matrix1(”strm matrix1”); . The next set of nested initmatrices for loops sets the values of the four two-dimensional arrays A , B , matrix swout , and matrix hwout . The variables A and B are input matrices. These are initialized to a random value between [0, 512). We picked the number 512 for no particular reason other than it can ﬁt any 9 bit value. Keep in mind that while the DTYPE is set as an int , and thus has signiﬁcantly more range than [0,512), we often move to ﬁxed point values with much smaller ranges later in the design optimization process. The matrix swout and matrix hwout are both initialized to 0. These are ﬁlled in later by calls to the functions matmatmul sw and blockmatmul . The second part of the testbench is continued in Figure 7.7. This has the last portion of the code from the main function. The ﬁrst part of this ﬁgure has a complex set of nested for loops. The overall goal of the computation in these for loops is to set up the data from the input matrices A and B so that it can be streamed to the blockmatmul function. Then the results of the blockmatmul function are stored in the matrix hwout array. The outer two for loops are used to step across the input arrays in a blocked manner. You can see that these both iterate by a step of BLOCK SIZE . The next two for loops write rows from A into strm matrix1 element and the columns from B into strm matrix2 element . It does this in an element by element fashion by using the variable k to access the individual values from the rows (columns) and write these into the one dimensional array for each of these “elements”. Remember that both strm matrix1 element and strm matrix2 element have the datatype blockvec , which is a one dimensional array of size BLOCK SIZE . It is meant to hold BLOCK SIZE elements from each row or column. The inner for loop iterates BLOCK SIZE times. The strm matrix1 and strm matrix2 stream variables are written to SIZE times. That means that has a buﬀer of the entire row (or column) and each element in the buﬀer holds BLOCK SIZE values. The stream class overloads the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " operator to be equivalent to the write(data) function. This is similar to overloading the read() function to the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " operator. Thus, the state- ments strm matrix1.write(strm matrix1 element) and strm matrix1 element"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 141,
            "refined_text": " strm matrix1 per- form the same operation. The ﬁnal part of this portion of the code to highlight is the if statements. These are correspond to the values A matrix. Essentially, these are there so that we do not constantly write the same 141"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " #include ”block mm.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " stdlib.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " using namespace std; void matmatmul sw(DTYPE A[SIZE][SIZE], DTYPE B[SIZE][SIZE], DTYPE out[SIZE][SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " DTYPE sum = 0; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " sum = 0; for ( int k = 0; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " SIZE; k++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " sum = sum + A[i][k]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " B[k][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " out[i][j] = sum;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " int main()"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " int fail = 0; hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " strm matrix1(”strm matrix1”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " blockvec"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " strm matrix2(”strm matrix2”); blockvec strm matrix1 element, strm matrix2 element; blockmat block out; DTYPE A[SIZE][SIZE], B[SIZE][SIZE]; DTYPE matrix swout[SIZE][SIZE], matrix hwout[SIZE][SIZE]; initmatrices: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " SIZE; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " A[i][j] = rand() % 512; B[i][j] = rand() % 512; matrix swout[i][j] = 0; matrix hwout[i][j] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 142,
            "refined_text": " Figure 7.6: The ﬁrst part of the testbench for block matrix multiplication. The function is split across two ﬁgures since it is too long to display on one page. The rest of the testbench is in Figure 7.7. This has a “software” version of matrix multiplication, and variable declarations and initializations. 142"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " int main()"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " int row, col, it = 0; for ( int it1 = 0; it1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " SIZE; it1 = it1 + BLOCK SIZE)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " for ( int it2 = 0; it2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " SIZE; it2 = it2 + BLOCK SIZE)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " row = it1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " col = it2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " for ( int k = 0; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " SIZE; k++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " BLOCK SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " if (it % (SIZE/BLOCK SIZE) == 0) strm matrix1 element.a[i] = A[row+i][k]; strm matrix2 element.a[i] = B[k][col+i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " if (it % (SIZE/BLOCK SIZE) == 0) strm matrix1.write(strm matrix1 element); strm matrix2.write(strm matrix2 element);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " blockmatmul(strm matrix1, strm matrix2, block out, it); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " BLOCK SIZE; i++) for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " BLOCK SIZE; j++) matrix hwout[row+i][col+j] = block out.out[i][j]; it = it + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " matmatmul sw(A, B, matrix swout); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " SIZE; i++) for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " SIZE; j++) if (matrix swout[i][j] != matrix hwout[i][j])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " fail=1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " if (fail==1) cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " ”failed”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " endl; else cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " ”passed”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " endl; return 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 143,
            "refined_text": " Figure 7.7: The second portion of the block matrix multiply testbench. The ﬁrst part is shown in Figure 7.6. This shows the computation required to stream the data to the blockmatmul function, and the code that tests that this function matches a simpler three for loop implementation. 143"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 144,
            "refined_text": " Block matrix multiplication provides a diﬀerent way to compute matrix multiplication. It computes partial results of the result matrix by streaming a subset of the input matrices to a function. This function is then computed multiple times in order to complete the entire matrix multiplication computation. 144"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " Preﬁx sum is a common kernel used in many applications, e.g., recurrence relations, compaction problems, string comparison, polynomial evaluation, histogram, radix sort, and quick sort [11]. Preﬁx sum requires restructuring in order to create an eﬃcient FPGA design. The preﬁx sum is the cumulative sum of a sequence of numbers. Given a sequence of inputs"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " , the preﬁx sum"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " is the summation of the ﬁrst"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " inputs, namely"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " . The following shows the computation for the ﬁrst four elements of the output sequence"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " ."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 2 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 3 ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 0 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 2 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " Of course, in practice we don’t want to store and recompute the sum of all of the previous inputs, so the preﬁx sum is often computed by the recurrence equation:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " (8.1) The disadvantage of the recurrence equation is that we must compute"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " 1 before computing"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " , which fundamentally limits the parallelism and throughput that this computation can be performed. In contrast, the original equations have obvious parallelism where each output can be computed independently at the expense of a signiﬁcant amount of redundant computation. C code implementing the recurrence equation is shown in Figure 8.1. Ideally, we’d like to achieve"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " = 1 for the loop in the code, but this can be challenging even for such simple code. Implementing this code with Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 145,
            "refined_text": " HLS results in behavior like that shown in Figure 8.1. The way this code is written, each output is written into the output memory out[] and then in the next iteration is read back out of the memory again. Since the memory read is has a latency of one, data read from memory cannot be processed until the following clock cycle. As a result, such a design can only achieve a loop II of 2. In this case there is a relatively easy way to rewrite the code: we can simply perform the accumulation on a separate local variable, rather than reading the previous value back from the array. Avoiding extra memory accesses in favor of register storage 145"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " #deﬁne SIZE 128 void preﬁxsum( int in[SIZE], int out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " out[0]=in[0]; for ( int i = 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " #pragma HLS PIPELINE out[i] = out[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " 1] + in[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " Loop Interval = 2 In Out Out Figure 8.1: Code for implementing preﬁx sum, and its accompanying behavior. #deﬁne SIZE 128 void preﬁxsum( int in[SIZE], int out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " int A = in[0]; for ( int i=0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " #pragma HLS PIPELINE A = A + in[i]; out[i] = A;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " HLS is capable of optimizing loads and stores to array, but only for reads and writes within the scope of a single basic block. You can see this if we unroll the loop, as shown in Figure 8.3. Note that we also have to add appropriate array partition s in order to be able to read and write multiple values at the interfaces. In this case, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 146,
            "refined_text": " HLS for a pipelined loop requires the pipeline to completely ﬂush before code after the loop can execute. 146"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " #deﬁne SIZE 128 void preﬁxsum( int in[SIZE], int out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " #pragma HLS ARRAY PARTITION variable=out cyclic factor=4 dim=1 #pragma HLS ARRAY PARTITION variable=in cyclic factor=4 dim=1 int A = in[0]; for ( int i=0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " #pragma HLS UNROLL factor=4 #pragma HLS PIPELINE out[i] = out[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " 1] + in[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " Loop Interval = 2 In[i*4+0] Out[i*4+0] Out[i*4+3] In[i*4+1] In[i*4+2] In[i*4+3] Out[i*4+1] Out[i*4+2] Out[i*4+3] Figure 8.3: Optimizing the preﬁxsum code using unroll , pipeline , and array partition directives."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 147,
            "refined_text": " Figure 8.4: Part a) displays an architecture corresponding to the code in Figure 8.1. The depen- dence on the out[] array can prevent achieving a loop II of 1. Computing the recurrence with a local variable, as shown in the code in Figure 8.2, is able to reduce the latency in the recurrence and achieve a loop II of 1. Unroll the for loop corresponding to the preﬁx sum code in Figure 8.2 by diﬀerent factors in combination with array partitioning to achieve a loop II of 1. How does the preﬁxsum function latency change? What are the trends in the resource usages? Why do you think you are seeing these trends? What happens when the loop becomes fully unrolled? Figure 8.4 shows the hardware architecture resulting from synthesizing the code from Figure 8.1 and Figure 8.2. In part a), we can see that the ‘loop’ in the circuit includes the output memory that stores the out[] array, whereas in part b), the loop in the circuit includes only a register that stores the accumulated value and the output memory is only written. Simplifying recurrences and eliminating unnecessary memory accesses is a common practice in optimizing HLS code. The goal of this section is to show that even a small changes in the code can sometimes have a signiﬁcant eﬀect on the hardware design. Some changes may not necessarily be intuitive, but can be identiﬁed with feedback from the tool. 147"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " Figure 8.5: An example of a histogram. void histogram( int in[INPUT SIZE], int hist[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " int val; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " INPUT SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " #pragma HLS PIPELINE val = in[i]; hist[val] = hist[val] + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " Figure 8.6: Original code for calculating the histogram. The for loop iterates across the input array and increments the corresponding element of the hist array."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " A Histogram models the probability distribution of a discrete signal. Given a sequence of discrete input values, the histogram counts the number of times each value appears in the sequence. When normalized by the total number of input values, the histogram becomes the probability distribution function of the sequence. Creating a histogram is a common function used in image processing, signal processing, database processing, and many other domains. In many cases, it is common to quantize high-precision input data into a smaller number of intervals or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " as part of the histogram computation. For the purpose of this section, we will skip the actual process by which this is done and focus on what happens with the binned data. Figure 8.5 provides a simple example of a histogram. The data set consists of a sequence of binned values, in this case represented by an integer in [0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 148,
            "refined_text": " 4]. The corresponding histogram, consist- ing of a count for each bin, is shown below along with a graphical representation of the histogram, where the height of each bar corresponding to the count of each separate value. Figure 8.6 shows baseline code for the histogram function. The code ends up looking very similar to the preﬁx sum in the previous section. The diﬀerence is that the preﬁx sum is essentially only performing one accumulation, while in the histogram function we compute one accumulation for each bin. The other diﬀerence is that in the preﬁx sum we added the input value each time, in this case we only add 1. When pipelining the inner loops using the pipeline directive, we return to the same problem as with the code in Figure 8.1, where we can only achieve a loop II of 2 due to the recurrence through the memory. This is due to the fact that 148"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " Figure 8.7: An architecture resulting from the code in Figure 8.6. The val data from the in array is used to index into the hist array. This data is incremented and stored back into the same location. we are reading from the hist array and writing to the same array in every iteration of the loop. Figure 8.7 shows the hardware architecture for the code in Figure 8.6. You can see that the hist array has a read and write operation. The val variable is used as the index into the hist array, and the variable at that index is read out, incremented, and written back into the same location."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " Let’s look deeper at the recurrence here. In the ﬁrst iteration of the loop, we read the hist array at some location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 and write back to the same location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 . The read operation has a latency of one clock cycle, so the write has to happen in the following clock. Then in the next iteration of the loop, we read at another location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 . Both"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 are dependent on the input and could take any value, so we consider the worst case when generating the circuit. In this case, if"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 =="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 , then the read at location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 cannot begin until the previous write has completed. As a result, we must alternate between reads and writes. It turns out that we must alternate between reads and writes as long as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 are indepen- dent. What if they are"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " actually independent? For instance, we might know that the source of data never produces two consecutive pieces of data that actually have the same bin. What do we do now? If we could give this extra information to the HLS tool, then it would be able to read at location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 1 while writing at location"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " 0 because it could guarantee that they are diﬀerent addresses. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " HLS, this is done using the dependence directive. The modiﬁed code is shown in Figure 8.8. Here we’ve explicitly documented (informally) that the function has some preconditions. In the code, we’ve added an assert() call which checks the second precondition. in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " HLS, this assertion is enabled during simulation to ensure that the simulation testvectors meet the required precondition. The dependence directive captures the eﬀect of this precondition on the circuit, generated by the tool. Namely, it indicates to Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " HLS that reads and writes to the hist array are dependent only in a particular way. In this case, inter -iteration dependencies consisting of a read operation after a write operation (RAW) have a distance of 2. In this case a distance of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " would indicate that read operations in iteration"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " +"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " only depend on write operations in iteration"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 149,
            "refined_text": " . In this case, we assert that in[i+1] != in[i] , but it could be the case that in[i+2] == in[i] so the correct distance is 2. 149"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " assert.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " #include ”histogram.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " void histogram( int in[INPUT SIZE], int hist[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " #pragma HLS DEPENDENCE variable=hist inter RAW distance=2 int val; int old ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " 1; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " INPUT SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " #pragma HLS PIPELINE val = in[i]; assert(old != val); hist[val] = hist[val] + 1; old = val;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " Figure 8.8: An alternative function for computing a histogram. By restricting the inputs and indicating this restriction to Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " HLS via the dependence directive, II=1 can be achieved without signiﬁcantly altering the code. In Figure 8.8, we added a precondition to the code, checked it using an assertion, and indicated the eﬀect of the precondition to the tool using the dependence directive. What happens if your testbench violates this precondition? What happens if you remove the assert() call? Does Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 150,
            "refined_text": " HLS still check the precondition? What happens if the precondition is not consistent with the dependence directive? Unfortunately, the dependence directive doesn’t really help us if we are unwilling to accept the additional precondition. It’s also clear that we can’t directly apply same optimization as with the preﬁxsum function, since we might need to use all of the values stored in the hist array. Another alternative is implement the hist array with a diﬀerent technology, for instance we could partition the hist array completely resulting in the array being implemented with ﬂip-ﬂop (FF) resources. Since the data written into a FF on one clock cycle is available immediately on the next clock cycle, this solves the recurrence problem and can be a good solution when a small number of bins are involved. The architecture resulting from such a design is shown in Figure 8.9. However, it tends to be a poor solution when a large number of bins are required. Commonly histograms are constructed with hundreds to thousands of bins and for large data sets can require many bits of precision to count all of the inputs. This results in a large number of FF resources and a large mux, which also requires logic resources. Storing large histograms in block RAM (BRAM) is usually a much better solution. Returning to the code in Figure 8.6, we see that there are really two separate cases that the architecture must be able to handle. One case is when the input contains consecutive values in the same bin. In this case, we’d like to use a simple register to perform the accumulation with a minimal amount of delay. The second case is when the input does not contain consecutive values in the 150"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": " Figure 8.9: An architecture resulting from the code in Figure 8.6 when the hist array is completely partitioned. same bin, in which case we need to read, modify, and write back the result to the memory. In this case, we can guarantee that the read operation of the hist array can not be aﬀected by the previous write operation. We’ve seen that both of these cases can be implemented separately, perhaps we can combine them into a single design. The code to accomplish this is shown in Figure 8.10. This code uses a local variable old to store the bin from the previous iteration and another local variable accu to store the count for that bin. Each time through the loop we check to see if we are looking at the same bin as the previous iteration. If so, then we can simply increment accu . If not, then we need to store the value in accu in the hist array and increment the correct value in the hist array instead. In either case, we update old and accu to contain the current correct values. The architecture corresponding to this code is shown in Figure 8.11. In this code, we still need a dependence directive, just as in Figure 8.8, however the form is slightly diﬀerent. In this case the read and write accesses are to two diﬀerent addresses in the same loop iteration. Both of these addresses are dependent on the input data and so could point to any individual element of the hist array. Because of this, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": " HLS assumes that both of these accesses could access the same location and as a result schedules the read and write operations to the array in alternating cycles, resulting in a loop II of 2. However, looking at the code we can readily see that hist[old] and hist[val] can never access the same location because they are in the else branch of the conditional if (old == val) . Within one iteration (an intra -dependence) a read operation after a write operation ( RAW ) can never occur and hence is a false dependence. In this case we are not using the dependence directive to inform the tool about a precondition of the function, but instead about a property of the code itself. Synthesize the code from Figure 8.6 and Figure 8.10. What is the initiation interval (II) in each case? What happens when you remove the dependence directive from the code in Figure 8.10? How does the loop interval change in both cases? What about the resource usage? For the code in Figure 8.10, you might question why a tool like Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 151,
            "refined_text": " HLS cannot determine this property. In fact, while in some simple cases like this one better code analysis 151"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " #include ”histogram.h” void histogram( int in[INPUT SIZE], int hist[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " int acc = 0; int i, val; int old = in[0]; #pragma HLS DEPENDENCE variable=hist intra RAW false for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " INPUT SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " #pragma HLS PIPELINE II=1 val = in[i]; if (old == val)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " acc = acc + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " hist[old] = acc; acc = hist[val] + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " old = val;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": " hist[old] = acc;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 152,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 153,
            "refined_text": " Figure 8.11: A depiction of the datapath corresponding to the code in Figure 8.10. There are two separate portions corresponding to the if and else clauses. The ﬁgure shows the important portions of the computation, and leaves out some minor details. hist array each clock cycle, occupying both ports of a BRAM resource in the FPGA. Previously we have considered array partitioning to increase the number of memory ports for accessing an array, but there’s not a particularly obvious way to partition the hist array since the access order depends on the input data. All is not lost, however, as there is a way we can expose more parallelism by decomposing the histogram computation into two stages. In the ﬁrst stage, we divide the input data into a number of separate partitions. The histogram for each partition can be computed independently using a separate instance, often called a Processing Element (PE), of the histogram solution we’ve developed previously. In the second stage, the individual histograms are combined to generate the histogram of the complete data sets. This partitioning (or mapping) and merging (or reducing) process is very similar to that adopted by the MapReduce framework [20] and is a common pattern for parallel computation. The map-reduce pattern is applicable whenever there is recurrence which includes a commutative and associative operation, such as addition in this case. This idea is shown in Figure 8.12. The code for implementing this architecture is shown in Figure 8.13. The histogram map func- tion implements the ‘map’ portion of the map-reduce pattern and will be instantiated multiple times. The code is very similar to the code in Figure 8.10. The main diﬀerence is that we have added the additional code to initialize the hist array. The histogram map function takes an input array in which will contain a partition of the data being processed and computes the histogram of that partition in the hist array. The histogram reduce function implements the ‘reduce’ portion of the pattern. It takes as input a number of partial histograms and combines them into complete histogram by adding together the count for each histogram bin. In our code example in Figure 8.13, we have only two processing elements, thus the merge has two input arrays hist1 and hist2 . This can easily be extended to handle more processing elements. 153"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " + in[] val hist[] = old acc 1 acc + 1 T F old new"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " Figure 8.12: The histogram computation implemented using a map-reduce pattern. The processing element (PE) in Part a) is the same architecture as shown in Figure 8.11. The in array is parti- tioned and each partition is processed by a separate PE. The merge block combines the individual histograms to create the ﬁnal histogram. The new histogram function takes as an input two partitions of the input data, stored in the inputA and inputB arrays. It computes the histogram of each partition using the histogram map function, which are then stored in the hist1 and hist2 arrays. These are feed into the histogram reduce function which combines them and stores the result in the hist array, which is the ﬁnal output of the top level function histogram . Modify the code in Figure 8.13 to support a parameterizable number NUM PE of PEs? Hint: You’ll need to combine some of the arrays into a single array that is correctly partitioned and add some loops that depend on NUM PE . What happens to the throughput and task interval as you vary the number of PEs? We use the dataﬂow directive in the histogram function in order to enable a design with task pipelining. In this case there are three processes: two instances of the partial histogram function and one instance of the histogram reduce function. Within a single task, the two partial histogram processes can execute concurrently since they work on independent data, while the histogram reduce function must execute after since it uses the results from the partial histogram processes. Thus, the dataﬂow directive essentially creates a two stage task pipeline with the partial histogram functions in the ﬁrst stage and the histogram reduce function in the second stage. As with any dataﬂow design, the interval of the entire histogram function depends upon the maximum initiation in- terval of the two stages. The two partial histogram functions in the ﬁrst stage are the same and will have the same interval ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " histogram map ). The histogram reduce function will have an- other interval ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " histogram reduce ). The interval of the toplevel histogram function"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " histogram is then max("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " histogram map"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 154,
            "refined_text": " histogram reduce ). 154"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #include ”histogram parallel.h” void histogram map( int in[INPUT SIZE/2], int hist[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #pragma HLS DEPENDENCE variable=hist intra RAW false for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " VALUE SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #pragma HLS PIPELINE II=1 hist[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " int old = in[0]; int acc = 0; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " INPUT SIZE/2; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #pragma HLS PIPELINE II=1 int val = in[i]; if (old == val)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " acc = acc + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " hist[old] = acc; acc = hist[val] + 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " old = val;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " hist[old] = acc;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " void histogram reduce( int hist1[VALUE SIZE], int hist2[VALUE SIZE], int output[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " VALUE SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #pragma HLS PIPELINE II=1 output[i] = hist1[i] + hist2[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " void histogram( int inputA[INPUT SIZE/2], int inputB[INPUT SIZE/2], int hist[VALUE SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " #pragma HLS DATAFLOW int hist1[VALUE SIZE]; int hist2[VALUE SIZE]; histogram map(inputA, hist1); histogram map(inputB, hist2); histogram reduce(hist1, hist2, hist);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 155,
            "refined_text": " Figure 8.13: Another implementation of histogram that uses task level parallelism and pipelining. The histogram operation is split into two sub tasks, which are executed in the two histogram map functions. These results are combined in the ﬁnal histogram result using the histogram reduce function. The histogram function is the top level function that connects these three functions together. 155"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "refined_text": " What happens when you add or change the locations of the pipeline directives? For exam- ple, is it beneﬁcial to add a pipeline directive to the for loop in the histogram reduce function? What is the result of moving the pipeline directive into the histogram map function, i.e., hoisting it outside of the for loop where it currently resides? The goal of this section was to walk through the optimization the histogram computation, another small but important kernel of many applications. The key takeaway is that there are often limits to what tools can understand about our programs. In some cases we must take care in how we write the code and in other cases we must actually give the tool more information about the code or the environment that the code is executing in. In particular, properties about memory access patterns often critically aﬀect the ability of HLS to generate correct and eﬃcient hardware. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "refined_text": " HLS, these properties can be expressed using the dependence directive. Sometimes these optimizations might even be counter-intuitive, such as the addition of the if / else control structure in 8.10. In other cases optimizations might require some creativity, as in applying the map-reduce pattern in Figures 8.12 and 8.13)."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "refined_text": " In this section, we’ve looked at the preﬁx sum and histogram kernels. Although these functions seem diﬀerent, they both contain recurrences through a memory access. These recurrences can limit throughput if the memory access is not pipelined. In both cases, by rewriting the code we can remove the recurrence. In the case of the preﬁx sum, this is much easier since the access patterns are deterministic. In the case of the histogram we must rewrite the code to address the recurrence or ensure that recurrence never happens in practice. In either case we needed a way to describe to Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 156,
            "refined_text": " HLS information about the environment or about the code itself that the tool was unable to determine for itself. This information is captured in the dependence directive. Lastly, we looked at ways of parallelizing both algorithms yet further, so that they could process a number of data samples each clock cycle. 156"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " Video Processing is a common application for FPGAs. One reason is that common video data rates match well the clock frequencies that can achieved with modern FPGAs. For instance, the common High-Deﬁnition TV format known as FullHD or 1080P60 video requires 1920 pixels line"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " 1080 lines frame"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " 60 frames second = 124"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " 416"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " 000 pixels second . When encoded in a digital video stream, these pixels are transmitted along with some blank pixels at 148.5 MHz, and can be processed in a pipelined FPGA circuit at that frequency. Higher data rates can also be achieved by processing multiple samples per clock cycle. Details on how digital video is transmitted will come in Section 9.1.2. Another reason is that video is mostly processed in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 157,
            "refined_text": " line-by-line from the top left pixel to the lower right pixel, as shown in Figure 9.1. This predictable order allows highly specialized memory architectures to be constructed in FPGA circuits to eﬃciently process video without excess storage. Details on these architectures will come in Section 9.2.1 Video processing is also a good target application for HLS. Firstly, video processing is typically tolerant to processing latency. Many applications can tolerate several frames of processing delay, although some applications may limit the overall delay to less than one frame. As a result, highly pipelined implementations can be generated from throughput and clock constraints in HLS with little concern for processing latency. Secondly, video algorithms are often highly non-standardized and developed based on the personal taste or intuition of an algorithm expert. This leads them (0, 0) (0, width-1) (height-1, 0) (height-1, width-1) Figure 9.1: Scanline processing order for video frames. 157"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "refined_text": " to be developed in a high-level language where they can be quickly developed and simulated on sequences of interest. It is not uncommon for FullHD video processing algorithms to run at 60 frames per second in an FPGA system, one frame per second in synthesizable C/C++ code running on a development laptop, but only one frame per hour (or slower) in an RTL simulator. Lastly, video processing algorithms are often easily expressed in a nested-loop programming style that is amenable to HLS. This means that many video algorithms can be synthesized into an FPGA circuit directly from the C/C++ code that an algorithm developer would write for prototyping purposes anyway 9.1.1 Representing Video Pixels Many video input and output systems are optimized around the way that the human vision system perceives light. One aspect of this is that the cones in the eye, which sense color, are sensitive primarily to red, green, and blue light. Other colors are perceived as combinations of red, green, and blue light. As a result, video cameras and displays mimic the capabilities of the human vision system and are primarily sensitive or capable of displaying red, green, and blue light and pixels are often represented in the RGB colorspace as a combination of red, green, and blue components. Most commonly each component is represented with 8 bits for a total of 24 bits per pixel, although other combinations are possible, such as 10 or even 12 bits per pixel in high-end systems. A second aspect is that the human visual system interprets brightness with somewhat higher resolution than color. Hence, within a video processing system it is common to convert from the RGB colorspace to the YUV colorspace, which describes pixels as a combination of Luminance (Y) and Chrominance (U and V). This allows the color information contained in the U and V components to be represented independently of the brightness information in the Y component. One common video format, known as YUV422, represents two horizontally adjacent pixels with two Y values, one U value and one V value. This format essentially includes a simple form of video compression called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "refined_text": " . Another common video format, YUV420, represents four pixels in a square with 4 Y values, one U value and one V value, further reducing the amount of data required. Video compression is commonly performed on data in the YUV colorspace. A third aspect is that the rods and codes in eye are more sensitive to green light than red or blue light and that the brain primarily interprets brightness primarily from green light. As a result, solid-state sensors and displays commonly use a mosaic pattern, such as the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "refined_text": " pattern[7] which consists of 2 green pixels for every red or blue pixel. The end result is that higher resolution images can be produced for the same number of pixel elements, reducing the manufacturing cost of sensors and displays. Video systems have been engineered around the human visual system for many years. The earliest black and white video cameras were primarily sensitive to blue-green light to match the eye’s sensitivity to brightness in that color range. However, they were unfortunately not very sensitive to red light, as a result red colors (such as in makeup) didn’t look right on camera. The solution was decidedly low-tech: actors wore garish green and blue makeup. 9.1.2 Digital Video Formats In addition to representing individual pixels, digital video formats must also encode the organization of pixels into video frames. In many cases, this is done with synchronization or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 158,
            "refined_text": " signals that indicate the start and stop of the video frame in an otherwise continuous sequence of pixels. In some 158"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " 147 1920 44 89 1080 37 3 5 Figure 9.2: Typical synchronization signals in a 1080P60 high deﬁnition video signal. standards (such as the Digital Video Interface or"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " ) sync signals are represented as physically separate wires. In other standards (such as the Digital Television Standard BTIR 601/656) the start and stop of the sync signal is represented by special pixel values that don’t otherwise occur in the video signal. Each line of video (scanned from left to right) is separated by a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " . The horizontal sync is active for a number of cycles between each video line. In addition, there are a small number of pixels around the pulse where the horizontal sync is not active, but there are not active video pixels. These regions before and after the horizontal sync pulse are called the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " , respectively. Similarly, each frame of video (scanned from top to bottom) is separated by a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " . The vertical sync is active for a number of lines between each video frame. Note that the vertical sync signal only changes at the start of the horizontal sync signal. There are also usually corresponding"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " areas consisting of video lines where the vertical sync is not active, but there are not active video pixels either. In addition, most digital video formats include a Data Enable signal that indicates the active video pixels. Together, all of the video pixels that aren’t active are called the"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " and"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " . These signals are shown graphically in Figure 9.2. The format of digital video signals is, in many ways, an artifact of the original analog television standards, such as NTSC in the United States and PAL in many European countries. Since the hardware for analog scanning of Cathode Ray Tubes contained circuits with limited slew rates, the horizontal and vertical sync intervals allowed time for the scan recover to the beginning of the next line. These sync signals were represented by a large negative value in the video signal. In addition, since televisions were not able to eﬀectively display pixels close to the strong sync signal, the front porches and the back porches were introduced to increase the amount of the picture that could be shown. Even then, many televisions were designed with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " , where up to 20% of the pixels at the edge the frame were not visible. The typical 1080P60 video frame shown in Figure 9.2 contains a total of 2200"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 159,
            "refined_text": " 1125 data 159"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " #include ”video common.h” unsigned char rescale( unsigned char val, unsigned char oﬀset, unsigned char scale)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " return ((val"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " oﬀset)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " scale)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " 4;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " rgb pixel rescale pixel(rgb pixel p, unsigned char oﬀset, unsigned char scale)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " #pragma HLS pipeline p.R = rescale(p.R, oﬀset, scale); p.G = rescale(p.G, oﬀset, scale); p.B = rescale(p.B, oﬀset, scale); return p;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " void video ﬁlter rescale(rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH], unsigned char min, unsigned char max)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " #pragma HLS interface ap hs port = pixel out #pragma HLS interface ap hs port = pixel in row loop: for ( int row = 0; row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " MAX WIDTH; row++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " col loop: for ( int col = 0; col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " MAX HEIGHT; col++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " #pragma HLS pipeline rgb pixel p = pixel in[row][col]; p = rescale pixel(p,min,max); pixel out[row][col] = p;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " Figure 9.3: Code implementing a simple video ﬁlter. samples. At 60 frames per second, this corresponds to an overall sample rate of 148.5 Million samples per second. This is quite a bit higher than the average rate of active video pixels in a frame, 1920"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " 1080"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " 60 = 124"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 160,
            "refined_text": " 4 Million pixels per second. Most modern FPGAs can comfortably process at this clock rate, often leading to 1 sample-per-clock cycle architectures. Systems that use higher resolutions, such as 4K by 2K for digital cinema, or higher frame rates, such as 120 or even 240 frames per second often require more the one sample to be processed per clock cycle. Remember that such architectures can often be generated by unrolling loops in HLS (see Section 1.4.2). Similarly, when processing lower resolutions or frame rates, processing each sample over multiple clocks may be preferable, enabling operator sharing. Such architectures can often be generated by increasing the II of loops. For instance, the code shown in Figure 9.3 illustrates a simple video processing application that processes one sample per clock cycle with the loop implemented at II=1. The code is written with a nested loop over the pixels in the image, following the scanline order shown in 9.1. An II=3 160"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "refined_text": " Accelerator 1 BRAM"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "refined_text": " address data BRAM address data WE address data WE data address void video ﬁlter(rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "refined_text": " #pragma HLS interface ap memory port = pixel out // The default #pragma HLS interface ap memory port = pixel in // The default Figure 9.4: Integration of a video design with BRAM interfaces. design could share the rescale function computed for each component, enabling reduced area usage. Unrolling the inner loop by a factor of 2 and partitioning the input and the output arrays by an appropriate factor of 2 could enable processing 2 pixels every clock cycle in an II=1 design. This case is relatively straightforward, since the processing of each component and of individual pixels is independent. More complicated functions might not beneﬁt from resource sharing, or might not be able to process more than one pixel simultaneously. A high-speed computer vision application processes small video frames of 200 * 180 pixels at 10000 frames per second. This application uses a high speed sensor interfaced directly to the FPGA and requires no sync signals. How many samples per clock cycle would you attempt to process? Is this a good FPGA application? Write the nested loop structure to implement this structure using HLS. 9.1.3 Video Processing System Architectures Up to this point, we have focused on building video processing applications without concern for how they are integrated into a system. In many cases, such as the example code in Figure 9.12, the bulk of the processing occurs within a loop over the pixels and can process one pixel per clock when the loop is active. In this section we will discuss some possibilities for system integration. By default, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 161,
            "refined_text": " HLS generates a simple memory interface for interface arrays. This inter- face consists of address and data signals and a write enable signal in the case of a write interface. Each read or write of data is associated with a new address and the expected latency through the memory is ﬁxed. It is simple to integrate such an interface with on-chip memories created from Block RAM resources as shown in Figure 9.4. However Block RAM resources are generally a poor choice for storing video data because of the large size of each frame, which would quickly exhaust the Block RAM resources even in large expensive devices. For 1920x1080 frames with 24 bits per pixel, how many Block RAM resources are required to store each video frame? How many frames can be stored in the Block RAM of the FPGA you have available? A better choice for most video systems is to store video frames in external memory, typically some form of double-data-rate (DDR) memory. Typical system integration with external memory 161"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " AXI Interconnect External Accelerator 1 Accelerator 2 Video Input Video Output Memory HDMI HDMI"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " void video ﬁlter(pixel t pixel in[MAX HEIGHT][MAX WIDTH], pixel t pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " #pragma HLS interface m axi port = pixel out #pragma HLS interface m axi port = pixel in Figure 9.5: Integration of a video design with external memory interfaces. is shown in Figure 9.5. An FPGA component known as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " implements the external DDR interface and provides a standardized interface to other FPGA components through a common interface, such as the ARM AXI4 slave interface [6]. FPGA components typically implement a complementary master interface which can be directly connected to the slave interface of the external memory controller or connected through specialized"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " HLS is capable of scheduling address transactions suﬃciently early to avoid stalling computation due to external memory latency and is capable of statically inferring burst accesses from consecutive memory accesses. An alternative external memory architecture is shown in Figure 9.6. In this architecture, an accelerator is connected to an external Direct Memory Access (DMA) component that performs the details of generating addresses to the memory controller. The DMA provides a stream of data to the accelerator for processing and consumes the data produced by the accelerator and writes it back to memory. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 162,
            "refined_text": " HLS, there are multiple coding styles that can generate a streaming 162"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " AXI Interconnect External Accelerator 1 Accelerator 2 Video Input Video Output Memory HDMI HDMI"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " DMA DMA void video ﬁlter(pixel t pixel in[MAX HEIGHT][MAX WIDTH], pixel t pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " #pragma HLS interface s axi port = pixel out #pragma HLS interface s axi port = pixel in Figure 9.6: Integration of a video design with external memory interfaces through a DMA compo- nent. void video ﬁlter(pixel t pixel in[MAX HEIGHT][MAX WIDTH], pixel t pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " #pragma HLS interface ap hs port = pixel out #pragma HLS interface ap hs port = pixel in void video ﬁlter(hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " pixel t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " &pixel in, hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " pixel t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " &pixel out)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 163,
            "refined_text": " Figure 9.7: Coding styles for modelling streaming interfaces in HLS. interface, as shown in Figure 9.7. One possibility is to model the streaming interfaces as arrays. In this case, the C code is very similar to the code seen previously, but diﬀerent interface directives are used. An alternative is to model the streaming interface explicitly, using the hls::stream<> class. In either case, some care must be taken that the order of data generated by the DMA engine is the same as the order in which the data is accessed in the C code. One advantage of streaming interfaces is that they allow multiple accelerators to be composed in a design without the need to store intermediate values in external memory. In some cases, FPGA systems can be built without external memory at all, by processing pixels as they are received on an input interface (such as HDMI) and sending them directly to an output interface, as shown in Figure 9.8. Such designs typically have accelerator throughput requirements that must achieved in order to meet the strict real-time constraints at the external interfaces. Having at least one frame buﬀer in the system provides more ﬂexibility to build complex algorithms that may be hard to construct with guaranteed throughput. A frame buﬀer can also simplify building systems where the input and output pixel rates are diﬀerent or potentially unrelated (such as a system that receives 163"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " Accelerator 1 Accelerator 2 Video Input Video Output HDMI HDMI"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " void video ﬁlter(pixel t pixel in[MAX HEIGHT][MAX WIDTH], pixel t pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " #pragma HLS interface ap hs port = pixel out #pragma HLS interface ap hs port = pixel in Figure 9.8: Integration of a video design with streaming interfaces. an arbitrary input video format and outputs an diﬀerent arbitrary format)."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " . Conceptually, the window scans across the input image, selecting a region of pixels that can be used to compute the corresponding output pixel. For instance, Figure 9.9 shows code that implements a 2-dimensional ﬁlter on a video frame. This code reads a window of data from the input video frame (stored in an array) before computing each output pixel. In Figure 9.9, there is the code int wi = row+i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " 1; int wj = col+j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " 1; . Explain why these expressions include a ’-1’. Hint: Would the number change if the ﬁlter were 7x7 instead of 3x3? Note that in this code, multiple reads of pixel in must occur to populate the window memory and compute one output pixel. If only one read can be performed per cycle, then this code is limited in the pixel rate that it can support. Essentially this is a 2-Dimensional version of the one-tap-per-cycle ﬁlter from Figure 1.8. In addition, the interfacing options are limited, because the input is not read in normal scan-line order. (This topic will be dealt with in more detail in Section 9.1.3. A key observation about adjacent windows is that they often overlap, implying a high locality of reference. This means that pixels from the input image can be buﬀered locally or cached and accessed multiple times. By refactoring the code to read each input pixel exactly once and store the result in a local memory, a better result can be achieved. In video systems, the local buﬀer is also called a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 164,
            "refined_text": " , since it typically stores several lines of video around the window. Line buﬀers 164"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " rgb pixel ﬁlter(rgb pixel window[3][3])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " const char h[3][3] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1, 2, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 2, 4, 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " ,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1, 2, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " ; int r = 0, b = 0, g = 0; i loop: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " j loop: for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 3; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " r += window[i][j].R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " h[i][j]; g += window[i][j].G"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " h[i][j]; b += window[i][j].B"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " h[i][j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " rgb pixel output; output.R = r / 16; output.G = g / 16; output.B = b / 16; return output;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " void video 2dﬁlter(rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " rgb pixel window[3][3]; row loop: for ( int row = 0; row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " MAX HEIGHT; row++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " col loop: for ( int col = 0; col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " MAX WIDTH; col++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " #pragma HLS pipeline for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 3; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " int wi = row + i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1; int wj = col + j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1; if (wi"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " wi"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " = MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " wj"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " wj"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " = MAX WIDTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " window[i][j].R = 0; window[i][j].G = 0; window[i][j].B = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " else window[i][j] = pixel in[wi][wj];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " if (row == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " col == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " row == (MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " col == (MAX WIDTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " 1))"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " pixel out[row][col].R = 0; pixel out[row][col].G = 0; pixel out[row][col].B = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " else pixel out[row][col] = ﬁlter(window);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 165,
            "refined_text": " Figure 9.9: Code implementing a 2D ﬁlter without an explicit line buﬀer. 165"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " are typically implemented in block RAM (BRAM) resources, while window buﬀers are implemented using ﬂip-ﬂop (FF) resources. Refactored code using a line buﬀer is shown in Figure 9.10. Note that for an NxN image ﬁlter, only N-1 lines need to be stored in line buﬀers. The line buﬀer and window buﬀer memories implemented from the code in Figure 9.10 are shown in Figure 9.11. Each time through the loop, the window is shifted and ﬁlled with one pixel coming from the input and two pixels coming from the line buﬀer. Additionally, the input pixel is shifted into the line buﬀer in preparation to repeat the process on the next line. Note that in order to process one pixel each clock cycle, most elements of the window buﬀer must be read from and written to every clock cycle. In addition, after the ’i’ loop is unrolled, each array index to the window array is a constant. In this case, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " HLS will convert each element of the array into a scalar variable (a process called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ). Most of the elements of the window array will be subsequently implemented as Flip Flops. Similarly, each row of the line buﬀer is accessed twice (being read once and written once). The code explicitly directs each row of the line buﬀer array to be partitioned into a separate memory. For most interesting values of MAX WIDTH the resulting memories will be implemented as one or more Block RAMs. Note that each Block RAM can support two independent accesses per clock cycle. Line buﬀers are a special case of a more general concept known as a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " , which is often used in stencil-style computations. High-level synthesis of reuse buﬀers and line buﬀers from code like Figure 9.9 is an area of active research. See, for instance [8][31]. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " HLS includes hls::line buﬀer"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " and hls::window buﬀer"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " classes that simplify the management of window buﬀers and line buﬀers. For a 3x3 image ﬁlter, operating on 1920x1080 images with 4 bytes per pixel, How many FPGA Block RAMs are necessary to store each video line? 9.2.2 Causal Filters The ﬁlter implemented in Figure 9.10 reads a single input pixel and produces a single output pixel each clock cycle, however the behavior is not quite the same as the code in Figure 9.9. The output is computed from the window of previously read pixels, which is ’up and to the left’ of the pixel being produced. As a result, the output image is shifted ’down and to the right’ relative to the input image. The situation is analogous to the concept of causal and non-causal ﬁlters in signal processing. Most signal processing theory focuses on causal ﬁlters because only causal ﬁlters are practical for time sampled signals (e.g. where x[n] = x(n*T) and y[n] = y(n*T)). A"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ﬁlter"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] is a ﬁlter where"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] = 0. A ﬁnite ﬁlter"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] which is not causal can be converted to a causal ﬁlter ˆ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] by delaying the taps of the ﬁlter so that ˆ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ]. The output of the new ﬁlter ˆ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ˆ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " is the same as a delayed output of the old ﬁlter"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " . Speciﬁcally, ˆ"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 166,
            "refined_text": " ]. 166"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " void video 2dﬁlter linebuﬀer(rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " #pragma HLS interface ap hs port=pixel out #pragma HLS interface ap hs port=pixel in rgb pixel window[3][3]; rgb pixel line buﬀer[2][MAX WIDTH]; #pragma HLS array partition variable=line buﬀer complete dim=1 row loop: for ( int row = 0; row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " MAX HEIGHT; row++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " col loop: for ( int col = 0; col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " MAX WIDTH; col++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " #pragma HLS pipeline for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " window[i][0] = window[i][1]; window[i][1] = window[i][2];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " window[0][2] = (line buﬀer[0][col]); window[1][2] = (line buﬀer[0][col] = line buﬀer[1][col]); window[2][2] = (line buﬀer[1][col] = pixel in[row][col]); if (row == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " col == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " row == (MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " col == (MAX WIDTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " 1))"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " pixel out[row][col].R = 0; pixel out[row][col].G = 0; pixel out[row][col].B = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " pixel out[row][col] = ﬁlter(window);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 167,
            "refined_text": " Figure 9.10: Code implementing a 2D ﬁlter with an explicit line buﬀer. 167"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " width-1 0 col pixel in[row][col] 1 0 1 col-1 col+1 line buﬀer 0 1 0 1 2 2 window col row Figure 9.11: Memories implemented by the code in Figure 9.10. These memories store a portion of the input image shown in the diagram on the right at the end of a particular iteration of the loop. The pixels outlined in black are stored in the line buﬀer and the pixels outlined in red are stored in the window buﬀer. Prove the fact in the previous aside using the deﬁnition of the convolution for"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " : y[n] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " �"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ["
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " ] For the purposes of this book, most variables aren’t time-sampled signals and the times that individual inputs and outputs are created may be determined during the synthesis process. For systems involving time-sampled signals, we treat timing constraints as a constraint during the HLS implementation process. As long as the required task latency is achieved, then the design is correct. In most video processing algorithms, the spatial shift introduced in the code above is undesirable and needs to be eliminated. Although there are many ways to write code that solves this problem, a common way is known as"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 168,
            "refined_text": " . In this technique, the loop bounds are increased by a small amount so that the ﬁrst input pixel is read on the ﬁrst loop iteration, but the ﬁrst output pixel is not written until later in the iteration space. A modiﬁed version of the ﬁlter code is shown in Figure 9.12. The behavior of this code is shown in Figure 9.14, relative to the original linebuﬀer code in Figure 9.10. After implementation with HLS, we see that the data dependencies are satisﬁed in exactly the same way and that the implemented circuit is, in fact, implementable. 9.2.3 Boundary Conditions In most cases, the processing window contains a region of the input image. However, near the boundary of the input image, the ﬁlter may extend beyond the boundary of the input image. Depending on the requirements of diﬀerent applications, there are many diﬀerent ways of accounting for the behavior of the ﬁlter near the boundary. Perhaps the simplest way to account for the boundary condition is to compute a smaller output image that avoids requiring the values of input pixels outside of the input image. However, in applications where the output image size is ﬁxed, such as Digital Television, this approach is generally unacceptable. In addition, if a sequence of 168"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " void video 2dﬁlter linebuﬀer extended( rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " #pragma HLS interface ap hs port=pixel out #pragma HLS interface ap hs port=pixel in rgb pixel window[3][3]; rgb pixel line buﬀer[2][MAX WIDTH]; #pragma HLS array partition variable=line buﬀer complete dim=1 row loop: for ( int row = 0; row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " MAX HEIGHT+1; row++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " col loop: for ( int col = 0; col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " MAX WIDTH+1; col++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " #pragma HLS pipeline II=1 rgb pixel pixel; if (row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " MAX HEIGHT && col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " MAX WIDTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " pixel = pixel in[row][col];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " window[i][0] = window[i][1]; window[i][1] = window[i][2];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " if (col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " MAX WIDTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " window[0][2] = (line buﬀer[0][col]); window[1][2] = (line buﬀer[0][col] = line buﬀer[1][col]); window[2][2] = (line buﬀer[1][col] = pixel);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " if (row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " = 1 && col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " = 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " int outrow = row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " 1; int outcol = col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " 1; if (outrow == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " outcol == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " outrow == (MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " outcol == (MAX WIDTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " 1))"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " pixel out[outrow][outcol].R = 0; pixel out[outrow][outcol].G = 0; pixel out[outrow][outcol].B = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " pixel out[outrow][outcol] = ﬁlter(window);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 169,
            "refined_text": " Figure 9.12: Code implementing a 2D ﬁlter with an explicit line buﬀer. The iteration space is extended by 1 to allow the ﬁlter to be implemented without a spatial shift. 169"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 170,
            "refined_text": " a) Original input b) Reference output c) Shifted output d) Corrected output Figure 9.13: Results of diﬀerent ﬁlter implementations. The reference output in image b is produced by the code in Figure 9.9. The shifted output in image c is produced by the code in Figure 9.10. The output in image d is produced by the code in Figure 9.12 and is identical to image b. In Out In Out Figure 9.14: Timeline of execution of code implemented with line buﬀers. The top timeline shows the behavior of the code in Figure 9.10. The bottom timeline shows the behavior of the code in Figure 9.12. The pixel marked in red is output on the same cycle in both implementations. In the ﬁrst case it is interpreted to be the second pixel of the second line and in the second case, it is interpreted as the ﬁrst pixel of the ﬁrst line. 170"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": " a) Original input b) Zero extension c) Constant extension d) Reﬂect extension Figure 9.15: Examples of the eﬀect of diﬀerent kinds of boundary conditions. ﬁlters is required, dealing with a large number images with slightly diﬀerent sizes can be somewhat cumbersome. The code in Figure 9.10 creates an output with the same size as the input by padding the smaller output image with a known value (in this case, the color black). Alternatively, the missing values can be synthesized, typically in one of several ways."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": " Missing input values can be ﬁlled with a constant"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": " Missing input values can be ﬁlled from the boundary pixel of the input image."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": " Missing input values can be reconstructed by reﬂecting pixels from the interior of the input image. Of course, more complicated and typically more computationally intensive schemes are also used. One way of writing code to handle boundary conditions is shown in Figure 9.16. This code computes an oﬀset address into the window buﬀer for each pixel in the window buﬀer. However, there is a signiﬁcant disadvantage in this code since each read from the window buﬀer is at a variable address. This variable read results in multiplexers before the ﬁlter is computed. For an N-by-N tap ﬁlter, there will be approximately N*N multiplexers with N inputs each. For simple ﬁlters, the cost of these multiplexers (and the logic required to compute the correct indexes) can dominate the cost of computing the ﬁlter. An alternative technique is to handle the boundary condition when data is written into the window buﬀer and to shift the window buﬀer in a regular pattern. In this case, there are only N multiplexers, instead of N*N, resulting in signiﬁcantly lower resource usage. Modify the code in Figure 9.16 to read from the window buﬀer using constant addresses. How many hardware resources did you save?"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 171,
            "refined_text": " Video processing is a common FPGA application and are highly amenable to HLS implementation. A key aspect of most video processing algorithms is a high degree of data-locality enabling either streaming implementations or applications with local buﬀering and a minimum amount of external memory access. 171"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " void video 2dﬁlter linebuﬀer extended constant( rgb pixel pixel in[MAX HEIGHT][MAX WIDTH], rgb pixel pixel out[MAX HEIGHT][MAX WIDTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " #pragma HLS interface ap hs port=pixel out #pragma HLS interface ap hs port=pixel in rgb pixel window[3][3]; rgb pixel line buﬀer[2][MAX WIDTH]; #pragma HLS array partition variable=line buﬀer complete dim=1 row loop: for ( int row = 0; row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " MAX HEIGHT+1; row++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " col loop: for ( int col = 0; col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " MAX WIDTH+1; col++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " #pragma HLS pipeline II=1 rgb pixel pixel; if (row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " MAX HEIGHT && col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " MAX WIDTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " pixel = pixel in[row][col];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " window[i][0] = window[i][1]; window[i][1] = window[i][2];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " if (col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " MAX WIDTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " window[0][2] = (line buﬀer[0][col]); window[1][2] = (line buﬀer[0][col] = line buﬀer[1][col]); window[2][2] = (line buﬀer[1][col] = pixel);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " if (row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " = 1 && col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " = 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " int outrow = row"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 1; int outcol = col"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 1; rgb pixel window2[3][3]; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 3; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 3; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " int wi, wj; if (i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outrow) wi = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outrow; else if (i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " = MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outrow + 1) wi = MAX HEIGHT"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outrow; else wi = i; if (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outcol) wj = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outcol; else if (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " = MAX WIDTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outcol + 1) wj = MAX WIDTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " outcol; else wj = j; window2[i][j] = window[wi][wj];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " pixel out[outrow][outcol] = ﬁlter(window2);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 172,
            "refined_text": " Figure 9.16: Code implementing a 2D ﬁlter with an explicit line buﬀer and constant extension to handle the boundary condition. Although correct, this code is relatively expensive to implement. 172"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " Sorting is a common algorithm in many systems. It is a core algorithm for many data structures because sorted data can be eﬃciently searched in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ) time using binary search. For example, given an sequence of elements:"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 17"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 74"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 76"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (10.1) We can ﬁnd whether a number exists in this set of data without comparing it against all 8 elements. Because the data is sorted we can start by picking an element in the middle of the array and checking to see whether our number is greater than or less than the element. For example, if we were looking to ﬁnd the element 45, we could start by comparing with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (4) = 31. Since 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 31 we can eliminate"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 4) from further comparison and only consider"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 7)."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 17"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 74"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 76"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (10.2) Next if we compare with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (6) = 74, we see that 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 74, so we can eliminate all but"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (5) from consideration."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 17"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 23"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 31"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 45"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 74"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " 76"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (10.3) One additional comparison with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " (5) allows us to determine that 45 is indeed contained in the sequence. In our example, the sequence"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " could represent a variety of diﬀerent concepts."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " could represent a mathematical set and searching for an element in the sequence could tell us whether a value exists in the set."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " could also represent only a portion of the data, often called a"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " , which is useful for indexing the rest of the information. For instance, the key could be a person’s name. After searching based on the key then we know the position where the rest of the data about the person, such as their birthdate, is stored. In yet other cases, the key could be something more abstract, such as a cryptographic hash of some data or a key. In this case, the order that the data is stored is likely to be randomized, but we can still ﬁnd it if we know the right cryptographic hash to search for. In each case, the fundamental operations of required for sorting and searching are pretty much the same, primarily we need to have the ability to compare two diﬀerent values. For the remainder of this chapter we will mostly ignore these diﬀerences. There are a wide variety of diﬀerent sorting techniques that have been studied in processor systems[36]. These diﬀerent algorithms vary in terms of their fundamental"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " () complexity, but many require"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " ) comparisons to sort"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 173,
            "refined_text": " elements. Conceptually, this is intuitive since we 173"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " could search for the right location to insert a new value in a sorted data set with"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " (log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " ) com- parisons using binary search. To insert"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " elements this process would need to be repeated"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " Stability: A sort is a stable if when two items in the input data have the same key, then they will appear in the same order on the output. For example, we might sort a set of records containing people’s names and ages using the ages as the sort key. In the input data, John appears before Jane, and both are 25 years old. A stable sort will ensure that John and Jane remain in the same order after sorting."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " Online: The algorithm allows for data to be sorted as it is received. This can be particularly valuable when data is not accessible when the sort starts or must be read in sequence from external storage."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " In-place: A list with n elements can be sorted using n memory elements. Some algorithms require additional storage during the sorting process."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " Adaptive: It is eﬃcient for data that is already relatively sorted. For example, if data is already sorted, then some algorithms might run faster, e.g. in linear"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " ) time."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " Insertion sort is one of the basic sorting algorithms. It works by iteratively placing the items of an array into sorted order and builds the sorted array one element at a time. Each iteration selects an unsorted element and places it in the appropriate order within the previously sorted elements. It then moves onto the next element. This continues until all of the elements are considered, and the entire array is sorted. To make this more formal, assume that we are given an input array A that should be put into sorted order. The base case is the ﬁrst element of that array A[0] , which by default is a sorted subarray (since it is only one element). The next step is to consider element A[1] , and place it into the sorted subarray such that the new subarray (with two elements) is also sorted. We continue this process for each element A[i] until we have iterated across all of the elements of A . At each step, we take the new element A[i] and insert it into the proper location such that the subarray A[0..i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 174,
            "refined_text": " 1] remains sorted. Figure 10.1 gives a step by step view of insertion sort operating on an array. The ﬁrst line is trivial. We consider only the ﬁrst value 3 which makes a subarray with one element. Any subarray with one element is in sorted order. The second line places the second value 2 into the sorted subarray. The end result is that the value 2 is placed into the ﬁrst element of the sorted subarray, which shifts the previous sorted element 3 to the right. The third line moves the third entry of the initial array into its appropriate place in the sorted subarray. In this case, since A[2] = 5 , it is already in its correct location. Thus, nothing needs to happen. The fourth line 174"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 3, 2, 5, 4, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 3, 2, 5, 4, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 2, 3, 5, 4, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 2, 3, 5, 4, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 2, 3, 4, 5, 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 1, 2, 3, 4, 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " Figure 10.1: The Insertion Sort algorithm operating on an array. The initial array is shown at the top. In each step of the algorithm, the underlined algorithm is considered and placed into sorted order of the elements to it’s left. At each stage, the shaded elements are in sorted order. #include ”insertion sort.h” void insertion sort(DTYPE A[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " L1: for ( int i = 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " DTYPE item = A[i]; int j = i; DTYPE t = A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 1]; L2: while (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 0 && A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " item && j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " #pragma HLS pipeline II=1 A[j] = A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 1]; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " A[j] = item;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " Figure 10.2: The complete code for insertion sort. The outer for loop iterates across the elements one at a time. The inner while loop moves the current element into sorted place. considers the value 4 . This is moved into its appropriate place, shifting 5 to the right. Finally, the ﬁfth line considers the placement of the value 1 . This is placed into the ﬁrst location of the array, and all of the previous sorted values are shifted by one location. Insertion sort is a stable, online, in-place, adaptive sorting algorithm. Because of these prop- erties, insertion sort is often preferred when sorting small arrays or as a base case in a recursive sorting algorithm. For example, more complex algorithms might decompose a large data set into a number of smaller arrays and then these small arrays will be sorted using insertion sort. The result is that formed by combining the sorted arrays. 10.2.1 Basic Insertion Sort Implementation Figure 10.2 shows basic C code for insertion sort. The outer loop, labeled L1 , iterates from elements A[1] to A[SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 175,
            "refined_text": " 1] where SIZE denotes the number of elements in the array A . We do not need to start at element A[0] since any one element is already in sorted order. Each iteration of the L1 loop starts by copying the current element that we wish to insert into the sorted subarray (i.e., A[i] ) into the item variable and then executes the inner L2 loop. The inner loop walks down the 175"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " sorted portion of A[] looking for the appropriate location to place the value index . The inner loop executes as long as it has not arrived at the end of the array (the condition j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 0 ) and the array elements are greater than the item being inserted (the condition A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " index ). As long as the loop condition is satisﬁed, elements of the sorted subarray are shifted by one element (the statement A[j] = A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 1]) . This will make room for the insertion of index when we eventually ﬁnd its correct location. When the loop exits, we have found the correct location for index and store it there. After the completion of iteration i , the elements from A[0] to A[i] are in sorted order. The code in Figure 10.2 is a straightforward implementation without any optimizations. We can optimize it using diﬀerent Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " HLS directives, such as pipeline , unroll , and array partition . The simplest optimization would be to pipeline the inner loop, by applying the pipeline directive to the body of the inner loop. In this case, even though the inner loop is accessing diﬀerent elements of A[] there are no data dependencies in these array accesses, so we could expect to achieve a loop II of 1. The resulting accelerator would perform roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 4 data comparisons[58] on average and have a latency of roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 176,
            "refined_text": " 4 cycles, since it performs one comparison per clock cycle. In actuality, an accelerator generated from Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " #include ”insertion sort.h” void insertion sort(DTYPE A[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " L1: for (i = 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " DTYPE item = A[i]; j = i; DTYPE t = A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " 1]; L2: while (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " 0 && t"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " item)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " #pragma HLS pipeline II=1 A[j] = t; t = A[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " 2]; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " A[j] = item;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " Figure 10.3: Refactored insertion sort for Option 1 in Table 10.1. the pipeline can execute. In this case, the code must read A[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " 1] in order to determine whether the loop should actually execute. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " HLS incorporates this read into the loop pipeline, but if the read of A is pipelined then the loop exit check cannot be made in the ﬁrst stage of the pipeline. This is an example of a recurrence which includes the HLS-generated control logic for the loop. If such recurrences exist, then Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " HLS will issue a message indicating that the loop exit condition cannot be scheduled in the ﬁrst II clock cycles. This situation can also occur a break or continue statement exists under a complex control condition. One solution is to explicitly speculate the read of A[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " 1] out of the loop. This enables the loop exit check to be scheduled with II=1 at the expense of an additional array access on the last iteration. This code is shown in Figure 10.3. Option 2 in the Table unrolls the inner loop by a factor of 2, attempting to perform two shift operations every clock cycle. This could potentially reduce the latency to compute insertion sort by a factor of two. Unfortunately, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " HLS cannot achieve a loop II of 1 for this code using array partitioning, because each array access cannot be assigned to a diﬀerent memory partition. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " HLS, the array partition directive results in implementing a number of com- pletely separate memories. For instance, array partition variable=A cyclic factor=4 would re- sult in generating four separate memories from array A[] , each of which contains a portion of the array contents. We can often think that this optimization provides four times the number of memory accesses each clock, but this is only the case if each memory access can be assigned to exactly one of the memory partitions. For example an array access A[i] for unknown i could reference data stored in any partition, while an array access A[4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " i+2] would only access data in the third partition. More complex logic, often called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 177,
            "refined_text": " , can resolve a number of independent accesses A[i] , A[i+1] , A[i+6] , A[i+7] and perform these accesses in the same clock cycle. Memory banking requires additional crossbar logic to route these simultaneous accesses in a circuit, since i can be arbitrary. At compile time, we can guarantee that the constant oﬀsets 177"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "refined_text": " of these accesses will hit in diﬀerent banks, but the actual banks cannot be determined until i is known. Yet more complex logic could implement stalling logic, enabling a set of unrelated accesses to complete in a single clock cycle if they hit in diﬀerent banks. If the accesses happen to all hit in the same bank, then the stalling logic can delay the progress of the circuit for a number of clocks until all of the accesses have completed. Lastly, multiport architectures have designed that can allow a number of accesses guaranteed completion every clock cycle[62, 1, 37] by replicating data across normal memories with one or two physical ports. Option 3 in the table also fails to achieve signiﬁcant improvement. Since the inner L2 loop does not have a statically computable loop bound Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 178,
            "refined_text": " HLS creates a separate copy of this variable for each separate possible assignment and each possible assignment results in multiplexer in the implemented circuit. 178"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " #include ”insertion sort parallel.h” #include ”assert.h” void insertion sort parallel(DTYPE A[SIZE], DTYPE B[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " #pragma HLS array partition variable=B complete L1: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " #pragma HLS pipeline II=1 DTYPE item = A[i]; L2: for ( int j = SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 1; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " DTYPE t; if (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " i)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " t = B[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " else if (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 0 && B[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " item)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " t = B[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " t = item; if (j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 0) item = B[j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " 1];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " B[j] = t;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 179,
            "refined_text": " Figure 10.4: Refactored insertion sort for Option 3 in Table 10.1. 179"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " The conversion of a single variable into multiple versions is a common internal transforma- tion used by compilers. The resulting internal representation is called static single assignment (SSA). To merge values coming from diﬀerent points in the code, the SSA internal represen- tation include artiﬁcial ‘phi-functions’ represented by the greek letter"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " . These phi-functions often result in multiplexers in the circuit generated by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " HLS and you’ll probably ﬁnd the related resources in the tool reports if you look carefully. The parallelized insertion sort in Figure 10.4 essentially results in a number of copies of the body of the inner loop. The contents of this inner loop consists of a few multiplexers, a comparator to determine the smallest of two elements, and a register to store an element of B[] . Incidentally, each stage might also include pipeline registers, if needed, to ensure that the resulting circuit runs at an eﬀective clock frequency. We’ll call the contents of the inner loop a sorting cell. The whole insertion sort function consists of a one-dimensional array of sorting cells, combined with a small amount of additional logic to feed data in the input and capture the output at the right time, in this case after SIZE elements have been processed by the outer loop. This array of sorting cells has an interesting property where each sorting cell only communicates with it’s neighboring sorting cells, rather than with all cells. Designs like this are called systolic arrays and are a common technique for parallelizing algorithms. In many cases, including sorting, systolic array implementations can naturally arise when we unroll inner loops, as long as the communication between diﬀerent loop iterations is limited. We call this type of design an implicit systolic array. 10.2.3 Explicit Systolic Array For Insertion Sort Systolic arrays have been well researched and many parallel algorithms are published as systolic arrays. In particular, the idea of using a linear array of sorting cells to implement insertion sort is well understood[55, 9, 45, 5]. However, rather than being described as an unrolled loop, systolic arrays are often described as components communicating by streams of data. This section describes an alternative coding style based on explicit streams and the dataﬂow directive that can be a more intuitive way to describe a systolic array. Figure 10.5 shows a systolic array implementing insertion sort. Each cell is identical and com- pares its input ( in ) with the value in current register local . The smaller value is passed to the output out , while the larger value is stored back in local . In other words, out = min(in,local) . The output of cell"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " is passed as input to the next cell"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " + 1 in the linear array. As a new input arrives it will be compared against elements stored in the array until it ﬁnds it’s correct place. If a new input is larger than all of the values in the array, then the sorted values will shift one cell to the right. If a new input is smaller than all of the values in the array, then it will propagate through the array, and eventually become stored in the furthest right cell. After all the data has moved through the array, the smallest data element will be sorted in cell"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 180,
            "refined_text": " 1 and can be read from the output. The code for one insertion cell is shown in Figure 10.6. The code uses a streaming interface by declaring the input and output variables as an hls::stream type. DTYPE is a type parameter enabling diﬀerent types to be operated on. The local variable stores one element of the array being sorted. It is static because we want to preserve its value across multiple function calls. This does create a problem since we must replicate this cell function N times. Using the same function (e.g., calling the same cell function N times) would cause a problem since each cell must have a separate static variable. One static variable cannot be shared across N functions. Linking the insertion cells together is straightforward. The function insertion cell sort in Figure 10.7 shows the code for sorting eight elements. Expanding this to a larger number of elements 180"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " Figure 10.5: The architecture of one insertion cell. Each cell holds exactly one value in the register local . On each execution it receives an input value in , compares that to its local value, and writes the smaller of the two to output . Sorting N values requires N cells. void cell0(hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " & in, hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " & out)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " static DTYPE local = 0; DTYPE in copy = in.read(); if (in copy"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " local)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " out.write(local); local = in copy;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " out.write(in copy);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " Figure 10.6: The Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 181,
            "refined_text": " HLS C code corresponding to one insertion cell cell0 . The other cells have the exact same code except with a diﬀerent function name ( cell1 , cell2 , etc.). The code performs the same functionality as shown in the architectural diagram in Figure 10.5. It uses the hls:stream interface for the input and output variables. hls::stream provides a convenient method to create FIFOs that work both for synthesis and simulation. 181"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " void insertion cell sort(hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " & in, hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " & out)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " #pragma HLS DATAFLOW hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out0(”out0 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out1(”out1 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out2(”out2 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out3(”out3 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out4(”out4 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out5(”out5 stream”); hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " out6(”out6 stream”);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " cell0(in, out0); cell1(out0, out1); cell2(out1, out2); cell3(out2, out3); cell4(out3, out4); cell5(out4, out5); cell6(out5, out6); cell7(out6, out);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 182,
            "refined_text": " Figure 10.7: Insertion cell sorting for eight elements. The function takes an input hls::stream and outputs the elements in sorted order one at a time through the variable out . The order starts with the smallest element ﬁrst, and then continues on to increasingly larger elements. simply requires replicating more cell functions, additional hls::stream variables, instantiating these functions, and connecting their input and output function arguments in the appropriate manner. The existing implementation of insertion cell sort outputs the data starting with the smallest element and continues outputting increasingly larger elements. What changes are required in order to reverse this order, i.e., to output the largest element ﬁrst, and then the decreasingly smaller outputs? The insertion cell sort function must be called multiple times in order to sort the entire data. Each call to insertion cell sort provides one data element to the array for sorting. The ﬁrst call places the input data in its appropriate place. Where would this data be placed? To answer that question, we should point out that we make an assumption on the input data since we are initializing the local variable to 0 . This is done in all of the cell functions. Initializing the static variable local to 0 makes an assumption on the type of data that will be provided for sorting. What is this assumption? In other words, what is the range of values for the input data that will be properly handled? What would happen if input data from outside of this range was given to the insertion cell sort function? Is there a better way to initialize the local variable? 182"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 183,
            "refined_text": " After making eight calls to the insertion cell sort function, all of the data will be put into the eight local variables in each of the cell functions. How many times must we call the insertion cell sort function in order to get the ﬁrst sorted element? How many calls are necessary in order to all of the sorted data? What if we in- creased the array to N cells? Can you generalize these two functions (number of times to call insertion cell sort to load N elements, and the number of calls required to output all N elements)? To achieve a task-pipelined architecture consisting of the eight cell functions, the code speciﬁes the dataﬂow directive. Each execution of the toplevel function processes a new input sample and inserts it into the sorted sequence. The actual insertion is pipelined, with one pipeline stage for each call to the cell function. With eight calls to the cell function, we can only sort sequences with eight values, but this can be extended almost arbitrarily since the code contains no recurrences between the cells. How many cycles are required to sort an entire array? We deﬁne the sorting to be com- pleted when all of the sorted data is output from the array of cell function inside of the insertion cell sort , i.e., all eight elements have been output from argument out in the function insertion cell sort ? How does the cycle count change if we remove the dataﬂow directive? How does change the resource utilization? Figure 10.8 shows the code for the testbench. The testbench generates random data to be sorted in input[] . This array is sorted by calling the insertion cell sort() function multiple times, with the result appearing in cell output[] . Next, the same data is sorted in place using the insertion sort function from Figure 10.2. Finally, the testbench compares the results of these two sort implemen- tations. The testbench passes if the sorted order from both implementations is the same. In the testbench, the SIZE constant is set to the number of elements being sorted. This would be 8 in the running example throughout this chapter. The DEBUG constant is used to provided output detailing the execution of the testbench. This should be set to a non-zero value if you wish to see the debugging data, and 0 if you want the output to be quiet. The input data is randomly generated using the rand() function and stored in the input[] array. You can change the data by modifying the argument in the call to srand() . The argument sets the seed for the random number generator to a speciﬁc value to ensure the generation of the same sequence of random numbers on each execution. Changing this value to a diﬀerent integer will result in a diﬀerent, but predictable, random sequence. Note again that the testbench calls the insertion cell sort() function a total of SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 183,
            "refined_text": " 2 times. Each of the ﬁrst SIZE function calls feeds a single input element into function, but produce no useful output. The next SIZE calls provide dummy input data and produce one sorted element each function call. The data is produced one at a time starting with the smallest element. After executing a sort, the code in Figure 10.6 leaves the local variable in a diﬀerent state than when it started. Unfortunately, this means that we can only sort one array! In most cases, we not only want to sort more than one array, but we’d like to process each array back 183"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " #include ”insertion cell sort.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " iostream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " stdlib.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " const static int DEBUG=1; const static int MAX NUMBER=1000; int main ()"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " int fail = 0; DTYPE input[SIZE]; DTYPE cell output[SIZE] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ; hls::stream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " DTYPE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " in, out;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (DEBUG) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”Random Input Data"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " n”; srand(20);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " input[i] = rand() % MAX NUMBER + 1; if (DEBUG) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " input[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " t”;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " 2; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " in.write(input[i]); insertion cell sort(in, out); cell output[i] = out.read();"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " in.write(MAX NUMBER); insertion cell sort(in, out); cell output[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE] = out.read();"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " insertion sort(input);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (DEBUG) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " nSorted Output"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " n”; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (DEBUG) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " cell output[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " t”;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (input[i] != cell output[i])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " fail = 1; std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”golden=”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " input[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”hw=”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " cell output[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " n”;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " if (fail == 0) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”PASS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " n”; else std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " ”FAIL"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " n”; return fail;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 184,
            "refined_text": " Figure 10.8: The testbench for the insertion cell sort function. 184"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " width = 1, A[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3,7,6,4,5,8,2,1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " width = 2, A[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 7,4, 6,5, 8,1, 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " width = 4, A[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 7, 6,1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " width = 8, A[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4, 5, 6, 7, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " Figure 10.9: The Merge Sort algorithm operating on an array. The initial state where each element is considered to be a sorted subarray of length one is shown at the top. At each step of the algorithm, subarrays are merged placing the shaded elements are in sorted order. in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4, 5"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4, 5, 6"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4, 5, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in1[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 3, 4, 6, 7"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " in2[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 5, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " out[] ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " 1, 2, 3, 4, 5, 6, 7, 8"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " Figure 10.10: The process of merging two sorted arrays. The initial state is shown at the top. In each step of the algorithm, the underlined elements are considered and one is placed into sorted order in the output array. to back with no bubbles in the pipeline. Modify the code and the testbench to enable this and demonstrate that your modiﬁed code can sort multiple arrays."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " Merge sort is a stable, divide and conquer algorithm invented by John von Neumann in 1945 [36]. The basic idea of the merge sort algorithm is that combining two sorted arrays into a larger sorted array is a relatively simple operation, which can be completed in"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 185,
            "refined_text": " ) time. Conceptually, we divide the array into two subarrays, sort each subarray, and then combine the sorted subarrays into the ﬁnal result. Since we focus on sorting arrays of data, it turns out that the ‘divide’ operation is actually trivial. It requires no arithmetic or data movement and we can simply consider each individual element of the input array as a trivially sorted subarray. All of the computation is involved with merging subarrays into larger sorted subarrays. With other data representations, such as a linked- list, dividing an input array into subarrays can require traversing the data structure. The merge sort process is shown in Figure 10.9. The process of combining two sorted arrays into one larger sorted array is sometimes called the “two ﬁnger algorithm”. Figure 10.10 describes the process using two sorted input arrays, named in1[] and in2[] . These are merged into a sorted output array, named out[] . The process starts with a “ﬁnger” pointing to the ﬁrst element of each array. This conceptual ﬁnger is just an index into the array storing the data. As the algorithm proceeds, the ﬁngers will point to diﬀerent elements of the arrays. We underline these elements in order to show where the 185"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "refined_text": " ﬁngers are placed. To begin with, the ﬁngers point to the ﬁrst element of each array, elements 3 and 1 in arrays in1[] and in2[] , respectively. The ﬁrst line of Figure 10.10 shows the initial state. There are four elements in each of the two input arrays and zero elements in the output array. We compare the ﬁrst two elements of the input arrays, and move the smaller of these two to the output array. In this case, we compare 3 and 1 , and move 1 into out[] . This reduces the number of elements in in2[] , and our “ﬁnger” moves to the next element in in2[] which is the next smallest element since the array is sorted. Once again, we compare the two elements from each of the input arrays, and move the smaller of the two elements to out[] . In this case, we compare 3 and 2 , and move the element from in2[] to out[] . This process continues until all of the elements in one of the arrays is empty. In that case, we copy the remaining elements from the non-empty array into the output array. Although the merge sort algorithm is a common textbook example of recursive function calls, most high-level synthesis tools do not support recursion or only support it in a limited manner. Thus, we will focus on a non-recursive implementation of the algorithm. The code might look substantially diﬀerent from what you are used to, but the core of the algorithm is exactly the same. 10.3.1 Basic Merge Sort Figure 10.11 shows basic code implementing a non-recursive merge sort. This code sorts an array by performing roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 186,
            "refined_text": " comparisons, but requires a temporary array to store the partially sorted data. The code starts by considering each element of the array as a length one sorted subarray. Each iteration of the outer loop merges pairs of sorted subarrays into larger sorted subarrays. After the ﬁrst iteration we have sorted subarrays with maximum size 2, after the second iteration the sorted subarrays have maximum size 4, then 8 and so on. Note that if the size of the input array is not a power of two, then it is possible that we might end up with some subarrays which are smaller than the maximum size. The sorting process starts in the merge sort() function. The function primarily operates on the input A[] array, but leverages internal storage in temp[] . The size of both of these arrays is determined by the SIZE parameter. The parameter DTYPE determines the type of data being sorted. The computation of the function consists of two nested for loops. The outer stage loop keeps track of the number of elements in each sorted subarray in the width variable. The function starts by considering each element as a separate subarray; hence width is initialized as 1 . Every iteration of the stage loop results in the generation of longer sorted subarrays. These new subarrays potentially have twice as many elements, which is why width doubles on each iteration of the stage loop. The stage loop terminates when width is greater than or equal to SIZE , indicating that all elements of A[] are in a single sorted subarray. Each iteration of the inner for loop, labeled merge arrays merges two consecutive subarrays. These subarrays each consist of up to width elements, starting at index i1 and i2 . These two subarrays are merged and copied into a single subarray stored in temp[] using the merge() function. The main complexity here is dealing with the boundary condition at the end of the loop if SIZE is not exactly a power of two. In this case the subarrays might contain less than width elements. After merging subarrays into temp[] , the ﬁnal loop copies the data back into A[] for the next iteration of the loop. The code in Figure 10.11 attempts to handle a wide variety of values for the parameter SIZE . What values are allowed? When the merge() function is called, whare are the possible 186"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " #include ”merge sort.h” #include ”assert.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " void merge(DTYPE in[SIZE], int i1, int i2, int i3, DTYPE out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " int f1 = i1, f2 = i2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " for ( int index = i1; index"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " i3; index++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " if ((f1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " i2 && in[f1]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " = in[f2])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " out[index] = in[f1]; f1++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " assert(f2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " i3); out[index] = in[f2]; f2++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " void merge sort(DTYPE A[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " DTYPE temp[SIZE];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " stage: for ( int width = 1; width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " SIZE; width = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " width)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " merge arrays: for ( int i1 = 0; i1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " SIZE; i1 = i1 + 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " width)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " int i2 = i1 + width; int i3 = i1 + 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " width; if (i2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " = SIZE) i2 = SIZE; if (i3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " = SIZE) i3 = SIZE; merge(A, i1, i2, i3, temp);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " copy: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " A[i] = temp[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 187,
            "refined_text": " Figure 10.11: A non-recursive implementation of merge sort. The merge sort() function iteratively merges subarrays until the entire array has been sorted. 187"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 189,
            "refined_text": " clock cycles? 189"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " #include ”merge sort.h” #include ”assert.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " void merge(DTYPE in[SIZE], int i1, int i2, int i3, DTYPE out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " int f1 = i1, f2 = i2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " for ( int index = i1; index"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " i3; index++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " #pragma HLS pipeline II=1 DTYPE t1 = in[f1]; DTYPE t2 = in[f2];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " if ((f1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " i2 && t1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " = t2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " out[index] = t1; f1++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " assert(f2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " i3); out[index] = t2; f2++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " Figure 10.12: Restructured code for the merge() function, which can achieve a loop II of 1 in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 190,
            "refined_text": " HLS. merge merge arrays merge arrays width = 2 merge copy width=1 copy merge merge merge merge Figure 10.13: Behavior of the restructured code in Figure 10.12. 190"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " #include ”merge sort.h” #include ”assert.h” void merge sort(DTYPE A[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " DTYPE temp[SIZE]; stage: for ( int width = 1; width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " SIZE; width = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " width)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " int f1 = 0; int f2 = width; int i2 = width; int i3 = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " width; if (i2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " = SIZE) i2 = SIZE; if (i3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " = SIZE) i3 = SIZE; merge arrays: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " #pragma HLS pipeline II=1 DTYPE t1 = A[f1]; DTYPE t2 = A[f2]; if ((f1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " i2 && t1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " = t2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " temp[i] = t1; f1++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " assert(f2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " i3); temp[i] = t2; f2++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " if (f1 == i2 && f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " f1 = i3; i2 += 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " width; i3 += 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " width; if (i2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " = SIZE) i2 = SIZE; if (i3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " = SIZE) i3 = SIZE; f2 = i2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " copy: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " #pragma HLS pipeline II=1 A[i] = temp[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " Figure 10.14: Restructured code for Merge Sort which can achieve a loop II of 1 with fewer pipeline bubbles in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 191,
            "refined_text": " HLS. 191"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " merge arrays temp[0] temp[1] A[] B[] temp[2] merge arrays merge arrays merge arrays Figure 10.15: Dataﬂow pipelined architecture for implementing 4 stages of Merge Sort. This architecture can sort up to 16 elements. So far we have focused on optimizing the merge sort() function to reduce the latency of the computation without signiﬁcantly increasing the number of resources. As a result, the accelerator is becoming more eﬃcient. However, after achieving a reasonably eﬃcient design, the only way to further reduce latency and/or increase throughput is increase parallelism. Previously we have seen ways of unrolling inner loops and partitioning arrays as a way to perform more work each clock cycle. An alternative way to increase parallelism is leverage pipelining. In addition to operator-level pipelinling we can also look for coarser-granularity task-level pipelining. With Merge Sort it turns out that we can make a dataﬂow pipeline out of each iteration of the stage loop, assuming that we have a ﬁxed size array to sort. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " HLS this implementation can be conceptually achieved by unrolling the stage loop and using the dataﬂow directive. Each instance of the merge arrays loop then becomes an independent process which can operate on a diﬀerent set of data. The resulting architecture is shown in Figure 10.15. The code to implement this is shown in Figure 10.16. This code is similar in many ways to the original code, but has several important diﬀerences. One key diﬀerence is that the merge arrays loop has been extracted into a function, making it easier simpler to rewrite the toplevel code. A second key diﬀerence is that the output of merge sort parallel() is produced in a separate array than the input, enabling Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " This chapter introduced a number of basic sorting algorithms with fundamentally diﬀerent algo- rithmic tradeoﬀs. Insertion sort operating on an array performs on average"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " 4 comparisons, but requires much fewer (approximately"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " comparators with an interval of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " cycles to perform insertion sort. Merge sort operating on an array performs generally fewer comparisons, roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 192,
            "refined_text": " , but requires 192"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " #include ”merge sort parallel.h” #include ”assert.h” void merge arrays(DTYPE in[SIZE], int width, DTYPE out[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " int f1 = 0; int f2 = width; int i2 = width; int i3 = 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " width; if (i2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = SIZE) i2 = SIZE; if (i3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = SIZE) i3 = SIZE; merge arrays: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " #pragma HLS pipeline II=1 DTYPE t1 = in[f1]; DTYPE t2 = in[f2]; if ((f1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " i2 && t1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = t2)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " out[i] = t1; f1++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " assert(f2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " i3); out[i] = t2; f2++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " if (f1 == i2 && f2 == i3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " f1 = i3; i2 += 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " width; i3 += 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " width; if (i2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = SIZE) i2 = SIZE; if (i3"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = SIZE) i3 = SIZE; f2 = i2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " void merge sort parallel(DTYPE A[SIZE], DTYPE B[SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " #pragma HLS dataﬂow DTYPE temp[STAGES"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " 1][SIZE]; #pragma HLS array partition variable=temp complete dim=1 int width = 1; merge arrays(A, width, temp[0]); width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = 2; for ( int stage = 1; stage"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " STAGES"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " 1; stage++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " #pragma HLS unroll merge arrays(temp[stage"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " 1], width, temp[stage]); width"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " = 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " merge arrays(temp[STAGES"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " 2], width, B);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " Figure 10.16: Restructured code for Merge Sort which can be implemented as a dataﬂow pipeline by Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 193,
            "refined_text": " HLS. 193"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " additional memory to store partially sorted results. The more complex loop structure of Merge Sort means that we required additional refactoring to reach an eﬃcient solution that took roughly"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " cycles with one comparator. We also showed a task-pipelined implementation which per- forms log"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " comparisons every clock cycle with an interval of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " cycles to perform merge sort. In contrast with insertion sort, this requires much fewer comparisons to achieve the same interval, but requires more memory (in the form of dataﬂow channels) and has much higher latency. In practice, many FPGA-based implementations of sorting will have to address these funda- mental tradeoﬀs in order to achieve the best integration with other aspects of a system. Another sort with a fundamentally diﬀerent tradeoﬀ is the Radix Sort, which focuses on data that exists within a bounded range, unlike the more general sorting algorithms in this chapter which only require comparison between items. Radix sort will be implemented as part of the Huﬀman Coding in Chapter 11. Parallel implementations of sorting algorithms are often described as sorting networks. Sorting networks are sometimes described as systolic arrays and other times as pipelines. We can often gain inspiration for HLS designs by looking investigating these existing parallel implementations and then capturing them as C code. In Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 194,
            "refined_text": " HLS, these networks can be described using either loop pipelines, dataﬂow pipelines, or a combination of both. 194"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 195,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 196,
            "refined_text": " S F A 3 B 1 C 2 D 5 E 5 F 1 create tree compute bit length ﬁlter sort L N 2 3 3 1 4 2 4 7 A 0 0 1 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 196,
            "refined_text": " 17 10 S F A 3 B 1 C 2 D 5 E 5 F 1 S F F 1 B 1 C 2 A 3 D 5 E 5 E D 0 1 C 2 0 1 F B 0 1 G 0 truncate tree canonize tree create codeword S CW A 00 B 1110 C 110 D 01 E 10 F 1111 L N 2 3 3 1 4 2 S L A 2 B 4 C 3 D 2 E 2 F 4 S L A 2 D 2 E 2 C 3 B 4 F 4 4 7 A 0 0 1 1 17 10 E D 0 1 C 2 0 1 F B 0 1 (continued below) (from above) Figure 11.1: The Canonical Huﬀman Encoding process. The symbols are ﬁltered and sorted, and used to build a Huﬀman tree. Instead of passing the entire tree to the decoder (as is done in “basic” Huﬀman coding), the encoding is done such that only the length of the symbols in the tree is required by the decoder. Note that the ﬁnal canonical tree is diﬀerent from the initial tree created near the beginning of the process. 196"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " three steps: 1) it uses the two minimum frequency nodes as an initial sub-tree and generates a new parent node by summing their frequencies; 2) it adds the new intermediate node to the list and sorts them again; and 3) it selects the two minimum elements from the list and repeats these steps until one element remains. The result is a Huﬀman tree where each leaf node in the tree represents a symbol that can be coded and each internal node is labeled with the frequency of the nodes in that sub-tree. By associating the left and right edges in the tree with bits 0 and 1, we can determine the unique codeword for each symbol based on the path to reach it from the root node. For example, the codeword for A is 00 and codeword for B is 1110. This completes the basic Huﬀman encoding process, but does not necessarily create the canonical Huﬀman tree. To create the canonical Huﬀman tree, we perform several additional transformations. First, the compute bit len module calculates the bit length of each codeword and then counts the frequency of each length. The result is a histogram of the codeword lengths (see Section 8.2). In the example case, we have three symbols ( A , D , E ) with the code length of 2. Therefore, the computed histogram maps contains value 3 in location 2. Next, the truncate tree module rebalances the Huﬀman tree in order to avoid excessively long codewords. This can improve decoder speed at the cost of a slight increase in encoding time. This is not necessary in the example in Figure 11.1. We set the maximum height of the tree to 27. Lastly, the canonize tree module creates two sorted tables. The ﬁrst table contains symbols and lengths sorted by symbol. The second table contains symbols and lengths sorted by lengths. These tables simplify the creation of the canonical Huﬀman codewords for each symbol. The create codeword module creates a table of canonical Huﬀman codewords by traversing the sorted tables. Beginning with the ﬁrst codeword in the sorted table, it is assigned the all-zero codeword with the appropriate length. Each following symbol with the same bit length is assigned the following codeword, which is formed by simply adding 1 to the previous code word. In our example, symbols A , D , and E all have bit length"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " = 2 and are assigned the codewords A = 00, D = 01, and E = 10. Note that the symbols are considered in alphabetical order, which is necessary to make the tree canonical. This process continues until we get to a codeword that requires a larger length, in which case we not only increment the previous codeword, but also shift left to generate a codeword of the correct length. In the example, the next symbol is C with a length of 3, which receives the codeword C = (10 + 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " 1 = 11"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " 1 = 110. Continuing on, the next symbol is B with a length of 4. Once again we increment and shift by one. Thus the codeword for B = (110 + 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " 1 = 1110. The ﬁnal codeword for symbol F = 1110 + 1 = 1111. We explain this in more detail in Chapter 11.2.7. The creation of a canonical Huﬀman code includes many complex and inherently sequential com- putations. For example, the create tree module needs to track the correct order of the created sub trees, requiring careful memory management. Additionally, there is very limited parallelism that can be exploited. In the following, we discuss the hardware architecture and the implementation of the canonical Huﬀman encoding design using Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 197,
            "refined_text": " HLS. Figure 11.2 shows the entire “top” huﬀman encoding function. This sets up the arrays and other variables that are passed between the various subfunctions. And it instantiates these functions. There is some additional copying of data that may seem unnecessary. This is due to our use of the dataﬂow directive. This imparts some restrictions on the ﬂow of the variables between the subfunctions. In particular, there are some strict rules on producer and consumer relationships of data between the parts of the function. This requires that we replicate some of the data. For example, we create two copies of the arrays parent , left and right . We also do the same with the array truncated bit length . The former is done in a for loop in the top huﬀman encoding function; the latter is done inside of the canonize tree function. 197"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” void huﬀman encoding("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " Symbol symbol histogram[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " PackedCodewordAndLength encoding[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " num nonzero symbols)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " #pragma HLS DATAFLOW Symbol ﬁltered[INPUT SYMBOL SIZE]; Symbol sorted[INPUT SYMBOL SIZE]; Symbol sorted copy1[INPUT SYMBOL SIZE]; Symbol sorted copy2[INPUT SYMBOL SIZE]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " parent[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " 1]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " left[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " 1]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " right[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " 1]; int n; ﬁlter(symbol histogram, ﬁltered, &n); sort(ﬁltered, n, sorted); ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " length histogram[TREE DEPTH]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " truncated length histogram1[TREE DEPTH]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " truncated length histogram2[TREE DEPTH]; CodewordLength symbol bits[INPUT SYMBOL SIZE]; int previous frequency ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " 1; copy sorted: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " n; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " sorted copy1[i].value = sorted[i].value; sorted copy1[i].frequency = sorted[i].frequency; sorted copy2[i].value = sorted[i].value; sorted copy2[i].frequency = sorted[i].frequency;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " assert(previous frequency"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " = ( int )sorted[i].frequency); previous frequency = sorted[i].frequency;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " create tree(sorted copy1, n, parent, left, right); compute bit length(parent, left, right, n, length histogram); #ifndef SYNTHESIS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 198,
            "refined_text": " int codewords in tree = 0; 198"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " merge bit length: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " TREE DEPTH; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " #pragma HLS PIPELINE II=1 if (length histogram[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " 0) std::cout"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " length histogram[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " ” codewords with length ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " n”; codewords in tree += length histogram[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " assert(codewords in tree == n); #endif truncate tree(length histogram, truncated length histogram1, truncated length histogram2); canonize tree(sorted copy2, n, truncated length histogram1, symbol bits); create codeword(symbol bits, truncated length histogram2, encoding);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " num nonzero symbols = n;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " Figure 11.2: The “top” huﬀman encoding function. It deﬁnes the arrays and variables between the various subfunctions. These are described graphically in Figures 11.1 and 11.4. The dataﬂow directive imposes restrictions on the ﬂow of information in the function. Many of the restrictions enforce a strict producer and consumer relationship between the subfunctions. One such restriction is that an array should be written to by only one function and it should be read by only one function. i.e., it should only serve as an output from one function and an input to another function. If multiple functions read from the same array, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " HLS will synthesize the code but will issue a warning and not use a dataﬂow pipelined architecture. As a result, using dataﬂow mode often requires replicating data into multiple arrays. A similar problem occurs if a function attempts to read from and write to an array which is also accessed by another function. In this case it is necessary to maintain an additional internal copy of the data inside the function. We will discuss both of these requirements and how to adhere to them as we go through the code in the remainder of this chapter."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 199,
            "refined_text": " The canonical Huﬀman encoding process is naturally divided into subfunctions. Thus, we can work on each of these subfunctions on a one-by-one basis. Before we do that, we should consider the interface for each of these functions. Figure 11.4 shows the functions and their input and output data. For the sake of simplicity, it only shows the interfaces with arrays, which, since they are large, we can assume are stored in block rams (BRAMs). Before we describe the functions and their inputs and outputs, we need to discuss the constants, custom data types, and the function interface that are deﬁned in huﬀman.h . Figure 11.3 shows the contents of this ﬁle. The INPUT SYMBOL SIZE parameter speciﬁes the maximum number of symbols that will be given as input for encoding. In this case, we’ve set it to 256, enabling the encoding of 8-bit ASCII 199"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " #include ”ap int.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int INPUT SYMBOL SIZE = 256;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int TREE DEPTH = 64;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int MAX CODEWORD LENGTH = 27;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int SYMBOL BITS = 10;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int TREE DEPTH BITS = 6;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static int CODEWORD LENGTH BITS = 5;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " const static ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " INTERNAL NODE ="
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " 1; typedef ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " MAX CODEWORD LENGTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " Codeword; typedef ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " MAX CODEWORD LENGTH + CODEWORD LENGTH BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " PackedCodewordAndLength; typedef ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " CODEWORD LENGTH BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " CodewordLength; typedef ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " Frequency; struct Symbol"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " value; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " 32"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " frequency;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " ; void huﬀman encoding ( Symbol in[INPUT SYMBOL SIZE], PackedCodewordAndLength encoding[INPUT SYMBOL SIZE], int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 200,
            "refined_text": " num nonzero symbols ); Figure 11.3: The parameters, custom data type, and function interface for the top level function huﬀman encoding . 200"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "refined_text": " create tree compute bit len create codeword ﬁlter sort parent left right initial bit length truncate tree canonize tree symbol bits encoding Symbol sorted Symbol sorted Symbol in Symbol ﬁltered truncated bit length truncated bit length initial bit length * * Figure 11.4: The block diagram for our hardware implementation of canonical Huﬀman encoding. The gray blocks represent the signiﬁcant input and output data that is generated and consumed by the diﬀerent subfunctions. The white blocks correspond to the functions (computational cores). Note that the array initial bit length appears twice to allow the ﬁgure to be more clear. data. The TREE DEPTH parameter speciﬁes the upper bound for the length of an individual code- word during the initial Huﬀman tree generation. The CODEWORD LENGTH parameter speciﬁes the target tree height when the Huﬀman tree is rebalanced in the function truncate tree . Finally, the CODEWORD LENGTH BITS constant determines the number of bits required to encode a codeword length. This is equal to log 2"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "refined_text": " CODEWORD LENGTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "refined_text": " , which in this case is 5. We create a custom data type Symbol to hold the data corresponding the input values and their frequencies. This datatype is used in the ﬁlter , sort , and other functions in the encoding process that require access to such information. The data type has two ﬁelds value and frequency . In this case we’ve assumed that the block of data being encoded contains no more than 2 32 symbols. Finally, the huﬀman.h ﬁle has the huﬀman encoding function interface. This is the speciﬁed top level function for the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 201,
            "refined_text": " HLS tool. It has three arguments. The ﬁrst argument is an array of Symbols of size INPUT SYMBOL SIZE . This array represents a histogram of the frequencies of the data in the block being encoded. The next two arguments are outputs. The encoding argument outputs the codeword for each possible symbol. The num nonzero symbols argument is the number of non-zero symbols from the input data. This is the same as the number of symbols that remain after the ﬁlter operation. The input to the system is an array of Symbol . This holds the symbol value and frequencies in the array in . Each symbol holds a 10-bit value and a 32-bit frequency . The size of this array is set as the constant INPUT SYMBOL SIZE which is 256 in our example. The ﬁlter module reads from the in array and writes its output to the ﬁltered array. This is an array of Symbols which holds the number of non-zero elements which is the input to the sort module. The sort module writes the symbols sorted by frequency into two diﬀerent arrays – one is used for the create tree module and the other for the canonize tree module. The create tree module creates a Huﬀman tree from the sorted array and stores it into three arrays ( parent , left , and right ); these arrays hold all the 201"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " #include ”huﬀman.h”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " void ﬁlter("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " Symbol in[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " Symbol out[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " int"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " n)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " #pragma HLS INLINE oﬀ ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " j = 0; for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " INPUT SYMBOL SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " #pragma HLS pipeline II=1 if (in[i].frequency != 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " out[j].frequency = in[i].frequency; out[j].value = in[i].value; j++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " n = j;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " Figure 11.5: The ﬁlter function iterates across the input array in and add any Symbol entry with a non-zero frequency ﬁeld to the output array out . Additionally, it records the number of non-zero frequency elements and passes that in the output argument n . info for each node of the Huﬀman tree. Using the Huﬀman tree information, the compute bit len module calculates the bit length of each symbol and stores this information to a initial bit len array. We set the maximum number of entries to 64, covering up to maximum 64-bit frequency number, which is suﬃcient for most applications given that our Huﬀman tree creation rebalances its height. The truncate tree module rebalances the tree height and copies the bit length information of each codeword into two separate truncated bit length arrays. They each have the exact same information, but they must be copied to ensure that the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " HLS tool can perform functional pipelining; we will talk about that in more detail later. The canonize tree module walks through each symbol from the sort module and assigns the appropriate bit length using the truncated bit length array. The output of the canonize module is an array that contains the bit lengths for the codeword of each symbol. Finally, the create codeword module generates the canonical codewords for each symbol. 11.2.1 Filter The ﬁrst function for the Huﬀman encoding process is ﬁlter , which is shown in Figure 11.5. This function takes as input a Symbol array. The output is another Symbol array that is a subset of the input array in . The ﬁlter function removes any entry with a frequency equal to 0. The function itself simply iterates across the in array, storing each element to the out array if its frequency ﬁeld is non-zero. In addition, the function counts the number of non-zero entries to the output. This is passed as the output argument n , enabling further functions to only process the ‘useful’ data. Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 202,
            "refined_text": " HLS can decide to automatically inline functions in order to generate a more eﬃcient architecture. Most often, this happens for small functions. The directive inline allows 202"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " the user to explicitly specify whether or not Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " of the sort. Our algorithm considers 4 bits at a time of the 32-bit Symbol.frequency vari- able. Hence we are using radix"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " HLS they serve an additional purpose as well. Since num symbols determines the number of times that many of the internal loops execute, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " HLS can infer the tripcount of the loop based on these assertions. In addition, Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 203,
            "refined_text": " HLS also uses these assertions to minimize the bitwidth of the variables used in the implemented circuit. 203"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” const unsigned int RADIX = 16; const unsigned int BITS PER LOOP = 4;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " typedef ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " BITS PER LOOP"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " Digit; void sort("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " Symbol in[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " int num symbols,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " Symbol out[INPUT SYMBOL SIZE])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " Symbol previous sorting[INPUT SYMBOL SIZE], sorting[INPUT SYMBOL SIZE]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " digit histogram[RADIX], digit location[RADIX]; #pragma HLS ARRAY PARTITION variable=digit location complete dim=1 #pragma HLS ARRAY PARTITION variable=digit histogram complete dim=1 Digit current digit[INPUT SYMBOL SIZE]; assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " = 0); assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " = INPUT SYMBOL SIZE); copy in to sorting: for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " num symbols; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " #pragma HLS PIPELINE II=1 sorting[j] = in[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " radix sort: for ( int shift = 0; shift"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " 32; shift += BITS PER LOOP)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " init histogram: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " RADIX; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " #pragma HLS pipeline II=1 digit histogram[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " compute histogram: for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " num symbols; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " #pragma HLS PIPELINE II=1 Digit digit = (sorting[j].frequency"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " shift) & (RADIX"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " 1);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " current digit[j] = digit;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " digit histogram[digit]++; previous sorting[j] = sorting[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 204,
            "refined_text": " 204"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " digit location[0] = 0; ﬁnd digit location: for ( int i = 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " RADIX; i++) #pragma HLS PIPELINE II=1 digit location[i] = digit location[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " 1] + digit histogram[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " 1]; re sort: for ( int j = 0; j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " num symbols; j++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " #pragma HLS PIPELINE II=1 Digit digit = current digit[j]; sorting[digit location[digit]] = previous sorting[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " out[digit location[digit]] = previous sorting[j];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " digit location[digit]++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 205,
            "refined_text": " Figure 11.6: The sort function employs a radix sort on the input symbols based upon their frequency values. Previously we’ve seen the loop tripcount directive used to give Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "refined_text": " 256), what is the approximate latency, in terms of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 206,
            "refined_text": " , of the code in Figure 11.6. What portions of the code dominate the number of cycles? How would this change as the RADIX parameter changes? Note that the re sort loop not only stores the sorted arrray in sorting[] but also stores the sorted array in out[] . While this may seem redundant, we need to ensure that out[] is only written to in order to obey the requirements of the toplevel dataﬂow directive. In this case, out[] will be overwritten multiple times with partially sorted results, but only the ﬁnal result will be passed on the following function. The dataﬂow directive has several requirements in order to perform the task level pipelining optimization. One of them is the need for single producer and consumer of data between the tasks. Since we would like to perform task level pipelining for the Huﬀman encoding process as shown in Figure 11.4, we must insure that each of these tasks follow this requirement. In the case of this sort function, which is one of the tasks, it must only consume (read from but not 206"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 207,
            "refined_text": " write to) the input argument data and only produce (write to but not read from) the output argument data. In order to met this requirement, we create the internal array sorting , which is read from and written to throughout the function. We copy the input data from the argument in at the beginning of the function and write the ﬁnal results to the output argument out at the end of the function. This insures that we follow the producer/consumer requirements for the dataﬂow directive. 11.2.3 Create Tree The next function in the Huﬀman encoding process forms the binary tree representing the Huﬀ- man code. This is implemented in the create tree function shown in Figure 11.8. in[] contains num symbols Symbol elements, sorted from lowest to highest frequency. The function creates a binary tree of those symbols which is stored into three output arrays named parent , left , and right . The left and right arrays represent the left and right children of each intermediate node in the tree. If the child is a leaf node, then the corresponding element of the left or right array will contain the symbol value of the child, otherwise it contains the special ﬂag INTERNAL NODE . Similarly, the parent array holds the index of the parent node of each intermediate node. The parent of the root node of the tree is deﬁned to be index zero. The tree is also ordered, in the sense that a parent always has a higher index than its children. As a result, we can eﬃciently implement bottom-up and top-down traversals of the tree. Figure 11.7 shows an example of these data structures. Six symbols sorted by their frequencies are stored in the in array. The resulting Huﬀman tree is stored in three arrays parent , left , and right . In addition, the frequency of each intermediate node is stored in the frequency array. We directly denote the node numbers for the left and right arrays (e.g., n0 , n1 , etc.) for the sake of illustration. These will hold a special internal node value in reality. While it may be odd to think of storing a complex data structure in a tree like this, it is actually very common in embedded programming where data allocation is not allowed[53]. In fact, the C library implementations of malloc() and free() often implement low-level memory management in this way to enable small allocations to be created from larger memory alloca- tions, usually called"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 207,
            "refined_text": " , returned from the operating system. This enables the operating system to eﬃciently manage large allocations of memory eﬃciently and to coordinate virtual memory using the processor page table and disk storage which usually handle large blocks of data. 4 Kilo-bytes is a typical size for these pages. For more ideas about implementing data structures using arrays, see [58]. In the Huﬀman tree, each symbol is associated with a leaf node in the tree. Intermediate nodes in the tree are created by grouping the two symbols with the smallest frequency and using them as the left and right nodes of a new intermediate node. That intermediate node has a frequency which is the sum of the frequencies of each child node. This process continues by iteratively creating intermediate nodes from the two nodes with the smallest frequencies, which may include other intermediate nodes or leaf nodes. The tree building process completes when all of the intermediate nodes have been incorporated into the binary tree. There are many ways to represent this process in code. For instance, we might explicitly create an array representing every node in the tree which is sorted by frequency. In this case selecting 207"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": " 4 7 A 0 0 1 1 17 10 E D 0 1 C 2 0 1 F B 0 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": " n0 n1 n2 n3 n4"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 208,
            "refined_text": " Figure 11.7: The Symbol array in is used to create the Huﬀman tree. The tree is shown graphically along with the corresponding values for the four arrays used to represent the tree ( intermediate , left , right , and parent ). nodes to add to the tree is simple, since they will always be in the same locations of the sorted array. On the other hand, inserting a newly created node into the list is relatively complex because the array must again be sorted, which would require moving elements around. Alternatively, we might add pointer-like array indexes to the data structure in our array to enable the data to be logically sorted without actually moving the data around. This would reduce data copying, but would increase the cost of accessing each element and require extra storage. Many of the normal algorithmic tradeoﬀs in the design of data structures apply in the context of HLS just as well as they apply to processors. In this case, however, we can make some additional simplifying observations. The most im- portant observation is that new intermediate nodes are always created in order of frequency. We might create an intermediate node with a frequency that is less than the frequency of some leaf node, but we will never create an intermediate node with a frequency less than an already created intermediate node. This suggests that we can maintain a sorted data structure by storing the nodes in two separate arrays: a sorted array of symbols and a sorted array of intermediate nodes. As we ‘use’ the lowest frequency elements of each list, we only need to append to the end of the list of intermediate nodes. There is a small extra complexity because we might need to remove zero, one, or two elements from either array, but this turns out to be much less complex than resorting the node array. Conceptually this algorithm is very similar to the mergesort algorithm discussed in Section 10.3. The key diﬀerence is what operation is done as elements are removed from the sorted arrays. In mergesort, the least element is simply inserted at the appropriate position in the array. In this case, the two least elements are identiﬁed and then merged into a new tree node. This code to implement the create tree function is shown in Figure 11.8. The ﬁrst block of code deﬁnes the local variables that we use in the function. frequency[] stores the frequencies for each intermediate node as it is created. in count tracks which symbols have been given a parent node in the tree, while tree count tracks which newly created intermediate nodes have been given a parent 208"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” void create tree ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " Symbol in[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " int num symbols,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " parent[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 1],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " left[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 1],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " right[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 1])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " Frequency frequency[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 1]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " in count = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 0); assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " = INPUT SYMBOL SIZE); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " (num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 1); i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " #pragma HLS PIPELINE II=5 Frequency node freq = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " assert(in count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " i); Frequency intermediate freq = frequency[tree count]; Symbol s = in[in count]; if ((in count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " num symbols && s.frequency"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " = intermediate freq)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count == i)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " left[i] = s.value;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " node freq = s.frequency;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " in count++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " left[i] = INTERNAL NODE;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " node freq = frequency[tree count];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " parent[tree count] = i;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " assert(in count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " i); intermediate freq = frequency[tree count]; s = in[in count]; if ((in count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " num symbols && s.frequency"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " = intermediate freq)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " tree count == i)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 209,
            "refined_text": " 209"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " right[i] = s.value; frequency[i] = node freq + s.frequency; in count++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " right[i] = INTERNAL NODE; frequency[i] = node freq + intermediate freq; parent[tree count] = i; tree count++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " assert(i == 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " frequency[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " = frequency[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " 1]);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " parent[tree count] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " Figure 11.8: The complete code for Huﬀman tree creation. The code takes as input the sorted Symbol array in , the number of elements in that array n , and outputs the Huﬀman tree in the three arrays left , right , and parent . node. Each iteration through the main loop creates a new intermediate node without a parent, so all of the intermediate nodes between tree count and i have not yet been assigned a parent in the tree. The main loop contains two similar blocks of code. Each block compares the frequency of the next available symbol in[in count].frequency with the frequency of the next available intermediate node frequency[tree count] . It then selects the lowest frequency of the two to be incorporated as the leaf of a new intermediate node. The ﬁrst block does this for the left child of the new node, storing in left[i] , while the second block selects the right child of the new node, storing in right[i] . In both cases, we need to be careful to ensure that the comparison is meaningful. In the ﬁrst iteration of the loop, tree count == 0 and i == 0 , so there is no valid intermediate node to be considered and we must always select an input symbol. During the ﬁnal iterations of the loop, it is likely that all of the input symbols will have been consumed, so in count == num symbols and we must always consume an intermediate node. The number of iterations of the loop depends on the input num symbols in an interesting way. Since each input symbol becomes a leaf node in the binary tree, we know that there will be exactly num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " 1 intermediate nodes to be created, since this is a basic property of a binary tree. At the end of the loop we will have created num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " 1 new nodes, each of which has two children. num symbols of these children will be input symbols and num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 210,
            "refined_text": " 2 will be intermediate nodes. There will be one intermediate node remaining as the root of the tree without a parent. This last node is artiﬁcially assigned a parent index of zero in the last line of code. This completes the building of the Huﬀman tree. In the tree, the children of an intermediate node can be either a symbol or a intermediate node. In creating the huﬀman tree, this information isn’t very important, although it will be important 210"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " later when we traverse the tree later. To store this diﬀerence a special value INTERNAL NODE is stored in left[] and right[] if the corresponding child is an internal node. Note that this storage essentially requires one more bit to represent in the array. As a result, the left[] and right[] arrays are one bit larger than you might expect. For a large dataset ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " 256), what is the approximate latency, in terms of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " , of the code in Figure 11.8? What portions of the code dominate the number of cycles? 11.2.4 Compute Bit Length The compute bit length function determines the depth in the tree for each symbol. The depth is important because it determines the number of bits used to encode each symbol. Computing the depth of each node in the tree is done using the recurrence: depth(root) = 0"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ! = root"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " depth("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) = depth(parent("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) + 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " child depth("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) = depth("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) + 1 (11.1) This recurrence can be computed by traversing the tree starting at the root node and exploring each internal node in order. As we traverse each internal node, we can compute the depth of the node and the corresponding depth (incremented by one) of any child nodes. It turns out that we don’t actually care about the depth of the internal nodes, only about the depth of the child nodes. As a result, the code actually computes the recurrence: child depth(root) = 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ! = root"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " child depth("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) = child depth(parent("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 211,
            "refined_text": " ) + 1) (11.2) The code for this function is shown in Figure 11.9. The input arguments to the function represent a Huﬀman tree in parent[] , left[] , and right[] . num symbols contains the number of input symbols, which is one more than the number of intermediate nodes in the tree. The output length histogram[] . Each element of that array stores the number of symbols with the given depth. Thus, if there are ﬁve symbols with depth three, then length histogram[3] = 5 . child depth[] stores the depth of each internal node while the tree is being traversed. After the depth of each internal node is determined in the traverse tree loop, length histogram[] is updated. internal length histogram[] is used to ensure that our function adheres the requirements for the dataﬂow directive, where the output array length histogram[] is never read. The init histogram loop initializes these two arrays. The init histogram loop has a pipeline directive with II = 1 . Is it possible to meet this II? What happens if we increase the II to something larger? What happens if we do not apply this directive? Internal nodes in the tree are traversed from the root node, which has the largest index, down to index zero. Since the array of nodes were created in bottom-up order, this reverse order results in a top-down traversal of the tree enabling the computation of the recurrence for each node in a single pass through the nodes. For each node, we determine the depth of its children. Then if the node actually does have any children which are symbols, we ﬁgure out how many children and 211"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” void compute bit length ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " parent[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 1],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " left[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 1],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " right[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 1],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " int num symbols,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " length histogram[TREE DEPTH])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 0); assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " = INPUT SYMBOL SIZE); ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " TREE DEPTH BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " child depth[INPUT SYMBOL SIZE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 1]; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " internal length histogram[TREE DEPTH]; init histogram: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " TREE DEPTH; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " #pragma HLS pipeline II=1 internal length histogram[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " child depth[num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 2] = 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " traverse tree: for ( int i = num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " 3; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " #pragma HLS pipeline II=3 ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " TREE DEPTH BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " length = child depth[parent[i]] + 1; child depth[i] = length; if (left[i] != INTERNAL NODE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " right[i] != INTERNAL NODE)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " int children; if (left[i] != INTERNAL NODE && right[i] != INTERNAL NODE)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " children = 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " children = 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " count = internal length histogram[length]; count += children; internal length histogram[length] = count; length histogram[length] = count;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 212,
            "refined_text": " Figure 11.9: The complete code for determining the number of symbols at each bit length. 212"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "refined_text": " update the histogram accordingly. Child nodes which are internal nodes are represented by the special value INTERNAL NODE . For a large dataset ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "refined_text": " 256), what is the approximate latency, in terms of"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 213,
            "refined_text": " , of the code in Figure 11.9? What portions of the code dominate the number of cycles? This code has several recurrences. For example, one recurrence occurs because of the histogram computation. In this case, the loop is synthesized with an II of 3. What happens if you target a lower II in the pipeline directive? Can you rewrite the code to eliminate the recurrences and achieve a lower II? 11.2.5 Truncate Tree The next part of the Huﬀman encoding process reorganizes nodes with a depth that is larger than that speciﬁed in MAX CODEWORD LENGTH . This is done by ﬁnding any symbols with a greater depth, and moving them to a level that is smaller than that speciﬁed target. Interestingly, this can be done entirely by manipulating the histogram of symbol depths, as long as the histogram is modiﬁed in a way that is consistent with the same modiﬁcations on the original tree. The input histogram is contained in input length histogram , which was derived by the compute bit length() function described in the previous section. There are two identical output arrays truncated length histogram1 and truncated length histogram2 . These arrays are passed to two separate functions later in the process ( canonize tree and create codewords ), and thus we must have two arrays to adhere to the single producer, single consumer constraint of the dataﬂow directive. The code is shown in Figure 11.10. The copy input loop copies the data from the input array input length histogram . The move nodes loop contains the bulk of the processing to modify the histogram. Lastly, the input length histogram function copies the internal result to other output at the end of the function. The copy in for loop is not optimized. What happens to the latency and initiation interval of the truncate tree function if we use a pipeline or unroll directive on this loop. What happens to the overall latency and initiation interval of the design (i.e., the huﬀman encoding function)? The function continues in the second move nodes for loop, which performs the bulk of the computation. This for loop starts by iterating through the truncated length histogram array from the largest index ( TREE DEPTH - the speciﬁed maximum depth for a tree). This continues down through the array until there is a non-zero element or i reaches the MAX CODEWORD LENGTH . If we do not ﬁnd a non-zero element, that means the initial input Huﬀman tree does not have any nodes with a depth larger than the target depth. In other words, we can exit this function without performing any truncation. If there is a value larger than the target depth, then the function continues by reorganizing the tree so that all of the nodes have depth smaller than the target depth. This is done by the operations in the reorder while loop. When there are nodes to move, the move nodes for loop goes through them from those with the largest depth, and continues to smaller depths until all nodes are rearranged with a depth smaller than the target. Each iteration of this move nodes for loops works on moving nodes from one depth at a time. 213"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” void truncate tree("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " input length histogram[TREE DEPTH],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[TREE DEPTH],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram2[TREE DEPTH] )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " copy input: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " TREE DEPTH; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[i] = input length histogram[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " j = MAX CODEWORD LENGTH; move nodes: for ( int i = TREE DEPTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " MAX CODEWORD LENGTH; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " reorder: while (output length histogram1[i] != 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " #pragma HLS LOOP TRIPCOUNT min=3 max=3 avg=3 if (j == MAX CODEWORD LENGTH)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " do"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " #pragma HLS LOOP TRIPCOUNT min=1 max=1 avg=1 j"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " while (output length histogram1[j] == 0);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[j]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " = 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[j+1] += 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " 1] += 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " output length histogram1[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " = 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " j++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 214,
            "refined_text": " 214"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " unsigned int limit = 1; copy output: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " TREE DEPTH; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " output length histogram2[i] = output length histogram1[i]; assert(output length histogram1[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " = 0); assert(output length histogram1[i]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " = limit); limit"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " = 2;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " Figure 11.10: The complete code for rearranging the Huﬀman tree such that the depth of any node is under the target speciﬁed by the parameter MAX CODEWORD LENGTH . The reorder while loop moves one node in each iteration. The ﬁrst if statement is used to ﬁnd the leaf node with the largest depth. We will then alter this node by making it an intermediate node, and adding it and the leaf node with a depth larger than than target as children. This if clause has a do / while loop that iterates downward from the target looking for a non-zero entry in the truncated length histogram array. It works in a similar manner as the beginning of the move nodes for loop. When it has found the deepest leaf node less than the target depth, it stops. The depth of this node is stored in j . Now we have a node with a depth i larger than the target, and a node with a depth smaller than the target stored in j . We move the node from depth i and a node from j into child nodes at depth j + 1 . Therefore, we add two symbols to truncated length histogram[j+1] . We are making a new intermediate node a depth j thus, we subtract a symbol from that level. We move the other leaf node from depth i to depth i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " 1 . And we subtract two from truncated length histogram[i] since one of the nodes went to level j + 1 and the other when to level i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 215,
            "refined_text": " 1 . These operations are performed in the four statements on the array truncated length histogram . Since we added a symbol to level j + 1 , we update j , which holds the highest level under the target level, and then we repeat the procedure. This is done until there are no additional symbols with a depth larger than the target. The function completes by creating an additional copy of the new bit lengths. This is done by storing the updated bit lengths in the array truncated length histogram1 into the array truncated length histogram2 . We will pass these two arrays to the ﬁnal two functions in the huﬀman encoding top function; we need two arrays to insure that the constraints of the dataﬂow directive are met. 11.2.6 Canonize Tree The next step in the encoding process is to determine the number of bits for each of the symbols. We do this in the canonize tree function shown in Figure 11.11. The function takes as input an array of symbols in sorted order, the total number of symbols ( num symbols ), and a histogram of lengths describing the Huﬀman tree. The output symbol bits[] contains the number of encoded bits used for each symbol. Thus, if the symbol with value 0x0A is encoded in 4 bits, then symbol bits[10] = 4 . The canonization process consists of two loops, labeled init bits and process symbols . The init bits loop executes ﬁrst, initializing symbol bits[] array to 0 . The process symbols loop then processes the symbols in sorted order from smallest frequency to largest frequency. Naturally, the least frequent 215"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” void canonize tree("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " Symbol sorted[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " num symbols,"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " codeword length histogram[TREE DEPTH],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " CodewordLength symbol bits[INPUT SYMBOL SIZE] )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " assert(num symbols"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " = INPUT SYMBOL SIZE); init bits: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " INPUT SYMBOL SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " symbol bits[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " length = TREE DEPTH; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " count = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " process symbols: for ( int k = 0; k"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " num symbols; k++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " if (count == 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " do"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " #pragma HLS LOOP TRIPCOUNT min=1 avg=1 max=2 length"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " count = codeword length histogram[length];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " while (count == 0);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " symbol bits[sorted[k].value] = length;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " count"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 216,
            "refined_text": " Figure 11.11: The complete code for canonizing the Huﬀman tree, which determins the number of bits for each symbol. 216"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " int k = 0; process symbols: for (length = TREE DEPTH; length"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " = 0; length"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " count = codeword length histogram[length]; for (i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " count; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " #pragma HLS pipeline II=1 symbol bits[sorted[k++].value] = length;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " Figure 11.12: Alternate loop structure for the process symbols loop in Figure 11.11. symbols are assigned the longest codes while the most frequent symbols are assigned the shortest code. Each time through the process symbols loop, we assign the length of one symbol. The length of the symbol is determined by the the inner do / while loop, which steps through the histogram of lengths. This loop ﬁnds the largest bit length that has not yet had codewords assigned and stores the number of codewords in that length in count . Each time through the outer loop, count is decremented until we run out of codewords. When count becomes zero, the inner do / while loop executes again to ﬁnd a length with codewords to assign. Note that the process symbols loop cannot be pipelined because the inner do / while loop cannot be unrolled. This is somewhat awkward as the inner loop will usually execute exactly once, stepping to the next length in the histogram. Only in somewhat rare cases will the inner loop need to execute more than once if we happen to get to a length which does not have any codewords assigned. In this case, there’s not too much of a loss since all the operations in the loop are simple operations that are unlikely to be pipelined, with the exception of the memory operations. There are other ways to structure this loop, however, which"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " 1"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " ﬁrst codeword("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " ) = (ﬁrst codeword("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " 1) + codeword length histogram("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " 1))"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 217,
            "refined_text": " 1 (11.3) 217"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 218,
            "refined_text": " Essentially, rather than actually assigning the codewords one after another, this recurrence allocates all the codewords ﬁrst. This allows us to actually assign the codewords in order of symbol value without being concerned about also ordering them by length or frequency. In addition to assigning codewords to symbols, we also need to format the codewords so that they can be easily used for encoding and decoding. Systems that use Huﬀman encoding often store codewords in bit-reversed order. This can make the decoding process easier since the bits are stored in the same order that the tree is traversed during decoding, from root node to leaf node. The code implementing the create codewords function is shown in Figure 11.13. symbol bits[] contains the length of the codeword for each symbol and codeword length histogram[] contains the number of codewords with each length. The output encoding[] represents the encoding for each symbol. Each element consists of the actual codeword and the length of each codeword packed together. The maximum length of a codeword is given by the MAX CODEWORD LENGTH param- eter. In turn, this determines the number of bits required to hold the codeword, which is given by CODEWORD LENGTH BITS . The CODEWORD LENGTH BITS least signiﬁcant bits of each ele- ment in the encoding array contains the same value received from the input array symbol bits . The high order MAX CODEWORD LENGTH bits of each encoding element contains the actual codeword. Using 27 bits for MAX CODEWORD LENGTH resulting in CODEWORD LENGTH BITS of 5 is a particularly useful combination, since each element of encoding[] ﬁts in a single 32-bit word. The code consists primarily of two loops, labeled ﬁrst codewords and assign codewords . The ﬁrst codewords loop ﬁnds the ﬁrst codeword with each length, implementing the recurrence in Equation 11.3. The assign codewords loop ﬁnally associates each symbol with a codeword. The codeword is found using the length of each codeword and indexing into the correct element of ﬁrst codeword[] . The main complexity of this code is in the bit reversal process, which is based on the bit reverse32 function. We have talked about this function previously in the FFT chapter (see Chapter 5.3), so we will not discuss it here again. After reversing the bits in the codeword, the next statement removes the least signiﬁcant ’0’ bits leaving only the bit-reversed codeword. The bit-reversed codeword is then packed in the high-order bits together with the length of the symbol in the low-order bits and stored in encoding[] . Lastly, the value in ﬁrst codeword[] is incremented. In the code in Figure 11.13, the inputs actually contain some redundant information. In particular, we could compute the number of symbols for each bit length stored in codeword length histogram[] from the length of each codeword symbol bits[] using a histogram computation. Instead, in this code we’ve chosen to reuse the histogram originally computed in the truncate tree() function. Instead we could save the storage by recomputing the histogram. Do you think this is a good tradeoﬀ? How many resources are required to compute the his- togram in this function? How many resources are required to communicate the histogram through the pipeline? Estimate the latency of the code in Figure 11.13 Let us now go through our running example and show how this is used to derive the initial codewords. In the example, the symbols A , D , and E have two bits for their encoding; symbol C has 218"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " #include ”huﬀman.h” #include ”assert.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " iostream"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " void create codeword("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " CodewordLength symbol bits[INPUT SYMBOL SIZE],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " SYMBOL BITS"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " codeword length histogram[TREE DEPTH],"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " PackedCodewordAndLength encoding[INPUT SYMBOL SIZE] )"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " Codeword ﬁrst codeword[MAX CODEWORD LENGTH];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " ﬁrst codeword[0] = 0; ﬁrst codewords: for ( int i = 1; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " MAX CODEWORD LENGTH; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " #pragma HLS PIPELINE II=1 ﬁrst codeword[i] = (ﬁrst codeword[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " 1] + codeword length histogram[i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " 1])"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " 1; Codeword c = ﬁrst codeword[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " assign codewords: for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " INPUT SYMBOL SIZE; ++i)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " #pragma HLS PIPELINE II=5 CodewordLength length = symbol bits[i];"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " make codeword: if (length != 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " Codeword out reversed = ﬁrst codeword[length]; out reversed.reverse(); out reversed = out reversed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " (MAX CODEWORD LENGTH"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " length);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " encoding[i] = (out reversed"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " CODEWORD LENGTH BITS) + length; ﬁrst codeword[length]++;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " encoding[i] = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 219,
            "refined_text": " Figure 11.13: The complete code for generating the canonical Huﬀman codewords for each of the symbols. The codewords can be computed with knowledge of number of bits that each sym- bol uses (stored in the input array symbol bits[] ). Additionally, we have another input array codeword length histogram[] which stores at each entry the number of symbols with codewords at that bit length. The output is the code word for each symbol stored in the encoding[] array. 219"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " three bits; and symbols B and F have four bits. Thus, we have: bit length(1) = 0 bit length(2) = 3 bit length(3) = 1 bit length(4) = 2 (11.4) Using Equation 11.3 to calculate the values of ﬁrst codeword , we determine: ﬁrst codeword(1) = 0 = 0b0 ﬁrst codeword(2) = (0 + 0)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 1 = 0b00 ﬁrst codeword(3) = (0 + 3)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 1 = 6 = 0b110 ﬁrst codeword(4) = (6 + 1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 1 = 14 = 0b1110 (11.5) Once we have determined these values, then consider each symbol in order from smallest to largest. For each symbol, we determine the length of its codeword and assign the next codeword of the appropriate length. In the running example, we consider symbols A , B , C , D , E , and F in alphabetical order. The symbol A has two bits for its encoding. We perform a lookup into ﬁrst codeword[2] = 0 . Thus we assign the codeword for A to 0b00 . We increment the value at ﬁrst codeword[2] to 1. The symbol B has four bits. Since ﬁrst codeword[4] = 14 = 0b1110 , it gets assigned the codeword 0b1110 . Symbol C has three bits. The value of ﬁrst codeword[3] = 6 = 0b110 , thus it gets the codeword 110 . Symbol D has two bits so it gets ﬁrst codeword[2] = 1 = 0b01 ; remember that we incremented this value after we assigned the codeword to symbol A . Symbol E has two bits so it gets the codeword 0b01 + 1 = 0b10 . And F has four bits so it gets the codeword 0b1110 + 1 = 0b1111 . The ﬁnal codewords for all of the symbols are: A"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 00 B"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 1110 C"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 110 D"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 01 E"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 10 F"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 220,
            "refined_text": " 1111 (11.6) 11.2.8 Testbench The ﬁnal part of the code is the testbench. This is shown in Figure 11.14. The general structure is to read the input frequency values from a ﬁle, process them using the huﬀman encoding function, and compare the resulting codewords with an existing golden reference that is stored in a ﬁle. The main() function starts by setting up the variables required to read the frequencies from a ﬁle (in this case the ﬁle is huffman.random256.txt ) and puts them into in[] . This is done in the ﬁle to array function, which takes as input the ﬁlename for the input data and the length of the data ( array length ), and stores the entries in that ﬁle into array[] variable. This ﬁle contains the frequency of each symbol. Frequency values are stored in symbol order, thus the ﬁrst value of the ﬁle represents the frequency of symbol ’0’, and so on. The main() function continues by initializing in[] using the frequencies from the ﬁle. It then calls the top huﬀman encoding function. The function returns the encoded symbol values in encoding[] . Since the result of processing should be a preﬁx code, we check that the properties of a preﬁx code are actually satisﬁed. The result is then compared to the codewords stored in a golden reference, which is stored in the ﬁle huffman.random256.gold . We do this by writing the result 220"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " #include ”huﬀman.h” #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " stdio.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " #include"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " stdlib.h"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " void ﬁle to array( const char"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " ﬁlename, ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " &array, int array length)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " printf(”Start reading ﬁle [%s]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " n”, ﬁlename); FILE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " ﬁle = fopen(ﬁlename, ”r”); if (ﬁle == NULL)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " printf(”Cannot ﬁnd the input ﬁle"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " n”); exit(1);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " int ﬁle value = 0; int count = 0; array = (ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " ) malloc(array length"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " sizeof (ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " )); while (1)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " int eof check = fscanf(ﬁle, ”%x”, &ﬁle value); if (eof check == EOF) break ; else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " array[count++] = (ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " ) ﬁle value ;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " fclose(ﬁle); if (count != array length) exit(1);"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " int main()"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " printf(”Starting canonical Huﬀman encoding testbench"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " n”); FILE"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " output ﬁle; int return val = 0; ap uint"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " 16"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " frequencies = NULL; ﬁle to array(”huﬀman.random256.txt”, frequencies, INPUT SYMBOL SIZE); Symbol in[INPUT SYMBOL SIZE]; for ( int i = 0 ; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " INPUT SYMBOL SIZE; i++)"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " in[i].frequency = frequencies[i]; in[i].value = i;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 221,
            "refined_text": " int num nonzero symbols; 221"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " PackedCodewordAndLength encoding[INPUT SYMBOL SIZE]; huﬀman encoding(in, encoding, &num nonzero symbols); output ﬁle = fopen(”huﬀman.random256.out”, ”w”); for ( int i = 0; i"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " INPUT SYMBOL SIZE; i++) fprintf(output ﬁle, ”%d, %x"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”, i, ( unsigned int ) encoding[i]); fclose(output ﬁle); printf (”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " Comparing against output data"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); if (system(”diﬀ huﬀman.random256.out huﬀman.random256.golden”))"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " fprintf(stdout, ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); fprintf(stdout, ”FAIL: Output DOES NOT match the golden output"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); fprintf(stdout, ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); return val = 1;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " else"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " fprintf(stdout, ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); fprintf(stdout, ” PASS: The output matches the golden output"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); fprintf(stdout, ”"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); return val = 0;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " printf(”Ending canonical Huﬀman encoding testbench"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " n”); return return val;"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 222,
            "refined_text": " Figure 11.14: The complete code for the canonical Huﬀman encoding testbench. The code initializes the in array with data from an input ﬁle. It passes that into the top huﬀman encoding function. Then it stores the resulting codewords into a ﬁle, and compares that with another golden reference ﬁle. It prints out the results of the comparison, and returns the appropriate value. 222"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " to a ﬁle named random256.out and performing a ﬁle comparison using the diff tool. The diff tool returns ’0’ if the ﬁles are identical and non-zero if the ﬁles are diﬀerent. Thus, the if condition occurs when the ﬁles are diﬀerent, and the else condition is executed when the ﬁles are the same. In both cases, we print out a message and set the return val to the appropriate value. This return value is used by the Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " HLS tool during cosimulation to check the correctness of results. The return value should be ’0’ if it passes, and non-zero if it does not pass."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " Huﬀman Coding is a common type of data compression used in many applications. While encoding and decoding using a Huﬀman code are relatively simple operations, generating the Huﬀman code itself can be a computationally challenging problem. In many systems it is advantageous to have relatively small blocks of data, implying that new Huﬀman codes must be created often, making it worthwhile to accelerate. Compared to other algorithms we’ve studied in this book, creating a Huﬀman code contains a number of steps with radically diﬀerent code structures. Some are relatively easy to parallelize, while others are more challenging. Some portions of the algorithm naturally have higher"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " ("
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " ) complexity, meaning that they must be more heavily parallelized to achieve a balanced pipeline. However, using the dataﬂow directive in Vivado R"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 223,
            "refined_text": " HLS, these diﬀerent code structures can be linked together relatively easily 223"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 224,
            "refined_text": " 224"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " [1] Ameer M.S. Abdelhadi and Guy G.F. Lemieux. Modular multi-ported SRAM-based memories. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , pages 35–44. ACM, 2014. ISBN 978-1-4503-2671-1. doi: 10.1145/2554688.2554773. URL http://doi.acm.org/10.1145/2554688.2554773 . [2]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " . Accellera, 2.3.2 edition, October 2017. URL http://www.accellera.org/ downloads/standards/systemc . [3] Hassan M. Ahmed, Jean-Marc Delosme, and Martin Morf. Highly concurrent computing structures for matrix arithmetic and signal processing."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , volume 96, pages 1–5, 1996. [5] Oriol Arcas-Abella et al. An empirical evaluation of high-level synthesis languages and tools for database acceleration. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , pages 1–8. IEEE, 2014. [6]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " . ARM Limited, v1.0 edition, 2013. URL http:// infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0022e/index.html . ARM IHI 0022E. [7] Bryce E. Bayer. Color imaging array, July 1976. US 3971065. [8] Samuel Bayliss and George A. Constantinides. Optimizing SDRAM bandwidth for cus- tom FPGA loop accelerators. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , pages 195–204. ACM, February 2012. [9] Marcus Bednara et al. Tradeoﬀ analysis and architecture design of a hybrid hardware/soft- ware sorter. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , pages 299–308. IEEE, 2000. [10] Vaughn Betz and Jonathan Rose. VPR: A new packing, placement and routing tool for FPGA research. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , pages 213–222. Springer, 1997. [11] Guy E. Blelloch. Preﬁx sums and their applications. Technical Report CMU-CS-90-190, School of Computer Science, Carnegie Mellon University, November 1990. [12] Stephen Brown and Jonathan Rose. FPGA and CPLD architectures: A tutorial."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 225,
            "refined_text": " , 13(2):42–57, 1996. 225"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " [13] Andrew Canis, Jongsok Choi, Mark Aldham, Victor Zhang, Ahmed Kammoona, Jason H Anderson, Stephen Brown, and Tomasz Czajkowski. LegUp: high-level synthesis for FPGA- based processor/accelerator systems. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , pages 33–36. ACM, 2011. [14] Jianwen Chen, Jason Cong, Ming Yan, and Yi Zou. FPGA-accelerated 3D reconstruction using compressive sensing. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , pages 163–166. ACM, 2012. [15] Jason Cong, Bin Liu, Stephen Neuendorﬀer, Juanjo Noguera, Kees Vissers, and Zhiru Zhang. High-level synthesis for fpgas: From prototyping to deployment."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , 30(4):473–491, 2011. [16] James W. Cooley and John W. Tukey. An algorithm for the machine calculation of complex fourier series."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , 19(90):297–301, 1965. ISSN 00255718. URL http://www.jstor.org/stable/2003354 . [17] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Cliﬀord Stein."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " . MIT Press, 3rd edition, 2009. ISBN 0262033844, 9780262033848. [18] Philippe Coussy and Adam Morawiec."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , volume 1. Springer, 2010. [19] Steve Dai, Ritchie Zhao, Gai Liu, Shreesha Srinath, Udit Gupta, Christopher Batten, and Zhiru Zhang. Dynamic hazard resolution for pipelining irregular loops in high-level synthesis. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , pages 189–194, 2017. ISBN 978-1-4503-4354-1. doi: 10.1145/3020078.3021754. URL http: //doi.acm.org/10.1145/3020078.3021754 . [20] Jeﬀrey Dean and Sanjay Ghemawat. MapReduce: Simpliﬁed data processing on large clusters."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , 51(1):107–113, January 2008. ISSN 0001-0782. doi: 10.1145/ 1327452.1327492. URL http://doi.acm.org/10.1145/1327452.1327492 . [21] Alvin M. Despain. Fourier transform computers using CORDIC iterations."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , 100(10):993–1001, 1974. [22] J. Detrey and F. de Dinechin. Floating-point trigonometric functions for FPGAs. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , pages 29–34, August 2007. doi: 10.1109/FPL.2007.4380621. [23] L Peter Deutsch. DEFLATE compressed data format speciﬁcation version 1.3. 1996. [24] Jean Duprat and Jean-Michel Muller. The CORDIC algorithm: new results for fast VLSI implementation."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , 42(2):168–178, 1993. [25] Brian P. Flannery, William H. Press, Saul A. Teukolsky, and William Vetterling."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " . Press Syndicate of the University of Cambridge, New York, 1992. [26] Daniel D. Gajski, Nikil D. Dutt, Allen C.H. Wu, and Steve Y.L. Lin."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " . Springer Science & Business Media, 2012. [27] W Morven Gentleman and Gordon Sande. Fast fourier transforms: for fun and proﬁt. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 226,
            "refined_text": " , pages 563–578. ACM, 1966. 226"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " [28] Nivia George, HyoukJoong Lee, David Novo, Tiark Rompf, Kevin J. Brown, Arvind K. Su- jeeth, Martin Odersky, Kunle Olukotun, and Paolo Ienne. Hardware system synthesis from domain-speciﬁc languages. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , pages 1–8. IEEE, 2014. [29] Sumit Gupta, Rajesh Gupta, Nikil Dutt, and Alexandru Nicolau."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . Kluwer, 2004. ISBN 1-4020-7837-4. [30] Scott Hauck and Andre DeHon."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , volume 1. Morgan Kaufmann, 2010. [31] James Hegarty, Ross Daly, Zachary DeVito, Jonathan Ragan-Kelley, Mark Horowitz, and Pat Hanrahan. Rigel: Flexible multi-rate image processing hardware."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , 35(4):85:1–85:11, July 2016. ISSN 0730-0301. doi: 10.1145/2897824.2925892. URL http: //doi.acm.org/10.1145/2897824.2925892 . [32] M. Heideman, D. Johnson, and C. Burrus. Gauss and the history of the fast fourier transform."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , 1(4):14–21, October 1984. ISSN 0740-7467. doi: 10.1109/MASSP. 1984.1162257. [33] David A. Huﬀman. A method for the construction of minimum-redundancy codes."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , 40(9):1098–1101, 1952. [34] Ryan Kastner, Anup Hosangadi, and Farzan Fallah."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . Cambridge University Press, 2010. [35] David Knapp."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . Prentice-Hall, 1996. ISBN 0-13-569252-0. [36] Donald Ervin Knuth."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , volume 3. Pearson Education, 1998. [37] Charles Eric Laforest, Zimo Li, Tristan O’rourke, Ming G. Liu, and J. Gregory Steﬀan. Composing multi-ported memories on FPGAs."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , 7(3):16:1–16:23, September 2014. ISSN 1936-7406. doi: 10.1145/2629629. URL http://doi.acm.org/10.1145/2629629 . [38] Glen G. Langdon Jr, Joan L. Mitchell, William B. Pennebaker, and Jorma J. Rissanen. Arith- metic coding encoder and decoder system, February 27 1990. US Patent 4,905,297. [39] Dajung Lee, Janarbek Matai, Brad Weals, and Ryan Kastner. High throughput channel tracking for JTRS wireless channel emulation. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . IEEE, 2014. [40] Edward A. Lee and David G. Messerschmitt. Pipeline interleaved programmable DSPs: Ar- chitecture."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " , 35(9): 1320–1333, September 1987. [41] Edward A. Lee and Pravin Varaiya."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . 2011. ISBN 0578077191. URL LeeVaraiya.org . [42] Edward Ashford Lee."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 227,
            "refined_text": " . MIT Press, 2017. ISBN 978-0262036481. 227"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " [43] C. Leiserson, F. Rose, and J. Saxe. Optimizing synchronous circuitry by retiming. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , 1993. [44] G. Liu, M. Tan, S. Dai, R. Zhao, and Z. Zhang. Architecture and synthesis for area-eﬃcient pipelining of irregular loop nests."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , 36(11):1817–1830, November 2017. ISSN 0278-0070. doi: 10.1109/TCAD.2017.2664067. [45] Rui Marcelino et al. Sorting units for FPGA-based embedded systems. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , pages 11–22. Springer, 2008. [46] Janarbek Matai, Pingfan Meng, Lingjuan Wu, Brad T Weals, and Ryan Kastner. Designing a hardware in the loop wireless digital channel emulator for software deﬁned radio. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " . IEEE, 2012. [47] Janarbek Matai, Joo-Young Kim, and Ryan Kastner. Energy eﬃcient canonical huﬀman encoding. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " . IEEE, 2014. [48] Janarbek Matai, Dustin Richmond, Dajung Lee, and Ryan Kastner. Enabling FPGAs for the masses."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , pages 195–204. ACM, 2016. ISBN 978-1-4503-3856-1. doi: 10.1145/2847263.2847268. URL http://doi.acm.org/10.1145/2847263.2847268 . [50] Carver Mead and Lynn Conway."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , volume 1080. Addison-Wesley Reading, MA, 1980. [51] Giovanni De Micheli."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " . McGraw-Hill Higher Education, 1994. [52] Shahnam Mirzaei, Anup Hosangadi, and Ryan Kastner. FPGA implementation of high speed ﬁr ﬁlters using add and shift method. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , pages 308–313. IEEE, 2007. [53] MISRA."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " . March 2013. ISBN 978-1-906400-10-1. URL https://www.misra.org.uk . [54] Rene Mueller et al. Sorting networks on FPGAs."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , 21(1):1–23, 2012. [55] Jorge Ortiz et al. A streaming high-throughput linear sorter system with contention buﬀering."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , 2011. [56] Marios C. Papaefthymiou. Understanding retiming through maximum average-weight cycles. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " , pages 338–348, 1991. [57] William B. Pennebaker."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 228,
            "refined_text": " . Springer, 1992. 228"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " [58] Robert Sedgewick."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " . Addison-Wesley, 2001. ISBN 978-0201756081. [59] Bhaskar Sherigar and Valmiki K. Ramanujan. Huﬀman decoder used for decoding both ad- vanced audio coding (AAC) and MP3 audio, June 29 2004. US Patent App. 10/880,695. [60] F. Winterstein, S. Bayliss, and G. A. Constantinides. High-level synthesis of dynamic data structures: A case study using Vivado HLS. In"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " , pages 362–365, December 2013. doi: 10.1109/ FPT.2013.6718388. [61] Ian H. Witten, Radford M. Neal, and John G. Cleary. Arithmetic coding for data compression."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " , 30(6):520–540, 1987. [62]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " . Xilinx, v1.5 edition, February 2017. URL https://www.xilinx.com/support/documentation/user_guides/ ug574-ultrascale-clb.pdf . [63]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " . Xilinx, v2017.1 edition, April 2017. URL https://www.xilinx.com/support/documentation/sw_manuals/xilinx2017_ 1/ug902-vivado-high-level-synthesis.pdf . [64]"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 229,
            "refined_text": " . Xilinx, v1.7 edition, March 2017. URL https://www.xilinx.com/support/documentation/user_guides/ ug570-ultrascale-configuration.pdf . 229"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 230,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 230,
            "refined_text": " 230"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 231,
            "refined_text": " array partitioning Dividing a single logical array into multiple physical memories.. 87, 152, 177 bitstream The conﬁguration data used to program the functionality of an FPGA. 13 BRAM A block RAM is a conﬁgurable random access memory that is embedded throughout an FPGA for data storage and communication.. 17, 131, 150, 164, 189, 232 C/RTL cosimulation The process of verifying an RTL design generated by HLS using testvectors captured from the C testbench.. 128 Compressed Row Storage Compressed Row Storage is a technique for representing a sparse matrix. It allows large matrices with a small number of elements to be stored and operated on eﬃciently.. 117 data rate The frequency at which a task can process the input data. This is often expressed in bits/second and thus also depends on the size of the input data. 20 Discrete Fourier Transform An transformation that takes a discrete signal and converts it to a freqeuncy-domain representation.. 4, 77, 99, 231 EDA Electronic design automation (EDA) are a set of software tools used to aid the hardware design process. . 11 Fast Fourier Transform An optimized version of the Discrete Fourier Transform (DFT) which requires fewer operations.. 77, 99 FF A ﬂip-ﬂop (FF) is a circuit that can store information. We typically think of it as storing one bit of data and are a fundamental building block for creating memories in digital circuits.. 14, 150, 164, 232 ﬁnite impulse response A common digital signal processing task that performs a convolution on the input signal with a ﬁxed signal that is deﬁned by its coeﬃcients. The FIR is often performed in hardware and can be eﬃciently implemented. 22 FPGA A ﬁeld-programmable gate array (FPGA) is an integrated circuit that can be customized or programmed after it is manufactured (“in the ﬁeld”). . 11, 232 HLS High-level synthesis is a hardware design process that translates an algorithmic description (which is decoupled from the cycle to cycle behavior) into a register transfer level (RTL) hardware description language which speciﬁes the exact behavior of the circuit on a cycle-by- cycle basis. 11, 188 231"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 232,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 233,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 233,
            "refined_text": " slice A (typically small) set of LUTs, FFs and multiplexors. These are often reported in FPGA resource utilization reports. . 14, 15, 14, 15, 16 sorting cell An simple stateful component that forms part of a larger sorting network or algorithm. Commonly a cell performs a compare-and-swap operation between two elements.. 180 stable sort A sorting algorithm that keeps diﬀerent elements with the same sorting key in their original sequence after sorting.. 174, 205 Static Single Assignment Static Single Assignment is an intermediate representation in compil- ers where each variable is assigned only once. This form makes many common optimizations simpler to write.. 180 switchbox A switchbox connects routing channels to provide a ﬂesible routing structure for data routed between the programmable logic and I/O block. . 15, 16, 15, 16 systolic array An array of processing elements that coordinate to perform a more complex al- gorithm. Systolic arrays are usually designed so that each processing element encapsulates some local information and only communicates with its local neighbors. This often enables systolic arrays to easily scale to large problem sizes by increasing the size of the array.. 180, 194 task A fundamental atomic unit of behavior or high-level synthesis computation; this corresponds to a function invocation in high-level synthesis. 20 task pipelining Being able to execute more than one task concurrently on the same accelerator in a pipelined fashion.. 113, 114, 154 task interval The time between when one task starts and the next starts or the diﬀerence between the start times of two consecutive tasks. 20 task latency The time between when a task starts and when it ﬁnishes. 20 233"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 234,
            "refined_text": ""
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 234,
            "refined_text": " 234"
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " ASIC application-speciﬁc integrated circuit."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " ASIC BRAM block RAM."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " BRAM, 17, 18, 131, 150, 152, 164, 189, 232 CRS compressed row storage."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " Compressed Row Storage, 117, 118, 119, 120 DFT Discrete Fourier Transform."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " Discrete Fourier Transform, 4, 77, 79, 80, 81, 82, 83, 92, 94, 92, 96, 97, 99, 100, 102, 116, 231 EDA electronic design automation."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " EDA, 11 FF ﬂip-ﬂop."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " FF, 14, 15, 18, 17, 18, 150, 164, 232 FFT Fast Fourier Transform."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " Fast Fourier Transform, 77, 97, 99, 100, 102, 103, 104, 105, 107, 108, 109, 111, 113, 114, 113, 114, 116 FPGA ﬁeld-programmable gate array."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " FPGA, 11, 13, 14, 15, 16, 17, 232 HLS high-level synthesis."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " HLS, 11, 12, 13, 15, 18, 188 LUT lookup table."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " LUT, 13, 14, 13, 14, 15, 232 PAR place and route."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " place and route, 13 PE Processing Element."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " processing element, 153, 154 ROM Read-only Memory."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " ROM, 96 RTL register-transfer level."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " RTL, 11, 13, 123, 128, 202, 231 SSA static single assigment."
        },
        {
            "document": "pp4fpgas.pdf",
            "page_number": 235,
            "refined_text": " Static Single Assignment, 180 235"
        }
    ]
}